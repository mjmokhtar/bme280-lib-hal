
i2c_bme280_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a29c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007d0  0800a440  0800a440  0001a440  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ac10  0800ac10  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800ac10  0800ac10  0001ac10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ac18  0800ac18  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ac18  0800ac18  0001ac18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ac1c  0800ac1c  0001ac1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800ac20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000300  200001d4  0800adf4  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004d4  0800adf4  000204d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b716  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b03  00000000  00000000  0002b95d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a70  00000000  00000000  0002d460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000820  00000000  00000000  0002ded0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016bf3  00000000  00000000  0002e6f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d563  00000000  00000000  000452e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00089bf4  00000000  00000000  00052846  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004380  00000000  00000000  000dc43c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000e07bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a424 	.word	0x0800a424

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	0800a424 	.word	0x0800a424

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_frsub>:
 8000c98:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c9c:	e002      	b.n	8000ca4 <__addsf3>
 8000c9e:	bf00      	nop

08000ca0 <__aeabi_fsub>:
 8000ca0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ca4 <__addsf3>:
 8000ca4:	0042      	lsls	r2, r0, #1
 8000ca6:	bf1f      	itttt	ne
 8000ca8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000cac:	ea92 0f03 	teqne	r2, r3
 8000cb0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cb4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cb8:	d06a      	beq.n	8000d90 <__addsf3+0xec>
 8000cba:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cbe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cc2:	bfc1      	itttt	gt
 8000cc4:	18d2      	addgt	r2, r2, r3
 8000cc6:	4041      	eorgt	r1, r0
 8000cc8:	4048      	eorgt	r0, r1
 8000cca:	4041      	eorgt	r1, r0
 8000ccc:	bfb8      	it	lt
 8000cce:	425b      	neglt	r3, r3
 8000cd0:	2b19      	cmp	r3, #25
 8000cd2:	bf88      	it	hi
 8000cd4:	4770      	bxhi	lr
 8000cd6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000cda:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cde:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ce2:	bf18      	it	ne
 8000ce4:	4240      	negne	r0, r0
 8000ce6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000cea:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000cee:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000cf2:	bf18      	it	ne
 8000cf4:	4249      	negne	r1, r1
 8000cf6:	ea92 0f03 	teq	r2, r3
 8000cfa:	d03f      	beq.n	8000d7c <__addsf3+0xd8>
 8000cfc:	f1a2 0201 	sub.w	r2, r2, #1
 8000d00:	fa41 fc03 	asr.w	ip, r1, r3
 8000d04:	eb10 000c 	adds.w	r0, r0, ip
 8000d08:	f1c3 0320 	rsb	r3, r3, #32
 8000d0c:	fa01 f103 	lsl.w	r1, r1, r3
 8000d10:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__addsf3+0x78>
 8000d16:	4249      	negs	r1, r1
 8000d18:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d1c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d20:	d313      	bcc.n	8000d4a <__addsf3+0xa6>
 8000d22:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d26:	d306      	bcc.n	8000d36 <__addsf3+0x92>
 8000d28:	0840      	lsrs	r0, r0, #1
 8000d2a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d2e:	f102 0201 	add.w	r2, r2, #1
 8000d32:	2afe      	cmp	r2, #254	; 0xfe
 8000d34:	d251      	bcs.n	8000dda <__addsf3+0x136>
 8000d36:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d3a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d3e:	bf08      	it	eq
 8000d40:	f020 0001 	biceq.w	r0, r0, #1
 8000d44:	ea40 0003 	orr.w	r0, r0, r3
 8000d48:	4770      	bx	lr
 8000d4a:	0049      	lsls	r1, r1, #1
 8000d4c:	eb40 0000 	adc.w	r0, r0, r0
 8000d50:	3a01      	subs	r2, #1
 8000d52:	bf28      	it	cs
 8000d54:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d58:	d2ed      	bcs.n	8000d36 <__addsf3+0x92>
 8000d5a:	fab0 fc80 	clz	ip, r0
 8000d5e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d62:	ebb2 020c 	subs.w	r2, r2, ip
 8000d66:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d6a:	bfaa      	itet	ge
 8000d6c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d70:	4252      	neglt	r2, r2
 8000d72:	4318      	orrge	r0, r3
 8000d74:	bfbc      	itt	lt
 8000d76:	40d0      	lsrlt	r0, r2
 8000d78:	4318      	orrlt	r0, r3
 8000d7a:	4770      	bx	lr
 8000d7c:	f092 0f00 	teq	r2, #0
 8000d80:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d84:	bf06      	itte	eq
 8000d86:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d8a:	3201      	addeq	r2, #1
 8000d8c:	3b01      	subne	r3, #1
 8000d8e:	e7b5      	b.n	8000cfc <__addsf3+0x58>
 8000d90:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d98:	bf18      	it	ne
 8000d9a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d9e:	d021      	beq.n	8000de4 <__addsf3+0x140>
 8000da0:	ea92 0f03 	teq	r2, r3
 8000da4:	d004      	beq.n	8000db0 <__addsf3+0x10c>
 8000da6:	f092 0f00 	teq	r2, #0
 8000daa:	bf08      	it	eq
 8000dac:	4608      	moveq	r0, r1
 8000dae:	4770      	bx	lr
 8000db0:	ea90 0f01 	teq	r0, r1
 8000db4:	bf1c      	itt	ne
 8000db6:	2000      	movne	r0, #0
 8000db8:	4770      	bxne	lr
 8000dba:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000dbe:	d104      	bne.n	8000dca <__addsf3+0x126>
 8000dc0:	0040      	lsls	r0, r0, #1
 8000dc2:	bf28      	it	cs
 8000dc4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000dc8:	4770      	bx	lr
 8000dca:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000dce:	bf3c      	itt	cc
 8000dd0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000dd4:	4770      	bxcc	lr
 8000dd6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000dda:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000dde:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000de2:	4770      	bx	lr
 8000de4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000de8:	bf16      	itet	ne
 8000dea:	4608      	movne	r0, r1
 8000dec:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000df0:	4601      	movne	r1, r0
 8000df2:	0242      	lsls	r2, r0, #9
 8000df4:	bf06      	itte	eq
 8000df6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000dfa:	ea90 0f01 	teqeq	r0, r1
 8000dfe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000e02:	4770      	bx	lr

08000e04 <__aeabi_ui2f>:
 8000e04:	f04f 0300 	mov.w	r3, #0
 8000e08:	e004      	b.n	8000e14 <__aeabi_i2f+0x8>
 8000e0a:	bf00      	nop

08000e0c <__aeabi_i2f>:
 8000e0c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e10:	bf48      	it	mi
 8000e12:	4240      	negmi	r0, r0
 8000e14:	ea5f 0c00 	movs.w	ip, r0
 8000e18:	bf08      	it	eq
 8000e1a:	4770      	bxeq	lr
 8000e1c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e20:	4601      	mov	r1, r0
 8000e22:	f04f 0000 	mov.w	r0, #0
 8000e26:	e01c      	b.n	8000e62 <__aeabi_l2f+0x2a>

08000e28 <__aeabi_ul2f>:
 8000e28:	ea50 0201 	orrs.w	r2, r0, r1
 8000e2c:	bf08      	it	eq
 8000e2e:	4770      	bxeq	lr
 8000e30:	f04f 0300 	mov.w	r3, #0
 8000e34:	e00a      	b.n	8000e4c <__aeabi_l2f+0x14>
 8000e36:	bf00      	nop

08000e38 <__aeabi_l2f>:
 8000e38:	ea50 0201 	orrs.w	r2, r0, r1
 8000e3c:	bf08      	it	eq
 8000e3e:	4770      	bxeq	lr
 8000e40:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e44:	d502      	bpl.n	8000e4c <__aeabi_l2f+0x14>
 8000e46:	4240      	negs	r0, r0
 8000e48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e4c:	ea5f 0c01 	movs.w	ip, r1
 8000e50:	bf02      	ittt	eq
 8000e52:	4684      	moveq	ip, r0
 8000e54:	4601      	moveq	r1, r0
 8000e56:	2000      	moveq	r0, #0
 8000e58:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e5c:	bf08      	it	eq
 8000e5e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e62:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e66:	fabc f28c 	clz	r2, ip
 8000e6a:	3a08      	subs	r2, #8
 8000e6c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e70:	db10      	blt.n	8000e94 <__aeabi_l2f+0x5c>
 8000e72:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e76:	4463      	add	r3, ip
 8000e78:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e7c:	f1c2 0220 	rsb	r2, r2, #32
 8000e80:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e84:	fa20 f202 	lsr.w	r2, r0, r2
 8000e88:	eb43 0002 	adc.w	r0, r3, r2
 8000e8c:	bf08      	it	eq
 8000e8e:	f020 0001 	biceq.w	r0, r0, #1
 8000e92:	4770      	bx	lr
 8000e94:	f102 0220 	add.w	r2, r2, #32
 8000e98:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e9c:	f1c2 0220 	rsb	r2, r2, #32
 8000ea0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ea4:	fa21 f202 	lsr.w	r2, r1, r2
 8000ea8:	eb43 0002 	adc.w	r0, r3, r2
 8000eac:	bf08      	it	eq
 8000eae:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000eb2:	4770      	bx	lr

08000eb4 <__aeabi_ldivmod>:
 8000eb4:	b97b      	cbnz	r3, 8000ed6 <__aeabi_ldivmod+0x22>
 8000eb6:	b972      	cbnz	r2, 8000ed6 <__aeabi_ldivmod+0x22>
 8000eb8:	2900      	cmp	r1, #0
 8000eba:	bfbe      	ittt	lt
 8000ebc:	2000      	movlt	r0, #0
 8000ebe:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000ec2:	e006      	blt.n	8000ed2 <__aeabi_ldivmod+0x1e>
 8000ec4:	bf08      	it	eq
 8000ec6:	2800      	cmpeq	r0, #0
 8000ec8:	bf1c      	itt	ne
 8000eca:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ece:	f04f 30ff 	movne.w	r0, #4294967295
 8000ed2:	f000 b9f1 	b.w	80012b8 <__aeabi_idiv0>
 8000ed6:	f1ad 0c08 	sub.w	ip, sp, #8
 8000eda:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ede:	2900      	cmp	r1, #0
 8000ee0:	db09      	blt.n	8000ef6 <__aeabi_ldivmod+0x42>
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	db1a      	blt.n	8000f1c <__aeabi_ldivmod+0x68>
 8000ee6:	f000 f883 	bl	8000ff0 <__udivmoddi4>
 8000eea:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000eee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ef2:	b004      	add	sp, #16
 8000ef4:	4770      	bx	lr
 8000ef6:	4240      	negs	r0, r0
 8000ef8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	db1b      	blt.n	8000f38 <__aeabi_ldivmod+0x84>
 8000f00:	f000 f876 	bl	8000ff0 <__udivmoddi4>
 8000f04:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f0c:	b004      	add	sp, #16
 8000f0e:	4240      	negs	r0, r0
 8000f10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f14:	4252      	negs	r2, r2
 8000f16:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f1a:	4770      	bx	lr
 8000f1c:	4252      	negs	r2, r2
 8000f1e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f22:	f000 f865 	bl	8000ff0 <__udivmoddi4>
 8000f26:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f2e:	b004      	add	sp, #16
 8000f30:	4240      	negs	r0, r0
 8000f32:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f36:	4770      	bx	lr
 8000f38:	4252      	negs	r2, r2
 8000f3a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f3e:	f000 f857 	bl	8000ff0 <__udivmoddi4>
 8000f42:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f46:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f4a:	b004      	add	sp, #16
 8000f4c:	4252      	negs	r2, r2
 8000f4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f52:	4770      	bx	lr

08000f54 <__aeabi_uldivmod>:
 8000f54:	b953      	cbnz	r3, 8000f6c <__aeabi_uldivmod+0x18>
 8000f56:	b94a      	cbnz	r2, 8000f6c <__aeabi_uldivmod+0x18>
 8000f58:	2900      	cmp	r1, #0
 8000f5a:	bf08      	it	eq
 8000f5c:	2800      	cmpeq	r0, #0
 8000f5e:	bf1c      	itt	ne
 8000f60:	f04f 31ff 	movne.w	r1, #4294967295
 8000f64:	f04f 30ff 	movne.w	r0, #4294967295
 8000f68:	f000 b9a6 	b.w	80012b8 <__aeabi_idiv0>
 8000f6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f74:	f000 f83c 	bl	8000ff0 <__udivmoddi4>
 8000f78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f80:	b004      	add	sp, #16
 8000f82:	4770      	bx	lr

08000f84 <__aeabi_d2lz>:
 8000f84:	b538      	push	{r3, r4, r5, lr}
 8000f86:	2200      	movs	r2, #0
 8000f88:	2300      	movs	r3, #0
 8000f8a:	4604      	mov	r4, r0
 8000f8c:	460d      	mov	r5, r1
 8000f8e:	f7ff fdad 	bl	8000aec <__aeabi_dcmplt>
 8000f92:	b928      	cbnz	r0, 8000fa0 <__aeabi_d2lz+0x1c>
 8000f94:	4620      	mov	r0, r4
 8000f96:	4629      	mov	r1, r5
 8000f98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000f9c:	f000 b80a 	b.w	8000fb4 <__aeabi_d2ulz>
 8000fa0:	4620      	mov	r0, r4
 8000fa2:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000fa6:	f000 f805 	bl	8000fb4 <__aeabi_d2ulz>
 8000faa:	4240      	negs	r0, r0
 8000fac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000fb0:	bd38      	pop	{r3, r4, r5, pc}
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_d2ulz>:
 8000fb4:	b5d0      	push	{r4, r6, r7, lr}
 8000fb6:	4b0c      	ldr	r3, [pc, #48]	; (8000fe8 <__aeabi_d2ulz+0x34>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	4606      	mov	r6, r0
 8000fbc:	460f      	mov	r7, r1
 8000fbe:	f7ff fb23 	bl	8000608 <__aeabi_dmul>
 8000fc2:	f7ff fdf9 	bl	8000bb8 <__aeabi_d2uiz>
 8000fc6:	4604      	mov	r4, r0
 8000fc8:	f7ff faa4 	bl	8000514 <__aeabi_ui2d>
 8000fcc:	4b07      	ldr	r3, [pc, #28]	; (8000fec <__aeabi_d2ulz+0x38>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	f7ff fb1a 	bl	8000608 <__aeabi_dmul>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	460b      	mov	r3, r1
 8000fd8:	4630      	mov	r0, r6
 8000fda:	4639      	mov	r1, r7
 8000fdc:	f7ff f95c 	bl	8000298 <__aeabi_dsub>
 8000fe0:	f7ff fdea 	bl	8000bb8 <__aeabi_d2uiz>
 8000fe4:	4621      	mov	r1, r4
 8000fe6:	bdd0      	pop	{r4, r6, r7, pc}
 8000fe8:	3df00000 	.word	0x3df00000
 8000fec:	41f00000 	.word	0x41f00000

08000ff0 <__udivmoddi4>:
 8000ff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ff4:	9e08      	ldr	r6, [sp, #32]
 8000ff6:	460d      	mov	r5, r1
 8000ff8:	4604      	mov	r4, r0
 8000ffa:	460f      	mov	r7, r1
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d14a      	bne.n	8001096 <__udivmoddi4+0xa6>
 8001000:	428a      	cmp	r2, r1
 8001002:	4694      	mov	ip, r2
 8001004:	d965      	bls.n	80010d2 <__udivmoddi4+0xe2>
 8001006:	fab2 f382 	clz	r3, r2
 800100a:	b143      	cbz	r3, 800101e <__udivmoddi4+0x2e>
 800100c:	fa02 fc03 	lsl.w	ip, r2, r3
 8001010:	f1c3 0220 	rsb	r2, r3, #32
 8001014:	409f      	lsls	r7, r3
 8001016:	fa20 f202 	lsr.w	r2, r0, r2
 800101a:	4317      	orrs	r7, r2
 800101c:	409c      	lsls	r4, r3
 800101e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001022:	fa1f f58c 	uxth.w	r5, ip
 8001026:	fbb7 f1fe 	udiv	r1, r7, lr
 800102a:	0c22      	lsrs	r2, r4, #16
 800102c:	fb0e 7711 	mls	r7, lr, r1, r7
 8001030:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8001034:	fb01 f005 	mul.w	r0, r1, r5
 8001038:	4290      	cmp	r0, r2
 800103a:	d90a      	bls.n	8001052 <__udivmoddi4+0x62>
 800103c:	eb1c 0202 	adds.w	r2, ip, r2
 8001040:	f101 37ff 	add.w	r7, r1, #4294967295
 8001044:	f080 811c 	bcs.w	8001280 <__udivmoddi4+0x290>
 8001048:	4290      	cmp	r0, r2
 800104a:	f240 8119 	bls.w	8001280 <__udivmoddi4+0x290>
 800104e:	3902      	subs	r1, #2
 8001050:	4462      	add	r2, ip
 8001052:	1a12      	subs	r2, r2, r0
 8001054:	b2a4      	uxth	r4, r4
 8001056:	fbb2 f0fe 	udiv	r0, r2, lr
 800105a:	fb0e 2210 	mls	r2, lr, r0, r2
 800105e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001062:	fb00 f505 	mul.w	r5, r0, r5
 8001066:	42a5      	cmp	r5, r4
 8001068:	d90a      	bls.n	8001080 <__udivmoddi4+0x90>
 800106a:	eb1c 0404 	adds.w	r4, ip, r4
 800106e:	f100 32ff 	add.w	r2, r0, #4294967295
 8001072:	f080 8107 	bcs.w	8001284 <__udivmoddi4+0x294>
 8001076:	42a5      	cmp	r5, r4
 8001078:	f240 8104 	bls.w	8001284 <__udivmoddi4+0x294>
 800107c:	4464      	add	r4, ip
 800107e:	3802      	subs	r0, #2
 8001080:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8001084:	1b64      	subs	r4, r4, r5
 8001086:	2100      	movs	r1, #0
 8001088:	b11e      	cbz	r6, 8001092 <__udivmoddi4+0xa2>
 800108a:	40dc      	lsrs	r4, r3
 800108c:	2300      	movs	r3, #0
 800108e:	e9c6 4300 	strd	r4, r3, [r6]
 8001092:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001096:	428b      	cmp	r3, r1
 8001098:	d908      	bls.n	80010ac <__udivmoddi4+0xbc>
 800109a:	2e00      	cmp	r6, #0
 800109c:	f000 80ed 	beq.w	800127a <__udivmoddi4+0x28a>
 80010a0:	2100      	movs	r1, #0
 80010a2:	e9c6 0500 	strd	r0, r5, [r6]
 80010a6:	4608      	mov	r0, r1
 80010a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010ac:	fab3 f183 	clz	r1, r3
 80010b0:	2900      	cmp	r1, #0
 80010b2:	d149      	bne.n	8001148 <__udivmoddi4+0x158>
 80010b4:	42ab      	cmp	r3, r5
 80010b6:	d302      	bcc.n	80010be <__udivmoddi4+0xce>
 80010b8:	4282      	cmp	r2, r0
 80010ba:	f200 80f8 	bhi.w	80012ae <__udivmoddi4+0x2be>
 80010be:	1a84      	subs	r4, r0, r2
 80010c0:	eb65 0203 	sbc.w	r2, r5, r3
 80010c4:	2001      	movs	r0, #1
 80010c6:	4617      	mov	r7, r2
 80010c8:	2e00      	cmp	r6, #0
 80010ca:	d0e2      	beq.n	8001092 <__udivmoddi4+0xa2>
 80010cc:	e9c6 4700 	strd	r4, r7, [r6]
 80010d0:	e7df      	b.n	8001092 <__udivmoddi4+0xa2>
 80010d2:	b902      	cbnz	r2, 80010d6 <__udivmoddi4+0xe6>
 80010d4:	deff      	udf	#255	; 0xff
 80010d6:	fab2 f382 	clz	r3, r2
 80010da:	2b00      	cmp	r3, #0
 80010dc:	f040 8090 	bne.w	8001200 <__udivmoddi4+0x210>
 80010e0:	1a8a      	subs	r2, r1, r2
 80010e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80010e6:	fa1f fe8c 	uxth.w	lr, ip
 80010ea:	2101      	movs	r1, #1
 80010ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80010f0:	fb07 2015 	mls	r0, r7, r5, r2
 80010f4:	0c22      	lsrs	r2, r4, #16
 80010f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80010fa:	fb0e f005 	mul.w	r0, lr, r5
 80010fe:	4290      	cmp	r0, r2
 8001100:	d908      	bls.n	8001114 <__udivmoddi4+0x124>
 8001102:	eb1c 0202 	adds.w	r2, ip, r2
 8001106:	f105 38ff 	add.w	r8, r5, #4294967295
 800110a:	d202      	bcs.n	8001112 <__udivmoddi4+0x122>
 800110c:	4290      	cmp	r0, r2
 800110e:	f200 80cb 	bhi.w	80012a8 <__udivmoddi4+0x2b8>
 8001112:	4645      	mov	r5, r8
 8001114:	1a12      	subs	r2, r2, r0
 8001116:	b2a4      	uxth	r4, r4
 8001118:	fbb2 f0f7 	udiv	r0, r2, r7
 800111c:	fb07 2210 	mls	r2, r7, r0, r2
 8001120:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001124:	fb0e fe00 	mul.w	lr, lr, r0
 8001128:	45a6      	cmp	lr, r4
 800112a:	d908      	bls.n	800113e <__udivmoddi4+0x14e>
 800112c:	eb1c 0404 	adds.w	r4, ip, r4
 8001130:	f100 32ff 	add.w	r2, r0, #4294967295
 8001134:	d202      	bcs.n	800113c <__udivmoddi4+0x14c>
 8001136:	45a6      	cmp	lr, r4
 8001138:	f200 80bb 	bhi.w	80012b2 <__udivmoddi4+0x2c2>
 800113c:	4610      	mov	r0, r2
 800113e:	eba4 040e 	sub.w	r4, r4, lr
 8001142:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8001146:	e79f      	b.n	8001088 <__udivmoddi4+0x98>
 8001148:	f1c1 0720 	rsb	r7, r1, #32
 800114c:	408b      	lsls	r3, r1
 800114e:	fa22 fc07 	lsr.w	ip, r2, r7
 8001152:	ea4c 0c03 	orr.w	ip, ip, r3
 8001156:	fa05 f401 	lsl.w	r4, r5, r1
 800115a:	fa20 f307 	lsr.w	r3, r0, r7
 800115e:	40fd      	lsrs	r5, r7
 8001160:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001164:	4323      	orrs	r3, r4
 8001166:	fbb5 f8f9 	udiv	r8, r5, r9
 800116a:	fa1f fe8c 	uxth.w	lr, ip
 800116e:	fb09 5518 	mls	r5, r9, r8, r5
 8001172:	0c1c      	lsrs	r4, r3, #16
 8001174:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001178:	fb08 f50e 	mul.w	r5, r8, lr
 800117c:	42a5      	cmp	r5, r4
 800117e:	fa02 f201 	lsl.w	r2, r2, r1
 8001182:	fa00 f001 	lsl.w	r0, r0, r1
 8001186:	d90b      	bls.n	80011a0 <__udivmoddi4+0x1b0>
 8001188:	eb1c 0404 	adds.w	r4, ip, r4
 800118c:	f108 3aff 	add.w	sl, r8, #4294967295
 8001190:	f080 8088 	bcs.w	80012a4 <__udivmoddi4+0x2b4>
 8001194:	42a5      	cmp	r5, r4
 8001196:	f240 8085 	bls.w	80012a4 <__udivmoddi4+0x2b4>
 800119a:	f1a8 0802 	sub.w	r8, r8, #2
 800119e:	4464      	add	r4, ip
 80011a0:	1b64      	subs	r4, r4, r5
 80011a2:	b29d      	uxth	r5, r3
 80011a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80011a8:	fb09 4413 	mls	r4, r9, r3, r4
 80011ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80011b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80011b4:	45a6      	cmp	lr, r4
 80011b6:	d908      	bls.n	80011ca <__udivmoddi4+0x1da>
 80011b8:	eb1c 0404 	adds.w	r4, ip, r4
 80011bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80011c0:	d26c      	bcs.n	800129c <__udivmoddi4+0x2ac>
 80011c2:	45a6      	cmp	lr, r4
 80011c4:	d96a      	bls.n	800129c <__udivmoddi4+0x2ac>
 80011c6:	3b02      	subs	r3, #2
 80011c8:	4464      	add	r4, ip
 80011ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80011ce:	fba3 9502 	umull	r9, r5, r3, r2
 80011d2:	eba4 040e 	sub.w	r4, r4, lr
 80011d6:	42ac      	cmp	r4, r5
 80011d8:	46c8      	mov	r8, r9
 80011da:	46ae      	mov	lr, r5
 80011dc:	d356      	bcc.n	800128c <__udivmoddi4+0x29c>
 80011de:	d053      	beq.n	8001288 <__udivmoddi4+0x298>
 80011e0:	b156      	cbz	r6, 80011f8 <__udivmoddi4+0x208>
 80011e2:	ebb0 0208 	subs.w	r2, r0, r8
 80011e6:	eb64 040e 	sbc.w	r4, r4, lr
 80011ea:	fa04 f707 	lsl.w	r7, r4, r7
 80011ee:	40ca      	lsrs	r2, r1
 80011f0:	40cc      	lsrs	r4, r1
 80011f2:	4317      	orrs	r7, r2
 80011f4:	e9c6 7400 	strd	r7, r4, [r6]
 80011f8:	4618      	mov	r0, r3
 80011fa:	2100      	movs	r1, #0
 80011fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001200:	f1c3 0120 	rsb	r1, r3, #32
 8001204:	fa02 fc03 	lsl.w	ip, r2, r3
 8001208:	fa20 f201 	lsr.w	r2, r0, r1
 800120c:	fa25 f101 	lsr.w	r1, r5, r1
 8001210:	409d      	lsls	r5, r3
 8001212:	432a      	orrs	r2, r5
 8001214:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001218:	fa1f fe8c 	uxth.w	lr, ip
 800121c:	fbb1 f0f7 	udiv	r0, r1, r7
 8001220:	fb07 1510 	mls	r5, r7, r0, r1
 8001224:	0c11      	lsrs	r1, r2, #16
 8001226:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800122a:	fb00 f50e 	mul.w	r5, r0, lr
 800122e:	428d      	cmp	r5, r1
 8001230:	fa04 f403 	lsl.w	r4, r4, r3
 8001234:	d908      	bls.n	8001248 <__udivmoddi4+0x258>
 8001236:	eb1c 0101 	adds.w	r1, ip, r1
 800123a:	f100 38ff 	add.w	r8, r0, #4294967295
 800123e:	d22f      	bcs.n	80012a0 <__udivmoddi4+0x2b0>
 8001240:	428d      	cmp	r5, r1
 8001242:	d92d      	bls.n	80012a0 <__udivmoddi4+0x2b0>
 8001244:	3802      	subs	r0, #2
 8001246:	4461      	add	r1, ip
 8001248:	1b49      	subs	r1, r1, r5
 800124a:	b292      	uxth	r2, r2
 800124c:	fbb1 f5f7 	udiv	r5, r1, r7
 8001250:	fb07 1115 	mls	r1, r7, r5, r1
 8001254:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001258:	fb05 f10e 	mul.w	r1, r5, lr
 800125c:	4291      	cmp	r1, r2
 800125e:	d908      	bls.n	8001272 <__udivmoddi4+0x282>
 8001260:	eb1c 0202 	adds.w	r2, ip, r2
 8001264:	f105 38ff 	add.w	r8, r5, #4294967295
 8001268:	d216      	bcs.n	8001298 <__udivmoddi4+0x2a8>
 800126a:	4291      	cmp	r1, r2
 800126c:	d914      	bls.n	8001298 <__udivmoddi4+0x2a8>
 800126e:	3d02      	subs	r5, #2
 8001270:	4462      	add	r2, ip
 8001272:	1a52      	subs	r2, r2, r1
 8001274:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8001278:	e738      	b.n	80010ec <__udivmoddi4+0xfc>
 800127a:	4631      	mov	r1, r6
 800127c:	4630      	mov	r0, r6
 800127e:	e708      	b.n	8001092 <__udivmoddi4+0xa2>
 8001280:	4639      	mov	r1, r7
 8001282:	e6e6      	b.n	8001052 <__udivmoddi4+0x62>
 8001284:	4610      	mov	r0, r2
 8001286:	e6fb      	b.n	8001080 <__udivmoddi4+0x90>
 8001288:	4548      	cmp	r0, r9
 800128a:	d2a9      	bcs.n	80011e0 <__udivmoddi4+0x1f0>
 800128c:	ebb9 0802 	subs.w	r8, r9, r2
 8001290:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001294:	3b01      	subs	r3, #1
 8001296:	e7a3      	b.n	80011e0 <__udivmoddi4+0x1f0>
 8001298:	4645      	mov	r5, r8
 800129a:	e7ea      	b.n	8001272 <__udivmoddi4+0x282>
 800129c:	462b      	mov	r3, r5
 800129e:	e794      	b.n	80011ca <__udivmoddi4+0x1da>
 80012a0:	4640      	mov	r0, r8
 80012a2:	e7d1      	b.n	8001248 <__udivmoddi4+0x258>
 80012a4:	46d0      	mov	r8, sl
 80012a6:	e77b      	b.n	80011a0 <__udivmoddi4+0x1b0>
 80012a8:	3d02      	subs	r5, #2
 80012aa:	4462      	add	r2, ip
 80012ac:	e732      	b.n	8001114 <__udivmoddi4+0x124>
 80012ae:	4608      	mov	r0, r1
 80012b0:	e70a      	b.n	80010c8 <__udivmoddi4+0xd8>
 80012b2:	4464      	add	r4, ip
 80012b4:	3802      	subs	r0, #2
 80012b6:	e742      	b.n	800113e <__udivmoddi4+0x14e>

080012b8 <__aeabi_idiv0>:
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop

080012bc <BME280_Init>:
 *      Author: WELCOME
 */

#include "BME280_STM32.h"

bool BME280_Init(BME280_HandleTypeDef *bme, I2C_HandleTypeDef *hi2c, uint8_t address) {
 80012bc:	b580      	push	{r7, lr}
 80012be:	b086      	sub	sp, #24
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	60f8      	str	r0, [r7, #12]
 80012c4:	60b9      	str	r1, [r7, #8]
 80012c6:	4613      	mov	r3, r2
 80012c8:	71fb      	strb	r3, [r7, #7]
    bme->hi2c = hi2c;
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	68ba      	ldr	r2, [r7, #8]
 80012ce:	601a      	str	r2, [r3, #0]
    bme->address = address << 1;  // STM32 HAL uses 8-bit address format
 80012d0:	79fb      	ldrb	r3, [r7, #7]
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	b2da      	uxtb	r2, r3
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	711a      	strb	r2, [r3, #4]
    bme->t_fine = 0;
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	2200      	movs	r2, #0
 80012de:	62da      	str	r2, [r3, #44]	; 0x2c

    HAL_Delay(100); // Give time for I2C to stabilize
 80012e0:	2064      	movs	r0, #100	; 0x64
 80012e2:	f001 fd03 	bl	8002cec <HAL_Delay>

    // Test I2C communication first
    if (HAL_I2C_IsDeviceReady(bme->hi2c, bme->address, 3, BME280_I2C_TIMEOUT) != HAL_OK) {
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	6818      	ldr	r0, [r3, #0]
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	791b      	ldrb	r3, [r3, #4]
 80012ee:	b299      	uxth	r1, r3
 80012f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012f4:	2203      	movs	r2, #3
 80012f6:	f002 fbeb 	bl	8003ad0 <HAL_I2C_IsDeviceReady>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <BME280_Init+0x48>
        return false;
 8001300:	2300      	movs	r3, #0
 8001302:	e035      	b.n	8001370 <BME280_Init+0xb4>
    }

    // Check chip ID
    uint8_t chipID = BME280_GetChipID(bme);
 8001304:	68f8      	ldr	r0, [r7, #12]
 8001306:	f000 f84a 	bl	800139e <BME280_GetChipID>
 800130a:	4603      	mov	r3, r0
 800130c:	75fb      	strb	r3, [r7, #23]
    if (chipID != BME280_CHIP_ID) {
 800130e:	7dfb      	ldrb	r3, [r7, #23]
 8001310:	2b60      	cmp	r3, #96	; 0x60
 8001312:	d001      	beq.n	8001318 <BME280_Init+0x5c>
        return false;
 8001314:	2300      	movs	r3, #0
 8001316:	e02b      	b.n	8001370 <BME280_Init+0xb4>
    }

    // Reset sensor
    BME280_Reset(bme);
 8001318:	68f8      	ldr	r0, [r7, #12]
 800131a:	f000 f84d 	bl	80013b8 <BME280_Reset>
    HAL_Delay(100); // Wait for reset to complete
 800131e:	2064      	movs	r0, #100	; 0x64
 8001320:	f001 fce4 	bl	8002cec <HAL_Delay>

    // Verify sensor is responsive after reset
    chipID = BME280_GetChipID(bme);
 8001324:	68f8      	ldr	r0, [r7, #12]
 8001326:	f000 f83a 	bl	800139e <BME280_GetChipID>
 800132a:	4603      	mov	r3, r0
 800132c:	75fb      	strb	r3, [r7, #23]
    if (chipID != BME280_CHIP_ID) {
 800132e:	7dfb      	ldrb	r3, [r7, #23]
 8001330:	2b60      	cmp	r3, #96	; 0x60
 8001332:	d001      	beq.n	8001338 <BME280_Init+0x7c>
        return false;
 8001334:	2300      	movs	r3, #0
 8001336:	e01b      	b.n	8001370 <BME280_Init+0xb4>
    }

    // Read calibration data
    BME280_ReadCalibrationData(bme);
 8001338:	68f8      	ldr	r0, [r7, #12]
 800133a:	f000 f88c 	bl	8001456 <BME280_ReadCalibrationData>

    // Set default configuration
    BME280_SetOversamplingTemperature(bme, BME280_OVERSAMP_16X);
 800133e:	2105      	movs	r1, #5
 8001340:	68f8      	ldr	r0, [r7, #12]
 8001342:	f000 f97c 	bl	800163e <BME280_SetOversamplingTemperature>
    BME280_SetOversamplingPressure(bme, BME280_OVERSAMP_16X);
 8001346:	2105      	movs	r1, #5
 8001348:	68f8      	ldr	r0, [r7, #12]
 800134a:	f000 f999 	bl	8001680 <BME280_SetOversamplingPressure>
    BME280_SetOversamplingHumidity(bme, BME280_OVERSAMP_16X);
 800134e:	2105      	movs	r1, #5
 8001350:	68f8      	ldr	r0, [r7, #12]
 8001352:	f000 f9b9 	bl	80016c8 <BME280_SetOversamplingHumidity>
    BME280_SetFilter(bme, BME280_FILTER_16);
 8001356:	2104      	movs	r1, #4
 8001358:	68f8      	ldr	r0, [r7, #12]
 800135a:	f000 f9d4 	bl	8001706 <BME280_SetFilter>
    BME280_SetStandbyTime(bme, BME280_STANDBY_0_5);
 800135e:	2100      	movs	r1, #0
 8001360:	68f8      	ldr	r0, [r7, #12]
 8001362:	f000 f9f4 	bl	800174e <BME280_SetStandbyTime>
    BME280_SetMode(bme, BME280_MODE_NORMAL);
 8001366:	2103      	movs	r1, #3
 8001368:	68f8      	ldr	r0, [r7, #12]
 800136a:	f000 f945 	bl	80015f8 <BME280_SetMode>

    return true;
 800136e:	2301      	movs	r3, #1
}
 8001370:	4618      	mov	r0, r3
 8001372:	3718      	adds	r7, #24
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}

08001378 <BME280_IsConnected>:

bool BME280_IsConnected(BME280_HandleTypeDef *bme) {
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
    uint8_t chipID = BME280_GetChipID(bme);
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f000 f80c 	bl	800139e <BME280_GetChipID>
 8001386:	4603      	mov	r3, r0
 8001388:	73fb      	strb	r3, [r7, #15]
    return (chipID == BME280_CHIP_ID);
 800138a:	7bfb      	ldrb	r3, [r7, #15]
 800138c:	2b60      	cmp	r3, #96	; 0x60
 800138e:	bf0c      	ite	eq
 8001390:	2301      	moveq	r3, #1
 8001392:	2300      	movne	r3, #0
 8001394:	b2db      	uxtb	r3, r3
}
 8001396:	4618      	mov	r0, r3
 8001398:	3710      	adds	r7, #16
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}

0800139e <BME280_GetChipID>:

uint8_t BME280_GetChipID(BME280_HandleTypeDef *bme) {
 800139e:	b580      	push	{r7, lr}
 80013a0:	b082      	sub	sp, #8
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	6078      	str	r0, [r7, #4]
    return BME280_ReadRegister(bme, BME280_REG_ID);
 80013a6:	21d0      	movs	r1, #208	; 0xd0
 80013a8:	6878      	ldr	r0, [r7, #4]
 80013aa:	f000 f812 	bl	80013d2 <BME280_ReadRegister>
 80013ae:	4603      	mov	r3, r0
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3708      	adds	r7, #8
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <BME280_Reset>:

void BME280_Reset(BME280_HandleTypeDef *bme) {
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
    BME280_WriteRegister(bme, BME280_REG_RESET, 0xB6);
 80013c0:	22b6      	movs	r2, #182	; 0xb6
 80013c2:	21e0      	movs	r1, #224	; 0xe0
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f000 f826 	bl	8001416 <BME280_WriteRegister>
}
 80013ca:	bf00      	nop
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <BME280_ReadRegister>:

uint8_t BME280_ReadRegister(BME280_HandleTypeDef *bme, uint8_t reg) {
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b088      	sub	sp, #32
 80013d6:	af04      	add	r7, sp, #16
 80013d8:	6078      	str	r0, [r7, #4]
 80013da:	460b      	mov	r3, r1
 80013dc:	70fb      	strb	r3, [r7, #3]
    uint8_t data;
    if (HAL_I2C_Mem_Read(bme->hi2c, bme->address, reg, I2C_MEMADD_SIZE_8BIT,
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6818      	ldr	r0, [r3, #0]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	791b      	ldrb	r3, [r3, #4]
 80013e6:	b299      	uxth	r1, r3
 80013e8:	78fb      	ldrb	r3, [r7, #3]
 80013ea:	b29a      	uxth	r2, r3
 80013ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013f0:	9302      	str	r3, [sp, #8]
 80013f2:	2301      	movs	r3, #1
 80013f4:	9301      	str	r3, [sp, #4]
 80013f6:	f107 030f 	add.w	r3, r7, #15
 80013fa:	9300      	str	r3, [sp, #0]
 80013fc:	2301      	movs	r3, #1
 80013fe:	f002 f941 	bl	8003684 <HAL_I2C_Mem_Read>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d101      	bne.n	800140c <BME280_ReadRegister+0x3a>
                         &data, 1, BME280_I2C_TIMEOUT) == HAL_OK) {
        return data;
 8001408:	7bfb      	ldrb	r3, [r7, #15]
 800140a:	e000      	b.n	800140e <BME280_ReadRegister+0x3c>
    }
    return 0;
 800140c:	2300      	movs	r3, #0
}
 800140e:	4618      	mov	r0, r3
 8001410:	3710      	adds	r7, #16
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}

08001416 <BME280_WriteRegister>:

void BME280_WriteRegister(BME280_HandleTypeDef *bme, uint8_t reg, uint8_t value) {
 8001416:	b580      	push	{r7, lr}
 8001418:	b086      	sub	sp, #24
 800141a:	af04      	add	r7, sp, #16
 800141c:	6078      	str	r0, [r7, #4]
 800141e:	460b      	mov	r3, r1
 8001420:	70fb      	strb	r3, [r7, #3]
 8001422:	4613      	mov	r3, r2
 8001424:	70bb      	strb	r3, [r7, #2]
    HAL_I2C_Mem_Write(bme->hi2c, bme->address, reg, I2C_MEMADD_SIZE_8BIT,
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6818      	ldr	r0, [r3, #0]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	791b      	ldrb	r3, [r3, #4]
 800142e:	b299      	uxth	r1, r3
 8001430:	78fb      	ldrb	r3, [r7, #3]
 8001432:	b29a      	uxth	r2, r3
 8001434:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001438:	9302      	str	r3, [sp, #8]
 800143a:	2301      	movs	r3, #1
 800143c:	9301      	str	r3, [sp, #4]
 800143e:	1cbb      	adds	r3, r7, #2
 8001440:	9300      	str	r3, [sp, #0]
 8001442:	2301      	movs	r3, #1
 8001444:	f002 f824 	bl	8003490 <HAL_I2C_Mem_Write>
                      &value, 1, BME280_I2C_TIMEOUT);
    HAL_Delay(1); // Small delay after write
 8001448:	2001      	movs	r0, #1
 800144a:	f001 fc4f 	bl	8002cec <HAL_Delay>
}
 800144e:	bf00      	nop
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}

08001456 <BME280_ReadCalibrationData>:

void BME280_ReadCalibrationData(BME280_HandleTypeDef *bme) {
 8001456:	b580      	push	{r7, lr}
 8001458:	b08e      	sub	sp, #56	; 0x38
 800145a:	af04      	add	r7, sp, #16
 800145c:	6078      	str	r0, [r7, #4]
    uint8_t calibData[24];
    uint8_t humidData[7];

    // Read temperature and pressure calibration data (0x88-0x9F)
    HAL_I2C_Mem_Read(bme->hi2c, bme->address, BME280_REG_CALIB00, I2C_MEMADD_SIZE_8BIT,
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6818      	ldr	r0, [r3, #0]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	791b      	ldrb	r3, [r3, #4]
 8001466:	b299      	uxth	r1, r3
 8001468:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800146c:	9302      	str	r3, [sp, #8]
 800146e:	2318      	movs	r3, #24
 8001470:	9301      	str	r3, [sp, #4]
 8001472:	f107 0310 	add.w	r3, r7, #16
 8001476:	9300      	str	r3, [sp, #0]
 8001478:	2301      	movs	r3, #1
 800147a:	2288      	movs	r2, #136	; 0x88
 800147c:	f002 f902 	bl	8003684 <HAL_I2C_Mem_Read>
                     calibData, 24, BME280_I2C_TIMEOUT);

    bme->calibData.dig_T1 = (calibData[1] << 8) | calibData[0];
 8001480:	7c7b      	ldrb	r3, [r7, #17]
 8001482:	021b      	lsls	r3, r3, #8
 8001484:	b21a      	sxth	r2, r3
 8001486:	7c3b      	ldrb	r3, [r7, #16]
 8001488:	b21b      	sxth	r3, r3
 800148a:	4313      	orrs	r3, r2
 800148c:	b21b      	sxth	r3, r3
 800148e:	b29a      	uxth	r2, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	80da      	strh	r2, [r3, #6]
    bme->calibData.dig_T2 = (calibData[3] << 8) | calibData[2];
 8001494:	7cfb      	ldrb	r3, [r7, #19]
 8001496:	021b      	lsls	r3, r3, #8
 8001498:	b21a      	sxth	r2, r3
 800149a:	7cbb      	ldrb	r3, [r7, #18]
 800149c:	b21b      	sxth	r3, r3
 800149e:	4313      	orrs	r3, r2
 80014a0:	b21a      	sxth	r2, r3
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	811a      	strh	r2, [r3, #8]
    bme->calibData.dig_T3 = (calibData[5] << 8) | calibData[4];
 80014a6:	7d7b      	ldrb	r3, [r7, #21]
 80014a8:	021b      	lsls	r3, r3, #8
 80014aa:	b21a      	sxth	r2, r3
 80014ac:	7d3b      	ldrb	r3, [r7, #20]
 80014ae:	b21b      	sxth	r3, r3
 80014b0:	4313      	orrs	r3, r2
 80014b2:	b21a      	sxth	r2, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	815a      	strh	r2, [r3, #10]

    bme->calibData.dig_P1 = (calibData[7] << 8) | calibData[6];
 80014b8:	7dfb      	ldrb	r3, [r7, #23]
 80014ba:	021b      	lsls	r3, r3, #8
 80014bc:	b21a      	sxth	r2, r3
 80014be:	7dbb      	ldrb	r3, [r7, #22]
 80014c0:	b21b      	sxth	r3, r3
 80014c2:	4313      	orrs	r3, r2
 80014c4:	b21b      	sxth	r3, r3
 80014c6:	b29a      	uxth	r2, r3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	819a      	strh	r2, [r3, #12]
    bme->calibData.dig_P2 = (calibData[9] << 8) | calibData[8];
 80014cc:	7e7b      	ldrb	r3, [r7, #25]
 80014ce:	021b      	lsls	r3, r3, #8
 80014d0:	b21a      	sxth	r2, r3
 80014d2:	7e3b      	ldrb	r3, [r7, #24]
 80014d4:	b21b      	sxth	r3, r3
 80014d6:	4313      	orrs	r3, r2
 80014d8:	b21a      	sxth	r2, r3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	81da      	strh	r2, [r3, #14]
    bme->calibData.dig_P3 = (calibData[11] << 8) | calibData[10];
 80014de:	7efb      	ldrb	r3, [r7, #27]
 80014e0:	021b      	lsls	r3, r3, #8
 80014e2:	b21a      	sxth	r2, r3
 80014e4:	7ebb      	ldrb	r3, [r7, #26]
 80014e6:	b21b      	sxth	r3, r3
 80014e8:	4313      	orrs	r3, r2
 80014ea:	b21a      	sxth	r2, r3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	821a      	strh	r2, [r3, #16]
    bme->calibData.dig_P4 = (calibData[13] << 8) | calibData[12];
 80014f0:	7f7b      	ldrb	r3, [r7, #29]
 80014f2:	021b      	lsls	r3, r3, #8
 80014f4:	b21a      	sxth	r2, r3
 80014f6:	7f3b      	ldrb	r3, [r7, #28]
 80014f8:	b21b      	sxth	r3, r3
 80014fa:	4313      	orrs	r3, r2
 80014fc:	b21a      	sxth	r2, r3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	825a      	strh	r2, [r3, #18]
    bme->calibData.dig_P5 = (calibData[15] << 8) | calibData[14];
 8001502:	7ffb      	ldrb	r3, [r7, #31]
 8001504:	021b      	lsls	r3, r3, #8
 8001506:	b21a      	sxth	r2, r3
 8001508:	7fbb      	ldrb	r3, [r7, #30]
 800150a:	b21b      	sxth	r3, r3
 800150c:	4313      	orrs	r3, r2
 800150e:	b21a      	sxth	r2, r3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	829a      	strh	r2, [r3, #20]
    bme->calibData.dig_P6 = (calibData[17] << 8) | calibData[16];
 8001514:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001518:	021b      	lsls	r3, r3, #8
 800151a:	b21a      	sxth	r2, r3
 800151c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001520:	b21b      	sxth	r3, r3
 8001522:	4313      	orrs	r3, r2
 8001524:	b21a      	sxth	r2, r3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	82da      	strh	r2, [r3, #22]
    bme->calibData.dig_P7 = (calibData[19] << 8) | calibData[18];
 800152a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800152e:	021b      	lsls	r3, r3, #8
 8001530:	b21a      	sxth	r2, r3
 8001532:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001536:	b21b      	sxth	r3, r3
 8001538:	4313      	orrs	r3, r2
 800153a:	b21a      	sxth	r2, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	831a      	strh	r2, [r3, #24]
    bme->calibData.dig_P8 = (calibData[21] << 8) | calibData[20];
 8001540:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001544:	021b      	lsls	r3, r3, #8
 8001546:	b21a      	sxth	r2, r3
 8001548:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800154c:	b21b      	sxth	r3, r3
 800154e:	4313      	orrs	r3, r2
 8001550:	b21a      	sxth	r2, r3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	835a      	strh	r2, [r3, #26]
    bme->calibData.dig_P9 = (calibData[23] << 8) | calibData[22];
 8001556:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800155a:	021b      	lsls	r3, r3, #8
 800155c:	b21a      	sxth	r2, r3
 800155e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001562:	b21b      	sxth	r3, r3
 8001564:	4313      	orrs	r3, r2
 8001566:	b21a      	sxth	r2, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	839a      	strh	r2, [r3, #28]

    // Read H1 from register 0xA1
    bme->calibData.dig_H1 = BME280_ReadRegister(bme, 0xA1);
 800156c:	21a1      	movs	r1, #161	; 0xa1
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f7ff ff2f 	bl	80013d2 <BME280_ReadRegister>
 8001574:	4603      	mov	r3, r0
 8001576:	461a      	mov	r2, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	779a      	strb	r2, [r3, #30]

    // Read humidity calibration data (0xE1-0xE7)
    HAL_I2C_Mem_Read(bme->hi2c, bme->address, BME280_REG_CALIB26, I2C_MEMADD_SIZE_8BIT,
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6818      	ldr	r0, [r3, #0]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	791b      	ldrb	r3, [r3, #4]
 8001584:	b299      	uxth	r1, r3
 8001586:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800158a:	9302      	str	r3, [sp, #8]
 800158c:	2307      	movs	r3, #7
 800158e:	9301      	str	r3, [sp, #4]
 8001590:	f107 0308 	add.w	r3, r7, #8
 8001594:	9300      	str	r3, [sp, #0]
 8001596:	2301      	movs	r3, #1
 8001598:	22e1      	movs	r2, #225	; 0xe1
 800159a:	f002 f873 	bl	8003684 <HAL_I2C_Mem_Read>
                     humidData, 7, BME280_I2C_TIMEOUT);

    bme->calibData.dig_H2 = (humidData[1] << 8) | humidData[0];
 800159e:	7a7b      	ldrb	r3, [r7, #9]
 80015a0:	021b      	lsls	r3, r3, #8
 80015a2:	b21a      	sxth	r2, r3
 80015a4:	7a3b      	ldrb	r3, [r7, #8]
 80015a6:	b21b      	sxth	r3, r3
 80015a8:	4313      	orrs	r3, r2
 80015aa:	b21a      	sxth	r2, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	841a      	strh	r2, [r3, #32]
    bme->calibData.dig_H3 = humidData[2];
 80015b0:	7aba      	ldrb	r2, [r7, #10]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

    bme->calibData.dig_H4 = (humidData[3] << 4) | (humidData[4] & 0x0F);
 80015b8:	7afb      	ldrb	r3, [r7, #11]
 80015ba:	011b      	lsls	r3, r3, #4
 80015bc:	b21a      	sxth	r2, r3
 80015be:	7b3b      	ldrb	r3, [r7, #12]
 80015c0:	b21b      	sxth	r3, r3
 80015c2:	f003 030f 	and.w	r3, r3, #15
 80015c6:	b21b      	sxth	r3, r3
 80015c8:	4313      	orrs	r3, r2
 80015ca:	b21a      	sxth	r2, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	849a      	strh	r2, [r3, #36]	; 0x24
    bme->calibData.dig_H5 = (humidData[5] << 4) | (humidData[4] >> 4);
 80015d0:	7b7b      	ldrb	r3, [r7, #13]
 80015d2:	011b      	lsls	r3, r3, #4
 80015d4:	b21a      	sxth	r2, r3
 80015d6:	7b3b      	ldrb	r3, [r7, #12]
 80015d8:	091b      	lsrs	r3, r3, #4
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	b21b      	sxth	r3, r3
 80015de:	4313      	orrs	r3, r2
 80015e0:	b21a      	sxth	r2, r3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	84da      	strh	r2, [r3, #38]	; 0x26
    bme->calibData.dig_H6 = humidData[6];
 80015e6:	7bbb      	ldrb	r3, [r7, #14]
 80015e8:	b25a      	sxtb	r2, r3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 80015f0:	bf00      	nop
 80015f2:	3728      	adds	r7, #40	; 0x28
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}

080015f8 <BME280_SetMode>:

void BME280_SetMode(BME280_HandleTypeDef *bme, uint8_t mode) {
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	460b      	mov	r3, r1
 8001602:	70fb      	strb	r3, [r7, #3]
    uint8_t ctrlMeas = BME280_ReadRegister(bme, BME280_REG_CTRL_MEAS);
 8001604:	21f4      	movs	r1, #244	; 0xf4
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f7ff fee3 	bl	80013d2 <BME280_ReadRegister>
 800160c:	4603      	mov	r3, r0
 800160e:	73fb      	strb	r3, [r7, #15]
    ctrlMeas = (ctrlMeas & 0xFC) | (mode & 0x03);
 8001610:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001614:	f023 0303 	bic.w	r3, r3, #3
 8001618:	b25a      	sxtb	r2, r3
 800161a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800161e:	f003 0303 	and.w	r3, r3, #3
 8001622:	b25b      	sxtb	r3, r3
 8001624:	4313      	orrs	r3, r2
 8001626:	b25b      	sxtb	r3, r3
 8001628:	73fb      	strb	r3, [r7, #15]
    BME280_WriteRegister(bme, BME280_REG_CTRL_MEAS, ctrlMeas);
 800162a:	7bfb      	ldrb	r3, [r7, #15]
 800162c:	461a      	mov	r2, r3
 800162e:	21f4      	movs	r1, #244	; 0xf4
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	f7ff fef0 	bl	8001416 <BME280_WriteRegister>
}
 8001636:	bf00      	nop
 8001638:	3710      	adds	r7, #16
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <BME280_SetOversamplingTemperature>:

void BME280_SetOversamplingTemperature(BME280_HandleTypeDef *bme, uint8_t oversampling) {
 800163e:	b580      	push	{r7, lr}
 8001640:	b084      	sub	sp, #16
 8001642:	af00      	add	r7, sp, #0
 8001644:	6078      	str	r0, [r7, #4]
 8001646:	460b      	mov	r3, r1
 8001648:	70fb      	strb	r3, [r7, #3]
    uint8_t ctrlMeas = BME280_ReadRegister(bme, BME280_REG_CTRL_MEAS);
 800164a:	21f4      	movs	r1, #244	; 0xf4
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f7ff fec0 	bl	80013d2 <BME280_ReadRegister>
 8001652:	4603      	mov	r3, r0
 8001654:	73fb      	strb	r3, [r7, #15]
    ctrlMeas = (ctrlMeas & 0x1F) | ((oversampling & 0x07) << 5);
 8001656:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800165a:	f003 031f 	and.w	r3, r3, #31
 800165e:	b25a      	sxtb	r2, r3
 8001660:	78fb      	ldrb	r3, [r7, #3]
 8001662:	015b      	lsls	r3, r3, #5
 8001664:	b25b      	sxtb	r3, r3
 8001666:	4313      	orrs	r3, r2
 8001668:	b25b      	sxtb	r3, r3
 800166a:	73fb      	strb	r3, [r7, #15]
    BME280_WriteRegister(bme, BME280_REG_CTRL_MEAS, ctrlMeas);
 800166c:	7bfb      	ldrb	r3, [r7, #15]
 800166e:	461a      	mov	r2, r3
 8001670:	21f4      	movs	r1, #244	; 0xf4
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f7ff fecf 	bl	8001416 <BME280_WriteRegister>
}
 8001678:	bf00      	nop
 800167a:	3710      	adds	r7, #16
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}

08001680 <BME280_SetOversamplingPressure>:

void BME280_SetOversamplingPressure(BME280_HandleTypeDef *bme, uint8_t oversampling) {
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	460b      	mov	r3, r1
 800168a:	70fb      	strb	r3, [r7, #3]
    uint8_t ctrlMeas = BME280_ReadRegister(bme, BME280_REG_CTRL_MEAS);
 800168c:	21f4      	movs	r1, #244	; 0xf4
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f7ff fe9f 	bl	80013d2 <BME280_ReadRegister>
 8001694:	4603      	mov	r3, r0
 8001696:	73fb      	strb	r3, [r7, #15]
    ctrlMeas = (ctrlMeas & 0xE3) | ((oversampling & 0x07) << 2);
 8001698:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800169c:	f023 031c 	bic.w	r3, r3, #28
 80016a0:	b25a      	sxtb	r2, r3
 80016a2:	78fb      	ldrb	r3, [r7, #3]
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	b25b      	sxtb	r3, r3
 80016a8:	f003 031c 	and.w	r3, r3, #28
 80016ac:	b25b      	sxtb	r3, r3
 80016ae:	4313      	orrs	r3, r2
 80016b0:	b25b      	sxtb	r3, r3
 80016b2:	73fb      	strb	r3, [r7, #15]
    BME280_WriteRegister(bme, BME280_REG_CTRL_MEAS, ctrlMeas);
 80016b4:	7bfb      	ldrb	r3, [r7, #15]
 80016b6:	461a      	mov	r2, r3
 80016b8:	21f4      	movs	r1, #244	; 0xf4
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f7ff feab 	bl	8001416 <BME280_WriteRegister>
}
 80016c0:	bf00      	nop
 80016c2:	3710      	adds	r7, #16
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <BME280_SetOversamplingHumidity>:

void BME280_SetOversamplingHumidity(BME280_HandleTypeDef *bme, uint8_t oversampling) {
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	460b      	mov	r3, r1
 80016d2:	70fb      	strb	r3, [r7, #3]
    BME280_WriteRegister(bme, BME280_REG_CTRL_HUM, oversampling & 0x07);
 80016d4:	78fb      	ldrb	r3, [r7, #3]
 80016d6:	f003 0307 	and.w	r3, r3, #7
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	461a      	mov	r2, r3
 80016de:	21f2      	movs	r1, #242	; 0xf2
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	f7ff fe98 	bl	8001416 <BME280_WriteRegister>
    // Changes to ctrl_hum only become effective after a write to ctrl_meas
    uint8_t ctrlMeas = BME280_ReadRegister(bme, BME280_REG_CTRL_MEAS);
 80016e6:	21f4      	movs	r1, #244	; 0xf4
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f7ff fe72 	bl	80013d2 <BME280_ReadRegister>
 80016ee:	4603      	mov	r3, r0
 80016f0:	73fb      	strb	r3, [r7, #15]
    BME280_WriteRegister(bme, BME280_REG_CTRL_MEAS, ctrlMeas);
 80016f2:	7bfb      	ldrb	r3, [r7, #15]
 80016f4:	461a      	mov	r2, r3
 80016f6:	21f4      	movs	r1, #244	; 0xf4
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f7ff fe8c 	bl	8001416 <BME280_WriteRegister>
}
 80016fe:	bf00      	nop
 8001700:	3710      	adds	r7, #16
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}

08001706 <BME280_SetFilter>:

void BME280_SetFilter(BME280_HandleTypeDef *bme, uint8_t filter) {
 8001706:	b580      	push	{r7, lr}
 8001708:	b084      	sub	sp, #16
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
 800170e:	460b      	mov	r3, r1
 8001710:	70fb      	strb	r3, [r7, #3]
    uint8_t config = BME280_ReadRegister(bme, BME280_REG_CONFIG);
 8001712:	21f5      	movs	r1, #245	; 0xf5
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f7ff fe5c 	bl	80013d2 <BME280_ReadRegister>
 800171a:	4603      	mov	r3, r0
 800171c:	73fb      	strb	r3, [r7, #15]
    config = (config & 0xE3) | ((filter & 0x07) << 2);
 800171e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001722:	f023 031c 	bic.w	r3, r3, #28
 8001726:	b25a      	sxtb	r2, r3
 8001728:	78fb      	ldrb	r3, [r7, #3]
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	b25b      	sxtb	r3, r3
 800172e:	f003 031c 	and.w	r3, r3, #28
 8001732:	b25b      	sxtb	r3, r3
 8001734:	4313      	orrs	r3, r2
 8001736:	b25b      	sxtb	r3, r3
 8001738:	73fb      	strb	r3, [r7, #15]
    BME280_WriteRegister(bme, BME280_REG_CONFIG, config);
 800173a:	7bfb      	ldrb	r3, [r7, #15]
 800173c:	461a      	mov	r2, r3
 800173e:	21f5      	movs	r1, #245	; 0xf5
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f7ff fe68 	bl	8001416 <BME280_WriteRegister>
}
 8001746:	bf00      	nop
 8001748:	3710      	adds	r7, #16
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}

0800174e <BME280_SetStandbyTime>:

void BME280_SetStandbyTime(BME280_HandleTypeDef *bme, uint8_t standby) {
 800174e:	b580      	push	{r7, lr}
 8001750:	b084      	sub	sp, #16
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]
 8001756:	460b      	mov	r3, r1
 8001758:	70fb      	strb	r3, [r7, #3]
    uint8_t config = BME280_ReadRegister(bme, BME280_REG_CONFIG);
 800175a:	21f5      	movs	r1, #245	; 0xf5
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	f7ff fe38 	bl	80013d2 <BME280_ReadRegister>
 8001762:	4603      	mov	r3, r0
 8001764:	73fb      	strb	r3, [r7, #15]
    config = (config & 0x1F) | ((standby & 0x07) << 5);
 8001766:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800176a:	f003 031f 	and.w	r3, r3, #31
 800176e:	b25a      	sxtb	r2, r3
 8001770:	78fb      	ldrb	r3, [r7, #3]
 8001772:	015b      	lsls	r3, r3, #5
 8001774:	b25b      	sxtb	r3, r3
 8001776:	4313      	orrs	r3, r2
 8001778:	b25b      	sxtb	r3, r3
 800177a:	73fb      	strb	r3, [r7, #15]
    BME280_WriteRegister(bme, BME280_REG_CONFIG, config);
 800177c:	7bfb      	ldrb	r3, [r7, #15]
 800177e:	461a      	mov	r2, r3
 8001780:	21f5      	movs	r1, #245	; 0xf5
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f7ff fe47 	bl	8001416 <BME280_WriteRegister>
}
 8001788:	bf00      	nop
 800178a:	3710      	adds	r7, #16
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}

08001790 <BME280_ReadTemperatureRaw>:
bool BME280_IsMeasuring(BME280_HandleTypeDef *bme) {
    uint8_t status = BME280_ReadRegister(bme, BME280_REG_STATUS);
    return (status & 0x08) != 0;
}

int32_t BME280_ReadTemperatureRaw(BME280_HandleTypeDef *bme) {
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
    uint8_t msb = BME280_ReadRegister(bme, BME280_REG_TEMP_MSB);
 8001798:	21fa      	movs	r1, #250	; 0xfa
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f7ff fe19 	bl	80013d2 <BME280_ReadRegister>
 80017a0:	4603      	mov	r3, r0
 80017a2:	73fb      	strb	r3, [r7, #15]
    uint8_t lsb = BME280_ReadRegister(bme, BME280_REG_TEMP_LSB);
 80017a4:	21fb      	movs	r1, #251	; 0xfb
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f7ff fe13 	bl	80013d2 <BME280_ReadRegister>
 80017ac:	4603      	mov	r3, r0
 80017ae:	73bb      	strb	r3, [r7, #14]
    uint8_t xlsb = BME280_ReadRegister(bme, BME280_REG_TEMP_XLSB);
 80017b0:	21fc      	movs	r1, #252	; 0xfc
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f7ff fe0d 	bl	80013d2 <BME280_ReadRegister>
 80017b8:	4603      	mov	r3, r0
 80017ba:	737b      	strb	r3, [r7, #13]

    return ((uint32_t)msb << 12) | ((uint32_t)lsb << 4) | ((xlsb >> 4) & 0x0F);
 80017bc:	7bfb      	ldrb	r3, [r7, #15]
 80017be:	031a      	lsls	r2, r3, #12
 80017c0:	7bbb      	ldrb	r3, [r7, #14]
 80017c2:	011b      	lsls	r3, r3, #4
 80017c4:	431a      	orrs	r2, r3
 80017c6:	7b7b      	ldrb	r3, [r7, #13]
 80017c8:	091b      	lsrs	r3, r3, #4
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	f003 030f 	and.w	r3, r3, #15
 80017d0:	4313      	orrs	r3, r2
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3710      	adds	r7, #16
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}

080017da <BME280_ReadPressureRaw>:

int32_t BME280_ReadPressureRaw(BME280_HandleTypeDef *bme) {
 80017da:	b580      	push	{r7, lr}
 80017dc:	b084      	sub	sp, #16
 80017de:	af00      	add	r7, sp, #0
 80017e0:	6078      	str	r0, [r7, #4]
    uint8_t msb = BME280_ReadRegister(bme, BME280_REG_PRESS_MSB);
 80017e2:	21f7      	movs	r1, #247	; 0xf7
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f7ff fdf4 	bl	80013d2 <BME280_ReadRegister>
 80017ea:	4603      	mov	r3, r0
 80017ec:	73fb      	strb	r3, [r7, #15]
    uint8_t lsb = BME280_ReadRegister(bme, BME280_REG_PRESS_LSB);
 80017ee:	21f8      	movs	r1, #248	; 0xf8
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f7ff fdee 	bl	80013d2 <BME280_ReadRegister>
 80017f6:	4603      	mov	r3, r0
 80017f8:	73bb      	strb	r3, [r7, #14]
    uint8_t xlsb = BME280_ReadRegister(bme, BME280_REG_PRESS_XLSB);
 80017fa:	21f9      	movs	r1, #249	; 0xf9
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f7ff fde8 	bl	80013d2 <BME280_ReadRegister>
 8001802:	4603      	mov	r3, r0
 8001804:	737b      	strb	r3, [r7, #13]

    return ((uint32_t)msb << 12) | ((uint32_t)lsb << 4) | ((xlsb >> 4) & 0x0F);
 8001806:	7bfb      	ldrb	r3, [r7, #15]
 8001808:	031a      	lsls	r2, r3, #12
 800180a:	7bbb      	ldrb	r3, [r7, #14]
 800180c:	011b      	lsls	r3, r3, #4
 800180e:	431a      	orrs	r2, r3
 8001810:	7b7b      	ldrb	r3, [r7, #13]
 8001812:	091b      	lsrs	r3, r3, #4
 8001814:	b2db      	uxtb	r3, r3
 8001816:	f003 030f 	and.w	r3, r3, #15
 800181a:	4313      	orrs	r3, r2
}
 800181c:	4618      	mov	r0, r3
 800181e:	3710      	adds	r7, #16
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}

08001824 <BME280_ReadHumidityRaw>:

int32_t BME280_ReadHumidityRaw(BME280_HandleTypeDef *bme) {
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
    uint8_t msb = BME280_ReadRegister(bme, BME280_REG_HUM_MSB);
 800182c:	21fd      	movs	r1, #253	; 0xfd
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f7ff fdcf 	bl	80013d2 <BME280_ReadRegister>
 8001834:	4603      	mov	r3, r0
 8001836:	73fb      	strb	r3, [r7, #15]
    uint8_t lsb = BME280_ReadRegister(bme, BME280_REG_HUM_LSB);
 8001838:	21fe      	movs	r1, #254	; 0xfe
 800183a:	6878      	ldr	r0, [r7, #4]
 800183c:	f7ff fdc9 	bl	80013d2 <BME280_ReadRegister>
 8001840:	4603      	mov	r3, r0
 8001842:	73bb      	strb	r3, [r7, #14]

    return ((uint32_t)msb << 8) | lsb;
 8001844:	7bfb      	ldrb	r3, [r7, #15]
 8001846:	021a      	lsls	r2, r3, #8
 8001848:	7bbb      	ldrb	r3, [r7, #14]
 800184a:	4313      	orrs	r3, r2
}
 800184c:	4618      	mov	r0, r3
 800184e:	3710      	adds	r7, #16
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}

08001854 <BME280_ReadTemperature>:

float BME280_ReadTemperature(BME280_HandleTypeDef *bme) {
 8001854:	b580      	push	{r7, lr}
 8001856:	b086      	sub	sp, #24
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
    int32_t adc_T = BME280_ReadTemperatureRaw(bme);
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f7ff ff97 	bl	8001790 <BME280_ReadTemperatureRaw>
 8001862:	6178      	str	r0, [r7, #20]

    // Temperature compensation formula from datasheet
    int32_t var1 = ((((adc_T >> 3) - ((int32_t)bme->calibData.dig_T1 << 1))) *
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	10da      	asrs	r2, r3, #3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	88db      	ldrh	r3, [r3, #6]
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	1ad3      	subs	r3, r2, r3
                    ((int32_t)bme->calibData.dig_T2)) >> 11;
 8001870:	687a      	ldr	r2, [r7, #4]
 8001872:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
    int32_t var1 = ((((adc_T >> 3) - ((int32_t)bme->calibData.dig_T1 << 1))) *
 8001876:	fb02 f303 	mul.w	r3, r2, r3
 800187a:	12db      	asrs	r3, r3, #11
 800187c:	613b      	str	r3, [r7, #16]

    int32_t var2 = (((((adc_T >> 4) - ((int32_t)bme->calibData.dig_T1)) *
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	111b      	asrs	r3, r3, #4
 8001882:	687a      	ldr	r2, [r7, #4]
 8001884:	88d2      	ldrh	r2, [r2, #6]
 8001886:	1a9b      	subs	r3, r3, r2
                      ((adc_T >> 4) - ((int32_t)bme->calibData.dig_T1))) >> 12) *
 8001888:	697a      	ldr	r2, [r7, #20]
 800188a:	1112      	asrs	r2, r2, #4
 800188c:	6879      	ldr	r1, [r7, #4]
 800188e:	88c9      	ldrh	r1, [r1, #6]
 8001890:	1a52      	subs	r2, r2, r1
    int32_t var2 = (((((adc_T >> 4) - ((int32_t)bme->calibData.dig_T1)) *
 8001892:	fb02 f303 	mul.w	r3, r2, r3
                      ((adc_T >> 4) - ((int32_t)bme->calibData.dig_T1))) >> 12) *
 8001896:	131b      	asrs	r3, r3, #12
                    ((int32_t)bme->calibData.dig_T3)) >> 14;
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
                      ((adc_T >> 4) - ((int32_t)bme->calibData.dig_T1))) >> 12) *
 800189e:	fb02 f303 	mul.w	r3, r2, r3
    int32_t var2 = (((((adc_T >> 4) - ((int32_t)bme->calibData.dig_T1)) *
 80018a2:	139b      	asrs	r3, r3, #14
 80018a4:	60fb      	str	r3, [r7, #12]

    bme->t_fine = var1 + var2;
 80018a6:	693a      	ldr	r2, [r7, #16]
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	441a      	add	r2, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	62da      	str	r2, [r3, #44]	; 0x2c

    float temperature = (bme->t_fine * 5 + 128) >> 8;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018b4:	4613      	mov	r3, r2
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	4413      	add	r3, r2
 80018ba:	3380      	adds	r3, #128	; 0x80
 80018bc:	121b      	asrs	r3, r3, #8
 80018be:	ee07 3a90 	vmov	s15, r3
 80018c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018c6:	edc7 7a02 	vstr	s15, [r7, #8]
    return temperature / 100.0f;
 80018ca:	edd7 7a02 	vldr	s15, [r7, #8]
 80018ce:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80018e4 <BME280_ReadTemperature+0x90>
 80018d2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80018d6:	eef0 7a66 	vmov.f32	s15, s13
}
 80018da:	eeb0 0a67 	vmov.f32	s0, s15
 80018de:	3718      	adds	r7, #24
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	42c80000 	.word	0x42c80000

080018e8 <BME280_ReadPressure>:

float BME280_ReadPressure(BME280_HandleTypeDef *bme) {
 80018e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018ec:	b0cc      	sub	sp, #304	; 0x130
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
    // Read temperature first to get t_fine
    BME280_ReadTemperature(bme);
 80018f4:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 80018f8:	f7ff ffac 	bl	8001854 <BME280_ReadTemperature>

    int32_t adc_P = BME280_ReadPressureRaw(bme);
 80018fc:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8001900:	f7ff ff6b 	bl	80017da <BME280_ReadPressureRaw>
 8001904:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c

    // Pressure compensation formula from datasheet
    int64_t var1 = ((int64_t)bme->t_fine) - 128000;
 8001908:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800190c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800190e:	17da      	asrs	r2, r3, #31
 8001910:	4698      	mov	r8, r3
 8001912:	4691      	mov	r9, r2
 8001914:	f5b8 3afa 	subs.w	sl, r8, #128000	; 0x1f400
 8001918:	f149 3bff 	adc.w	fp, r9, #4294967295
 800191c:	e9c7 ab48 	strd	sl, fp, [r7, #288]	; 0x120
    int64_t var2 = var1 * var1 * (int64_t)bme->calibData.dig_P6;
 8001920:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001924:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001928:	fb03 f102 	mul.w	r1, r3, r2
 800192c:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001930:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001934:	fb02 f303 	mul.w	r3, r2, r3
 8001938:	18ca      	adds	r2, r1, r3
 800193a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800193e:	fba3 4503 	umull	r4, r5, r3, r3
 8001942:	1953      	adds	r3, r2, r5
 8001944:	461d      	mov	r5, r3
 8001946:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800194a:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800194e:	b21b      	sxth	r3, r3
 8001950:	17da      	asrs	r2, r3, #31
 8001952:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001956:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800195a:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800195e:	4603      	mov	r3, r0
 8001960:	fb03 f205 	mul.w	r2, r3, r5
 8001964:	460b      	mov	r3, r1
 8001966:	fb04 f303 	mul.w	r3, r4, r3
 800196a:	4413      	add	r3, r2
 800196c:	4602      	mov	r2, r0
 800196e:	fba4 1202 	umull	r1, r2, r4, r2
 8001972:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001976:	460a      	mov	r2, r1
 8001978:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 800197c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001980:	4413      	add	r3, r2
 8001982:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001986:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 800198a:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 800198e:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
    var2 = var2 + ((var1 * (int64_t)bme->calibData.dig_P5) << 17);
 8001992:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001996:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800199a:	b21b      	sxth	r3, r3
 800199c:	17da      	asrs	r2, r3, #31
 800199e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80019a2:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80019a6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80019aa:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 80019ae:	462a      	mov	r2, r5
 80019b0:	fb02 f203 	mul.w	r2, r2, r3
 80019b4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80019b8:	4621      	mov	r1, r4
 80019ba:	fb01 f303 	mul.w	r3, r1, r3
 80019be:	441a      	add	r2, r3
 80019c0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80019c4:	4621      	mov	r1, r4
 80019c6:	fba3 1301 	umull	r1, r3, r3, r1
 80019ca:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80019ce:	460b      	mov	r3, r1
 80019d0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80019d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80019d8:	18d3      	adds	r3, r2, r3
 80019da:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80019de:	f04f 0000 	mov.w	r0, #0
 80019e2:	f04f 0100 	mov.w	r1, #0
 80019e6:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 80019ea:	462b      	mov	r3, r5
 80019ec:	0459      	lsls	r1, r3, #17
 80019ee:	4623      	mov	r3, r4
 80019f0:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 80019f4:	4623      	mov	r3, r4
 80019f6:	0458      	lsls	r0, r3, #17
 80019f8:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80019fc:	1814      	adds	r4, r2, r0
 80019fe:	643c      	str	r4, [r7, #64]	; 0x40
 8001a00:	414b      	adcs	r3, r1
 8001a02:	647b      	str	r3, [r7, #68]	; 0x44
 8001a04:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001a08:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
    var2 = var2 + (((int64_t)bme->calibData.dig_P4) << 35);
 8001a0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001a10:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001a14:	b21b      	sxth	r3, r3
 8001a16:	17da      	asrs	r2, r3, #31
 8001a18:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001a1c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001a20:	f04f 0000 	mov.w	r0, #0
 8001a24:	f04f 0100 	mov.w	r1, #0
 8001a28:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a2c:	00d9      	lsls	r1, r3, #3
 8001a2e:	2000      	movs	r0, #0
 8001a30:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001a34:	1814      	adds	r4, r2, r0
 8001a36:	63bc      	str	r4, [r7, #56]	; 0x38
 8001a38:	414b      	adcs	r3, r1
 8001a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a3c:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8001a40:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
    var1 = ((var1 * var1 * (int64_t)bme->calibData.dig_P3) >> 8) +
 8001a44:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001a48:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001a4c:	fb03 f102 	mul.w	r1, r3, r2
 8001a50:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001a54:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001a58:	fb02 f303 	mul.w	r3, r2, r3
 8001a5c:	18ca      	adds	r2, r1, r3
 8001a5e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001a62:	fba3 1303 	umull	r1, r3, r3, r3
 8001a66:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001a6a:	460b      	mov	r3, r1
 8001a6c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8001a70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001a74:	18d3      	adds	r3, r2, r3
 8001a76:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001a7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001a7e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001a82:	b21b      	sxth	r3, r3
 8001a84:	17da      	asrs	r2, r3, #31
 8001a86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001a8a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001a8e:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 8001a92:	462b      	mov	r3, r5
 8001a94:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001a98:	4642      	mov	r2, r8
 8001a9a:	fb02 f203 	mul.w	r2, r2, r3
 8001a9e:	464b      	mov	r3, r9
 8001aa0:	4621      	mov	r1, r4
 8001aa2:	fb01 f303 	mul.w	r3, r1, r3
 8001aa6:	4413      	add	r3, r2
 8001aa8:	4622      	mov	r2, r4
 8001aaa:	4641      	mov	r1, r8
 8001aac:	fba2 1201 	umull	r1, r2, r2, r1
 8001ab0:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8001ab4:	460a      	mov	r2, r1
 8001ab6:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8001aba:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8001abe:	4413      	add	r3, r2
 8001ac0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001ac4:	f04f 0000 	mov.w	r0, #0
 8001ac8:	f04f 0100 	mov.w	r1, #0
 8001acc:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8001ad0:	4623      	mov	r3, r4
 8001ad2:	0a18      	lsrs	r0, r3, #8
 8001ad4:	462b      	mov	r3, r5
 8001ad6:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001ada:	462b      	mov	r3, r5
 8001adc:	1219      	asrs	r1, r3, #8
           ((var1 * (int64_t)bme->calibData.dig_P2) << 12);
 8001ade:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001ae2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001ae6:	b21b      	sxth	r3, r3
 8001ae8:	17da      	asrs	r2, r3, #31
 8001aea:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001aee:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001af2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001af6:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 8001afa:	464a      	mov	r2, r9
 8001afc:	fb02 f203 	mul.w	r2, r2, r3
 8001b00:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001b04:	4644      	mov	r4, r8
 8001b06:	fb04 f303 	mul.w	r3, r4, r3
 8001b0a:	441a      	add	r2, r3
 8001b0c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001b10:	4644      	mov	r4, r8
 8001b12:	fba3 4304 	umull	r4, r3, r3, r4
 8001b16:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001b1a:	4623      	mov	r3, r4
 8001b1c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001b20:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001b24:	18d3      	adds	r3, r2, r3
 8001b26:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001b2a:	f04f 0200 	mov.w	r2, #0
 8001b2e:	f04f 0300 	mov.w	r3, #0
 8001b32:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8001b36:	464c      	mov	r4, r9
 8001b38:	0323      	lsls	r3, r4, #12
 8001b3a:	4644      	mov	r4, r8
 8001b3c:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001b40:	4644      	mov	r4, r8
 8001b42:	0322      	lsls	r2, r4, #12
    var1 = ((var1 * var1 * (int64_t)bme->calibData.dig_P3) >> 8) +
 8001b44:	1884      	adds	r4, r0, r2
 8001b46:	633c      	str	r4, [r7, #48]	; 0x30
 8001b48:	eb41 0303 	adc.w	r3, r1, r3
 8001b4c:	637b      	str	r3, [r7, #52]	; 0x34
 8001b4e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8001b52:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
    var1 = (((((int64_t)1) << 47) + var1)) * ((int64_t)bme->calibData.dig_P1) >> 33;
 8001b56:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001b5a:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 8001b5e:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8001b62:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001b66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001b6a:	899b      	ldrh	r3, [r3, #12]
 8001b6c:	b29b      	uxth	r3, r3
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001b74:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001b78:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001b7c:	462b      	mov	r3, r5
 8001b7e:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8001b82:	4642      	mov	r2, r8
 8001b84:	fb02 f203 	mul.w	r2, r2, r3
 8001b88:	464b      	mov	r3, r9
 8001b8a:	4621      	mov	r1, r4
 8001b8c:	fb01 f303 	mul.w	r3, r1, r3
 8001b90:	4413      	add	r3, r2
 8001b92:	4622      	mov	r2, r4
 8001b94:	4641      	mov	r1, r8
 8001b96:	fba2 1201 	umull	r1, r2, r2, r1
 8001b9a:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8001b9e:	460a      	mov	r2, r1
 8001ba0:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8001ba4:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8001ba8:	4413      	add	r3, r2
 8001baa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001bae:	f04f 0200 	mov.w	r2, #0
 8001bb2:	f04f 0300 	mov.w	r3, #0
 8001bb6:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8001bba:	4629      	mov	r1, r5
 8001bbc:	104a      	asrs	r2, r1, #1
 8001bbe:	4629      	mov	r1, r5
 8001bc0:	17cb      	asrs	r3, r1, #31
 8001bc2:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120

    if (var1 == 0) {
 8001bc6:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	d102      	bne.n	8001bd4 <BME280_ReadPressure+0x2ec>
        return 0; // Avoid division by zero
 8001bce:	eddf 7aad 	vldr	s15, [pc, #692]	; 8001e84 <BME280_ReadPressure+0x59c>
 8001bd2:	e150      	b.n	8001e76 <BME280_ReadPressure+0x58e>
    }

    int64_t pressure = 1048576 - adc_P;
 8001bd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001bd8:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001bdc:	17da      	asrs	r2, r3, #31
 8001bde:	62bb      	str	r3, [r7, #40]	; 0x28
 8001be0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001be2:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001be6:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
    pressure = (((pressure << 31) - var2) * 3125) / var1;
 8001bea:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001bee:	105b      	asrs	r3, r3, #1
 8001bf0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001bf4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001bf8:	07db      	lsls	r3, r3, #31
 8001bfa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001bfe:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001c02:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8001c06:	4621      	mov	r1, r4
 8001c08:	1a89      	subs	r1, r1, r2
 8001c0a:	67b9      	str	r1, [r7, #120]	; 0x78
 8001c0c:	4629      	mov	r1, r5
 8001c0e:	eb61 0303 	sbc.w	r3, r1, r3
 8001c12:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001c14:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001c18:	4622      	mov	r2, r4
 8001c1a:	462b      	mov	r3, r5
 8001c1c:	1891      	adds	r1, r2, r2
 8001c1e:	6239      	str	r1, [r7, #32]
 8001c20:	415b      	adcs	r3, r3
 8001c22:	627b      	str	r3, [r7, #36]	; 0x24
 8001c24:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001c28:	4621      	mov	r1, r4
 8001c2a:	1851      	adds	r1, r2, r1
 8001c2c:	61b9      	str	r1, [r7, #24]
 8001c2e:	4629      	mov	r1, r5
 8001c30:	414b      	adcs	r3, r1
 8001c32:	61fb      	str	r3, [r7, #28]
 8001c34:	f04f 0200 	mov.w	r2, #0
 8001c38:	f04f 0300 	mov.w	r3, #0
 8001c3c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001c40:	4649      	mov	r1, r9
 8001c42:	018b      	lsls	r3, r1, #6
 8001c44:	4641      	mov	r1, r8
 8001c46:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c4a:	4641      	mov	r1, r8
 8001c4c:	018a      	lsls	r2, r1, #6
 8001c4e:	4641      	mov	r1, r8
 8001c50:	1889      	adds	r1, r1, r2
 8001c52:	6139      	str	r1, [r7, #16]
 8001c54:	4649      	mov	r1, r9
 8001c56:	eb43 0101 	adc.w	r1, r3, r1
 8001c5a:	6179      	str	r1, [r7, #20]
 8001c5c:	f04f 0200 	mov.w	r2, #0
 8001c60:	f04f 0300 	mov.w	r3, #0
 8001c64:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001c68:	4649      	mov	r1, r9
 8001c6a:	008b      	lsls	r3, r1, #2
 8001c6c:	4641      	mov	r1, r8
 8001c6e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001c72:	4641      	mov	r1, r8
 8001c74:	008a      	lsls	r2, r1, #2
 8001c76:	4610      	mov	r0, r2
 8001c78:	4619      	mov	r1, r3
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	4622      	mov	r2, r4
 8001c7e:	189b      	adds	r3, r3, r2
 8001c80:	60bb      	str	r3, [r7, #8]
 8001c82:	460b      	mov	r3, r1
 8001c84:	462a      	mov	r2, r5
 8001c86:	eb42 0303 	adc.w	r3, r2, r3
 8001c8a:	60fb      	str	r3, [r7, #12]
 8001c8c:	f04f 0200 	mov.w	r2, #0
 8001c90:	f04f 0300 	mov.w	r3, #0
 8001c94:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001c98:	4649      	mov	r1, r9
 8001c9a:	008b      	lsls	r3, r1, #2
 8001c9c:	4641      	mov	r1, r8
 8001c9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001ca2:	4641      	mov	r1, r8
 8001ca4:	008a      	lsls	r2, r1, #2
 8001ca6:	4610      	mov	r0, r2
 8001ca8:	4619      	mov	r1, r3
 8001caa:	4603      	mov	r3, r0
 8001cac:	4622      	mov	r2, r4
 8001cae:	189b      	adds	r3, r3, r2
 8001cb0:	673b      	str	r3, [r7, #112]	; 0x70
 8001cb2:	462b      	mov	r3, r5
 8001cb4:	460a      	mov	r2, r1
 8001cb6:	eb42 0303 	adc.w	r3, r2, r3
 8001cba:	677b      	str	r3, [r7, #116]	; 0x74
 8001cbc:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001cc0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001cc4:	f7ff f8f6 	bl	8000eb4 <__aeabi_ldivmod>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	460b      	mov	r3, r1
 8001ccc:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
    var1 = (((int64_t)bme->calibData.dig_P9) * (pressure >> 13) * (pressure >> 13)) >> 25;
 8001cd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001cd4:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8001cd8:	b21b      	sxth	r3, r3
 8001cda:	17da      	asrs	r2, r3, #31
 8001cdc:	66bb      	str	r3, [r7, #104]	; 0x68
 8001cde:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001ce0:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001ce4:	f04f 0000 	mov.w	r0, #0
 8001ce8:	f04f 0100 	mov.w	r1, #0
 8001cec:	0b50      	lsrs	r0, r2, #13
 8001cee:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001cf2:	1359      	asrs	r1, r3, #13
 8001cf4:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8001cf8:	462b      	mov	r3, r5
 8001cfa:	fb00 f203 	mul.w	r2, r0, r3
 8001cfe:	4623      	mov	r3, r4
 8001d00:	fb03 f301 	mul.w	r3, r3, r1
 8001d04:	4413      	add	r3, r2
 8001d06:	4622      	mov	r2, r4
 8001d08:	fba2 1200 	umull	r1, r2, r2, r0
 8001d0c:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001d10:	460a      	mov	r2, r1
 8001d12:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8001d16:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001d1a:	4413      	add	r3, r2
 8001d1c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001d20:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001d24:	f04f 0000 	mov.w	r0, #0
 8001d28:	f04f 0100 	mov.w	r1, #0
 8001d2c:	0b50      	lsrs	r0, r2, #13
 8001d2e:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001d32:	1359      	asrs	r1, r3, #13
 8001d34:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8001d38:	462b      	mov	r3, r5
 8001d3a:	fb00 f203 	mul.w	r2, r0, r3
 8001d3e:	4623      	mov	r3, r4
 8001d40:	fb03 f301 	mul.w	r3, r3, r1
 8001d44:	4413      	add	r3, r2
 8001d46:	4622      	mov	r2, r4
 8001d48:	fba2 1200 	umull	r1, r2, r2, r0
 8001d4c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001d50:	460a      	mov	r2, r1
 8001d52:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8001d56:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001d5a:	4413      	add	r3, r2
 8001d5c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001d60:	f04f 0200 	mov.w	r2, #0
 8001d64:	f04f 0300 	mov.w	r3, #0
 8001d68:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8001d6c:	4621      	mov	r1, r4
 8001d6e:	0e4a      	lsrs	r2, r1, #25
 8001d70:	4629      	mov	r1, r5
 8001d72:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001d76:	4629      	mov	r1, r5
 8001d78:	164b      	asrs	r3, r1, #25
 8001d7a:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
    var2 = (((int64_t)bme->calibData.dig_P8) * pressure) >> 19;
 8001d7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001d82:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8001d86:	b21b      	sxth	r3, r3
 8001d88:	17da      	asrs	r2, r3, #31
 8001d8a:	663b      	str	r3, [r7, #96]	; 0x60
 8001d8c:	667a      	str	r2, [r7, #100]	; 0x64
 8001d8e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001d92:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001d96:	462a      	mov	r2, r5
 8001d98:	fb02 f203 	mul.w	r2, r2, r3
 8001d9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001da0:	4621      	mov	r1, r4
 8001da2:	fb01 f303 	mul.w	r3, r1, r3
 8001da6:	4413      	add	r3, r2
 8001da8:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001dac:	4621      	mov	r1, r4
 8001dae:	fba2 1201 	umull	r1, r2, r2, r1
 8001db2:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8001db6:	460a      	mov	r2, r1
 8001db8:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8001dbc:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001dc0:	4413      	add	r3, r2
 8001dc2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001dc6:	f04f 0200 	mov.w	r2, #0
 8001dca:	f04f 0300 	mov.w	r3, #0
 8001dce:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8001dd2:	4621      	mov	r1, r4
 8001dd4:	0cca      	lsrs	r2, r1, #19
 8001dd6:	4629      	mov	r1, r5
 8001dd8:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001ddc:	4629      	mov	r1, r5
 8001dde:	14cb      	asrs	r3, r1, #19
 8001de0:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118

    pressure = ((pressure + var1 + var2) >> 8) + (((int64_t)bme->calibData.dig_P7) << 4);
 8001de4:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8001de8:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001dec:	1884      	adds	r4, r0, r2
 8001dee:	65bc      	str	r4, [r7, #88]	; 0x58
 8001df0:	eb41 0303 	adc.w	r3, r1, r3
 8001df4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001df6:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001dfa:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001dfe:	4621      	mov	r1, r4
 8001e00:	1889      	adds	r1, r1, r2
 8001e02:	6539      	str	r1, [r7, #80]	; 0x50
 8001e04:	4629      	mov	r1, r5
 8001e06:	eb43 0101 	adc.w	r1, r3, r1
 8001e0a:	6579      	str	r1, [r7, #84]	; 0x54
 8001e0c:	f04f 0000 	mov.w	r0, #0
 8001e10:	f04f 0100 	mov.w	r1, #0
 8001e14:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001e18:	4623      	mov	r3, r4
 8001e1a:	0a18      	lsrs	r0, r3, #8
 8001e1c:	462b      	mov	r3, r5
 8001e1e:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001e22:	462b      	mov	r3, r5
 8001e24:	1219      	asrs	r1, r3, #8
 8001e26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001e2a:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001e2e:	b21b      	sxth	r3, r3
 8001e30:	17da      	asrs	r2, r3, #31
 8001e32:	64bb      	str	r3, [r7, #72]	; 0x48
 8001e34:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001e36:	f04f 0200 	mov.w	r2, #0
 8001e3a:	f04f 0300 	mov.w	r3, #0
 8001e3e:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 8001e42:	464c      	mov	r4, r9
 8001e44:	0123      	lsls	r3, r4, #4
 8001e46:	4644      	mov	r4, r8
 8001e48:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001e4c:	4644      	mov	r4, r8
 8001e4e:	0122      	lsls	r2, r4, #4
 8001e50:	1884      	adds	r4, r0, r2
 8001e52:	603c      	str	r4, [r7, #0]
 8001e54:	eb41 0303 	adc.w	r3, r1, r3
 8001e58:	607b      	str	r3, [r7, #4]
 8001e5a:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001e5e:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110

    return (float)pressure / 256.0f;
 8001e62:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8001e66:	f7fe ffe7 	bl	8000e38 <__aeabi_l2f>
 8001e6a:	ee06 0a90 	vmov	s13, r0
 8001e6e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001e88 <BME280_ReadPressure+0x5a0>
 8001e72:	eec6 7a87 	vdiv.f32	s15, s13, s14
}
 8001e76:	eeb0 0a67 	vmov.f32	s0, s15
 8001e7a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e84:	00000000 	.word	0x00000000
 8001e88:	43800000 	.word	0x43800000

08001e8c <BME280_ReadHumidity>:

float BME280_ReadHumidity(BME280_HandleTypeDef *bme) {
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b086      	sub	sp, #24
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
    // Read temperature first to get t_fine
    BME280_ReadTemperature(bme);
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f7ff fcdd 	bl	8001854 <BME280_ReadTemperature>

    int32_t adc_H = BME280_ReadHumidityRaw(bme);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f7ff fcc2 	bl	8001824 <BME280_ReadHumidityRaw>
 8001ea0:	6178      	str	r0, [r7, #20]

    // Humidity compensation formula from datasheet
    int32_t var1 = (bme->t_fine - ((int32_t)76800));
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea6:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8001eaa:	613b      	str	r3, [r7, #16]

    var1 = (((((adc_H << 14) - (((int32_t)bme->calibData.dig_H4) << 20) -
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	039a      	lsls	r2, r3, #14
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001eb6:	051b      	lsls	r3, r3, #20
 8001eb8:	1ad2      	subs	r2, r2, r3
              (((int32_t)bme->calibData.dig_H5) * var1)) + ((int32_t)16384)) >> 15) *
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	fb01 f303 	mul.w	r3, r1, r3
    var1 = (((((adc_H << 14) - (((int32_t)bme->calibData.dig_H4) << 20) -
 8001ec8:	1ad3      	subs	r3, r2, r3
              (((int32_t)bme->calibData.dig_H5) * var1)) + ((int32_t)16384)) >> 15) *
 8001eca:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001ece:	13db      	asrs	r3, r3, #15
            (((((((var1 * ((int32_t)bme->calibData.dig_H6)) >> 10) *
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	f992 2028 	ldrsb.w	r2, [r2, #40]	; 0x28
 8001ed6:	4611      	mov	r1, r2
 8001ed8:	693a      	ldr	r2, [r7, #16]
 8001eda:	fb01 f202 	mul.w	r2, r1, r2
 8001ede:	1292      	asrs	r2, r2, #10
                (((var1 * ((int32_t)bme->calibData.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
 8001ee0:	6879      	ldr	r1, [r7, #4]
 8001ee2:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
 8001ee6:	4608      	mov	r0, r1
 8001ee8:	6939      	ldr	r1, [r7, #16]
 8001eea:	fb00 f101 	mul.w	r1, r0, r1
 8001eee:	12c9      	asrs	r1, r1, #11
 8001ef0:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
            (((((((var1 * ((int32_t)bme->calibData.dig_H6)) >> 10) *
 8001ef4:	fb01 f202 	mul.w	r2, r1, r2
                (((var1 * ((int32_t)bme->calibData.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
 8001ef8:	1292      	asrs	r2, r2, #10
 8001efa:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
              ((int32_t)2097152)) * ((int32_t)bme->calibData.dig_H2) + 8192) >> 14));
 8001efe:	6879      	ldr	r1, [r7, #4]
 8001f00:	f9b1 1020 	ldrsh.w	r1, [r1, #32]
 8001f04:	fb01 f202 	mul.w	r2, r1, r2
 8001f08:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8001f0c:	1392      	asrs	r2, r2, #14
    var1 = (((((adc_H << 14) - (((int32_t)bme->calibData.dig_H4) << 20) -
 8001f0e:	fb02 f303 	mul.w	r3, r2, r3
 8001f12:	613b      	str	r3, [r7, #16]

    var1 = (var1 - (((((var1 >> 15) * (var1 >> 15)) >> 7) *
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	13db      	asrs	r3, r3, #15
 8001f18:	693a      	ldr	r2, [r7, #16]
 8001f1a:	13d2      	asrs	r2, r2, #15
 8001f1c:	fb02 f303 	mul.w	r3, r2, r3
 8001f20:	11db      	asrs	r3, r3, #7
                     ((int32_t)bme->calibData.dig_H1)) >> 4));
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	7f92      	ldrb	r2, [r2, #30]
    var1 = (var1 - (((((var1 >> 15) * (var1 >> 15)) >> 7) *
 8001f26:	fb02 f303 	mul.w	r3, r2, r3
                     ((int32_t)bme->calibData.dig_H1)) >> 4));
 8001f2a:	111b      	asrs	r3, r3, #4
    var1 = (var1 - (((((var1 >> 15) * (var1 >> 15)) >> 7) *
 8001f2c:	693a      	ldr	r2, [r7, #16]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	613b      	str	r3, [r7, #16]

    var1 = (var1 < 0 ? 0 : var1);
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001f38:	613b      	str	r3, [r7, #16]
    var1 = (var1 > 419430400 ? 419430400 : var1);
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8001f40:	bfa8      	it	ge
 8001f42:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8001f46:	613b      	str	r3, [r7, #16]

    float humidity = (var1 >> 12);
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	131b      	asrs	r3, r3, #12
 8001f4c:	ee07 3a90 	vmov	s15, r3
 8001f50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f54:	edc7 7a03 	vstr	s15, [r7, #12]
    return humidity / 1024.0f;
 8001f58:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f5c:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001f74 <BME280_ReadHumidity+0xe8>
 8001f60:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001f64:	eef0 7a66 	vmov.f32	s15, s13
}
 8001f68:	eeb0 0a67 	vmov.f32	s0, s15
 8001f6c:	3718      	adds	r7, #24
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	44800000 	.word	0x44800000

08001f78 <BME280_ReadAltitude>:

float BME280_ReadAltitude(BME280_HandleTypeDef *bme, float seaLevelPressure) {
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	ed87 0a00 	vstr	s0, [r7]
    float pressure = BME280_ReadPressure(bme) / 100.0f; // Convert to hPa
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f7ff fcaf 	bl	80018e8 <BME280_ReadPressure>
 8001f8a:	eeb0 7a40 	vmov.f32	s14, s0
 8001f8e:	eddf 6a10 	vldr	s13, [pc, #64]	; 8001fd0 <BME280_ReadAltitude+0x58>
 8001f92:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f96:	edc7 7a03 	vstr	s15, [r7, #12]
    return 44330.0f * (1.0f - powf(pressure / seaLevelPressure, 0.1903f));
 8001f9a:	ed97 7a03 	vldr	s14, [r7, #12]
 8001f9e:	edd7 7a00 	vldr	s15, [r7]
 8001fa2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001fa6:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8001fd4 <BME280_ReadAltitude+0x5c>
 8001faa:	eeb0 0a66 	vmov.f32	s0, s13
 8001fae:	f007 fe77 	bl	8009ca0 <powf>
 8001fb2:	eef0 7a40 	vmov.f32	s15, s0
 8001fb6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001fba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fbe:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001fd8 <BME280_ReadAltitude+0x60>
 8001fc2:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001fc6:	eeb0 0a67 	vmov.f32	s0, s15
 8001fca:	3710      	adds	r7, #16
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	42c80000 	.word	0x42c80000
 8001fd4:	3e42de01 	.word	0x3e42de01
 8001fd8:	472d2a00 	.word	0x472d2a00

08001fdc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001fe4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001fe8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001fec:	f003 0301 	and.w	r3, r3, #1
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d013      	beq.n	800201c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001ff4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001ff8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001ffc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002000:	2b00      	cmp	r3, #0
 8002002:	d00b      	beq.n	800201c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8002004:	e000      	b.n	8002008 <ITM_SendChar+0x2c>
    {
      __NOP();
 8002006:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8002008:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d0f9      	beq.n	8002006 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8002012:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	b2d2      	uxtb	r2, r2
 800201a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800201c:	687b      	ldr	r3, [r7, #4]
}
 800201e:	4618      	mov	r0, r3
 8002020:	370c      	adds	r7, #12
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr

0800202a <_write>:
/* USER CODE END 0 */
BME280_HandleTypeDef bme280;
char uart_buffer[200];

// SWV ITM printf support (alternative method)
int _write(int file, char *ptr, int len) {
 800202a:	b580      	push	{r7, lr}
 800202c:	b086      	sub	sp, #24
 800202e:	af00      	add	r7, sp, #0
 8002030:	60f8      	str	r0, [r7, #12]
 8002032:	60b9      	str	r1, [r7, #8]
 8002034:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < len; i++) {
 8002036:	2300      	movs	r3, #0
 8002038:	617b      	str	r3, [r7, #20]
 800203a:	e009      	b.n	8002050 <_write+0x26>
        ITM_SendChar((*ptr++));
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	1c5a      	adds	r2, r3, #1
 8002040:	60ba      	str	r2, [r7, #8]
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	4618      	mov	r0, r3
 8002046:	f7ff ffc9 	bl	8001fdc <ITM_SendChar>
    for (int i = 0; i < len; i++) {
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	3301      	adds	r3, #1
 800204e:	617b      	str	r3, [r7, #20]
 8002050:	697a      	ldr	r2, [r7, #20]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	429a      	cmp	r2, r3
 8002056:	dbf1      	blt.n	800203c <_write+0x12>
    }
    return len;
 8002058:	687b      	ldr	r3, [r7, #4]
}
 800205a:	4618      	mov	r0, r3
 800205c:	3718      	adds	r7, #24
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
	...

08002064 <print_float_value>:

void print_float_value(float value, char* label, char* unit) {
 8002064:	b580      	push	{r7, lr}
 8002066:	b088      	sub	sp, #32
 8002068:	af02      	add	r7, sp, #8
 800206a:	ed87 0a03 	vstr	s0, [r7, #12]
 800206e:	60b8      	str	r0, [r7, #8]
 8002070:	6079      	str	r1, [r7, #4]
    int integer_part = (int)value;
 8002072:	edd7 7a03 	vldr	s15, [r7, #12]
 8002076:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800207a:	ee17 3a90 	vmov	r3, s15
 800207e:	617b      	str	r3, [r7, #20]
    int fractional_part = (int)((value - integer_part) * 100);
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	ee07 3a90 	vmov	s15, r3
 8002086:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800208a:	ed97 7a03 	vldr	s14, [r7, #12]
 800208e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002092:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8002108 <print_float_value+0xa4>
 8002096:	ee67 7a87 	vmul.f32	s15, s15, s14
 800209a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800209e:	ee17 3a90 	vmov	r3, s15
 80020a2:	613b      	str	r3, [r7, #16]

    if (value < 0 && integer_part == 0) {
 80020a4:	edd7 7a03 	vldr	s15, [r7, #12]
 80020a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80020ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020b0:	d50d      	bpl.n	80020ce <print_float_value+0x6a>
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d10a      	bne.n	80020ce <print_float_value+0x6a>
        sprintf(uart_buffer, "%s: -%d.%02d%s\r\n", label, integer_part, fractional_part, unit);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	9301      	str	r3, [sp, #4]
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	9300      	str	r3, [sp, #0]
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	68ba      	ldr	r2, [r7, #8]
 80020c4:	4911      	ldr	r1, [pc, #68]	; (800210c <print_float_value+0xa8>)
 80020c6:	4812      	ldr	r0, [pc, #72]	; (8002110 <print_float_value+0xac>)
 80020c8:	f004 f94c 	bl	8006364 <siprintf>
 80020cc:	e00c      	b.n	80020e8 <print_float_value+0x84>
    } else {
        sprintf(uart_buffer, "%s: %d.%02d%s\r\n", label, integer_part, abs(fractional_part), unit);
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	bfb8      	it	lt
 80020d4:	425b      	neglt	r3, r3
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	9201      	str	r2, [sp, #4]
 80020da:	9300      	str	r3, [sp, #0]
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	68ba      	ldr	r2, [r7, #8]
 80020e0:	490c      	ldr	r1, [pc, #48]	; (8002114 <print_float_value+0xb0>)
 80020e2:	480b      	ldr	r0, [pc, #44]	; (8002110 <print_float_value+0xac>)
 80020e4:	f004 f93e 	bl	8006364 <siprintf>
    }

    // Send via ST-Link VCP
    HAL_UART_Transmit(&huart2, (uint8_t*)uart_buffer, strlen(uart_buffer), 1000);
 80020e8:	4809      	ldr	r0, [pc, #36]	; (8002110 <print_float_value+0xac>)
 80020ea:	f7fe f8c9 	bl	8000280 <strlen>
 80020ee:	4603      	mov	r3, r0
 80020f0:	b29a      	uxth	r2, r3
 80020f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020f6:	4906      	ldr	r1, [pc, #24]	; (8002110 <print_float_value+0xac>)
 80020f8:	4807      	ldr	r0, [pc, #28]	; (8002118 <print_float_value+0xb4>)
 80020fa:	f002 fe18 	bl	8004d2e <HAL_UART_Transmit>
}
 80020fe:	bf00      	nop
 8002100:	3718      	adds	r7, #24
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	42c80000 	.word	0x42c80000
 800210c:	0800a440 	.word	0x0800a440
 8002110:	200002b8 	.word	0x200002b8
 8002114:	0800a454 	.word	0x0800a454
 8002118:	20000244 	.word	0x20000244

0800211c <print_pressure_value>:

void print_pressure_value(float pressure) {
 800211c:	b580      	push	{r7, lr}
 800211e:	b088      	sub	sp, #32
 8002120:	af02      	add	r7, sp, #8
 8002122:	ed87 0a01 	vstr	s0, [r7, #4]
    int pa_integer = (int)pressure;
 8002126:	edd7 7a01 	vldr	s15, [r7, #4]
 800212a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800212e:	ee17 3a90 	vmov	r3, s15
 8002132:	617b      	str	r3, [r7, #20]
    int pa_fractional = (int)((pressure - pa_integer) * 100);
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	ee07 3a90 	vmov	s15, r3
 800213a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800213e:	ed97 7a01 	vldr	s14, [r7, #4]
 8002142:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002146:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80021cc <print_pressure_value+0xb0>
 800214a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800214e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002152:	ee17 3a90 	vmov	r3, s15
 8002156:	613b      	str	r3, [r7, #16]

    int hpa_integer = (int)(pressure / 100.0f);
 8002158:	ed97 7a01 	vldr	s14, [r7, #4]
 800215c:	eddf 6a1b 	vldr	s13, [pc, #108]	; 80021cc <print_pressure_value+0xb0>
 8002160:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002164:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002168:	ee17 3a90 	vmov	r3, s15
 800216c:	60fb      	str	r3, [r7, #12]
    int hpa_fractional = (int)(((pressure / 100.0f) - hpa_integer) * 100);
 800216e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002172:	eddf 6a16 	vldr	s13, [pc, #88]	; 80021cc <print_pressure_value+0xb0>
 8002176:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	ee07 3a90 	vmov	s15, r3
 8002180:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002184:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002188:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80021cc <print_pressure_value+0xb0>
 800218c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002190:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002194:	ee17 3a90 	vmov	r3, s15
 8002198:	60bb      	str	r3, [r7, #8]

    sprintf(uart_buffer, "Pressure: %d.%02d Pa (%d.%02d hPa)\r\n",
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	9301      	str	r3, [sp, #4]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	9300      	str	r3, [sp, #0]
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	697a      	ldr	r2, [r7, #20]
 80021a6:	490a      	ldr	r1, [pc, #40]	; (80021d0 <print_pressure_value+0xb4>)
 80021a8:	480a      	ldr	r0, [pc, #40]	; (80021d4 <print_pressure_value+0xb8>)
 80021aa:	f004 f8db 	bl	8006364 <siprintf>
            pa_integer, pa_fractional, hpa_integer, hpa_fractional);
    HAL_UART_Transmit(&huart2, (uint8_t*)uart_buffer, strlen(uart_buffer), 1000);
 80021ae:	4809      	ldr	r0, [pc, #36]	; (80021d4 <print_pressure_value+0xb8>)
 80021b0:	f7fe f866 	bl	8000280 <strlen>
 80021b4:	4603      	mov	r3, r0
 80021b6:	b29a      	uxth	r2, r3
 80021b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021bc:	4905      	ldr	r1, [pc, #20]	; (80021d4 <print_pressure_value+0xb8>)
 80021be:	4806      	ldr	r0, [pc, #24]	; (80021d8 <print_pressure_value+0xbc>)
 80021c0:	f002 fdb5 	bl	8004d2e <HAL_UART_Transmit>
}
 80021c4:	bf00      	nop
 80021c6:	3718      	adds	r7, #24
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	42c80000 	.word	0x42c80000
 80021d0:	0800a464 	.word	0x0800a464
 80021d4:	200002b8 	.word	0x200002b8
 80021d8:	20000244 	.word	0x20000244

080021dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b08e      	sub	sp, #56	; 0x38
 80021e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80021e2:	f000 fd11 	bl	8002c08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021e6:	f000 fa49 	bl	800267c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021ea:	f000 fb09 	bl	8002800 <MX_GPIO_Init>
  MX_I2C1_Init();
 80021ee:	f000 faaf 	bl	8002750 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80021f2:	f000 fadb 	bl	80027ac <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  sprintf(uart_buffer, "\r\n=== ST-Link VCP Test ===\r\n");
 80021f6:	495e      	ldr	r1, [pc, #376]	; (8002370 <main+0x194>)
 80021f8:	485e      	ldr	r0, [pc, #376]	; (8002374 <main+0x198>)
 80021fa:	f004 f8b3 	bl	8006364 <siprintf>
      HAL_UART_Transmit(&huart2, (uint8_t*)uart_buffer, strlen(uart_buffer), 1000);
 80021fe:	485d      	ldr	r0, [pc, #372]	; (8002374 <main+0x198>)
 8002200:	f7fe f83e 	bl	8000280 <strlen>
 8002204:	4603      	mov	r3, r0
 8002206:	b29a      	uxth	r2, r3
 8002208:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800220c:	4959      	ldr	r1, [pc, #356]	; (8002374 <main+0x198>)
 800220e:	485a      	ldr	r0, [pc, #360]	; (8002378 <main+0x19c>)
 8002210:	f002 fd8d 	bl	8004d2e <HAL_UART_Transmit>

      sprintf(uart_buffer, "System Clock: %lu Hz\r\n", HAL_RCC_GetSysClockFreq());
 8002214:	f002 fc44 	bl	8004aa0 <HAL_RCC_GetSysClockFreq>
 8002218:	4603      	mov	r3, r0
 800221a:	461a      	mov	r2, r3
 800221c:	4957      	ldr	r1, [pc, #348]	; (800237c <main+0x1a0>)
 800221e:	4855      	ldr	r0, [pc, #340]	; (8002374 <main+0x198>)
 8002220:	f004 f8a0 	bl	8006364 <siprintf>
      HAL_UART_Transmit(&huart2, (uint8_t*)uart_buffer, strlen(uart_buffer), 1000);
 8002224:	4853      	ldr	r0, [pc, #332]	; (8002374 <main+0x198>)
 8002226:	f7fe f82b 	bl	8000280 <strlen>
 800222a:	4603      	mov	r3, r0
 800222c:	b29a      	uxth	r2, r3
 800222e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002232:	4950      	ldr	r1, [pc, #320]	; (8002374 <main+0x198>)
 8002234:	4850      	ldr	r0, [pc, #320]	; (8002378 <main+0x19c>)
 8002236:	f002 fd7a 	bl	8004d2e <HAL_UART_Transmit>

      sprintf(uart_buffer, "HAL Tick: %lu ms\r\n", HAL_GetTick());
 800223a:	f000 fd4b 	bl	8002cd4 <HAL_GetTick>
 800223e:	4603      	mov	r3, r0
 8002240:	461a      	mov	r2, r3
 8002242:	494f      	ldr	r1, [pc, #316]	; (8002380 <main+0x1a4>)
 8002244:	484b      	ldr	r0, [pc, #300]	; (8002374 <main+0x198>)
 8002246:	f004 f88d 	bl	8006364 <siprintf>
      HAL_UART_Transmit(&huart2, (uint8_t*)uart_buffer, strlen(uart_buffer), 1000);
 800224a:	484a      	ldr	r0, [pc, #296]	; (8002374 <main+0x198>)
 800224c:	f7fe f818 	bl	8000280 <strlen>
 8002250:	4603      	mov	r3, r0
 8002252:	b29a      	uxth	r2, r3
 8002254:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002258:	4946      	ldr	r1, [pc, #280]	; (8002374 <main+0x198>)
 800225a:	4847      	ldr	r0, [pc, #284]	; (8002378 <main+0x19c>)
 800225c:	f002 fd67 	bl	8004d2e <HAL_UART_Transmit>

      // Also send to SWV ITM (for debug console)
      printf("\n=== ST-Link VCP Test ===\n");
 8002260:	4848      	ldr	r0, [pc, #288]	; (8002384 <main+0x1a8>)
 8002262:	f004 f877 	bl	8006354 <puts>
      printf("System Clock: %lu Hz\n", HAL_RCC_GetSysClockFreq());
 8002266:	f002 fc1b 	bl	8004aa0 <HAL_RCC_GetSysClockFreq>
 800226a:	4603      	mov	r3, r0
 800226c:	4619      	mov	r1, r3
 800226e:	4846      	ldr	r0, [pc, #280]	; (8002388 <main+0x1ac>)
 8002270:	f004 f80a 	bl	8006288 <iprintf>
      printf("HAL Tick: %lu ms\n", HAL_GetTick());
 8002274:	f000 fd2e 	bl	8002cd4 <HAL_GetTick>
 8002278:	4603      	mov	r3, r0
 800227a:	4619      	mov	r1, r3
 800227c:	4843      	ldr	r0, [pc, #268]	; (800238c <main+0x1b0>)
 800227e:	f004 f803 	bl	8006288 <iprintf>

      HAL_Delay(1000);
 8002282:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002286:	f000 fd31 	bl	8002cec <HAL_Delay>

      // Initialize BME280
      sprintf(uart_buffer, "Initializing BME280...\r\n");
 800228a:	4941      	ldr	r1, [pc, #260]	; (8002390 <main+0x1b4>)
 800228c:	4839      	ldr	r0, [pc, #228]	; (8002374 <main+0x198>)
 800228e:	f004 f869 	bl	8006364 <siprintf>
      HAL_UART_Transmit(&huart2, (uint8_t*)uart_buffer, strlen(uart_buffer), 1000);
 8002292:	4838      	ldr	r0, [pc, #224]	; (8002374 <main+0x198>)
 8002294:	f7fd fff4 	bl	8000280 <strlen>
 8002298:	4603      	mov	r3, r0
 800229a:	b29a      	uxth	r2, r3
 800229c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022a0:	4934      	ldr	r1, [pc, #208]	; (8002374 <main+0x198>)
 80022a2:	4835      	ldr	r0, [pc, #212]	; (8002378 <main+0x19c>)
 80022a4:	f002 fd43 	bl	8004d2e <HAL_UART_Transmit>
      printf("Initializing BME280...\n");
 80022a8:	483a      	ldr	r0, [pc, #232]	; (8002394 <main+0x1b8>)
 80022aa:	f004 f853 	bl	8006354 <puts>

      if (BME280_Init(&bme280, &hi2c1, BME280_ADDRESS_PRIMARY)) {
 80022ae:	2276      	movs	r2, #118	; 0x76
 80022b0:	4939      	ldr	r1, [pc, #228]	; (8002398 <main+0x1bc>)
 80022b2:	483a      	ldr	r0, [pc, #232]	; (800239c <main+0x1c0>)
 80022b4:	f7ff f802 	bl	80012bc <BME280_Init>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d030      	beq.n	8002320 <main+0x144>
          sprintf(uart_buffer, "BME280 initialization successful!\r\n");
 80022be:	4938      	ldr	r1, [pc, #224]	; (80023a0 <main+0x1c4>)
 80022c0:	482c      	ldr	r0, [pc, #176]	; (8002374 <main+0x198>)
 80022c2:	f004 f84f 	bl	8006364 <siprintf>
          HAL_UART_Transmit(&huart2, (uint8_t*)uart_buffer, strlen(uart_buffer), 1000);
 80022c6:	482b      	ldr	r0, [pc, #172]	; (8002374 <main+0x198>)
 80022c8:	f7fd ffda 	bl	8000280 <strlen>
 80022cc:	4603      	mov	r3, r0
 80022ce:	b29a      	uxth	r2, r3
 80022d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022d4:	4927      	ldr	r1, [pc, #156]	; (8002374 <main+0x198>)
 80022d6:	4828      	ldr	r0, [pc, #160]	; (8002378 <main+0x19c>)
 80022d8:	f002 fd29 	bl	8004d2e <HAL_UART_Transmit>
          printf("BME280 initialization successful!\n");
 80022dc:	4831      	ldr	r0, [pc, #196]	; (80023a4 <main+0x1c8>)
 80022de:	f004 f839 	bl	8006354 <puts>

          // Read and display chip ID
          uint8_t chipID = BME280_GetChipID(&bme280);
 80022e2:	482e      	ldr	r0, [pc, #184]	; (800239c <main+0x1c0>)
 80022e4:	f7ff f85b 	bl	800139e <BME280_GetChipID>
 80022e8:	4603      	mov	r3, r0
 80022ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          sprintf(uart_buffer, "BME280 Chip ID: 0x%02X\r\n", chipID);
 80022ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80022f2:	461a      	mov	r2, r3
 80022f4:	492c      	ldr	r1, [pc, #176]	; (80023a8 <main+0x1cc>)
 80022f6:	481f      	ldr	r0, [pc, #124]	; (8002374 <main+0x198>)
 80022f8:	f004 f834 	bl	8006364 <siprintf>
          HAL_UART_Transmit(&huart2, (uint8_t*)uart_buffer, strlen(uart_buffer), 1000);
 80022fc:	481d      	ldr	r0, [pc, #116]	; (8002374 <main+0x198>)
 80022fe:	f7fd ffbf 	bl	8000280 <strlen>
 8002302:	4603      	mov	r3, r0
 8002304:	b29a      	uxth	r2, r3
 8002306:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800230a:	491a      	ldr	r1, [pc, #104]	; (8002374 <main+0x198>)
 800230c:	481a      	ldr	r0, [pc, #104]	; (8002378 <main+0x19c>)
 800230e:	f002 fd0e 	bl	8004d2e <HAL_UART_Transmit>
          printf("BME280 Chip ID: 0x%02X\n", chipID);
 8002312:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002316:	4619      	mov	r1, r3
 8002318:	4824      	ldr	r0, [pc, #144]	; (80023ac <main+0x1d0>)
 800231a:	f003 ffb5 	bl	8006288 <iprintf>
 800231e:	e097      	b.n	8002450 <main+0x274>

      } else {
          sprintf(uart_buffer, "BME280 initialization failed!\r\n");
 8002320:	4923      	ldr	r1, [pc, #140]	; (80023b0 <main+0x1d4>)
 8002322:	4814      	ldr	r0, [pc, #80]	; (8002374 <main+0x198>)
 8002324:	f004 f81e 	bl	8006364 <siprintf>
          HAL_UART_Transmit(&huart2, (uint8_t*)uart_buffer, strlen(uart_buffer), 1000);
 8002328:	4812      	ldr	r0, [pc, #72]	; (8002374 <main+0x198>)
 800232a:	f7fd ffa9 	bl	8000280 <strlen>
 800232e:	4603      	mov	r3, r0
 8002330:	b29a      	uxth	r2, r3
 8002332:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002336:	490f      	ldr	r1, [pc, #60]	; (8002374 <main+0x198>)
 8002338:	480f      	ldr	r0, [pc, #60]	; (8002378 <main+0x19c>)
 800233a:	f002 fcf8 	bl	8004d2e <HAL_UART_Transmit>
          printf("BME280 initialization failed!\n");
 800233e:	481d      	ldr	r0, [pc, #116]	; (80023b4 <main+0x1d8>)
 8002340:	f004 f808 	bl	8006354 <puts>

          // Try I2C scan
          sprintf(uart_buffer, "Scanning I2C devices...\r\n");
 8002344:	491c      	ldr	r1, [pc, #112]	; (80023b8 <main+0x1dc>)
 8002346:	480b      	ldr	r0, [pc, #44]	; (8002374 <main+0x198>)
 8002348:	f004 f80c 	bl	8006364 <siprintf>
          HAL_UART_Transmit(&huart2, (uint8_t*)uart_buffer, strlen(uart_buffer), 1000);
 800234c:	4809      	ldr	r0, [pc, #36]	; (8002374 <main+0x198>)
 800234e:	f7fd ff97 	bl	8000280 <strlen>
 8002352:	4603      	mov	r3, r0
 8002354:	b29a      	uxth	r2, r3
 8002356:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800235a:	4906      	ldr	r1, [pc, #24]	; (8002374 <main+0x198>)
 800235c:	4806      	ldr	r0, [pc, #24]	; (8002378 <main+0x19c>)
 800235e:	f002 fce6 	bl	8004d2e <HAL_UART_Transmit>

          bool found = false;
 8002362:	2300      	movs	r3, #0
 8002364:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
          for (uint8_t addr = 1; addr < 128; addr++) {
 8002368:	2301      	movs	r3, #1
 800236a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800236e:	e052      	b.n	8002416 <main+0x23a>
 8002370:	0800a48c 	.word	0x0800a48c
 8002374:	200002b8 	.word	0x200002b8
 8002378:	20000244 	.word	0x20000244
 800237c:	0800a4ac 	.word	0x0800a4ac
 8002380:	0800a4c4 	.word	0x0800a4c4
 8002384:	0800a4d8 	.word	0x0800a4d8
 8002388:	0800a4f4 	.word	0x0800a4f4
 800238c:	0800a50c 	.word	0x0800a50c
 8002390:	0800a520 	.word	0x0800a520
 8002394:	0800a53c 	.word	0x0800a53c
 8002398:	200001f0 	.word	0x200001f0
 800239c:	20000288 	.word	0x20000288
 80023a0:	0800a554 	.word	0x0800a554
 80023a4:	0800a578 	.word	0x0800a578
 80023a8:	0800a59c 	.word	0x0800a59c
 80023ac:	0800a5b8 	.word	0x0800a5b8
 80023b0:	0800a5d0 	.word	0x0800a5d0
 80023b4:	0800a5f0 	.word	0x0800a5f0
 80023b8:	0800a610 	.word	0x0800a610
              if (HAL_I2C_IsDeviceReady(&hi2c1, addr << 1, 3, 100) == HAL_OK) {
 80023bc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	b299      	uxth	r1, r3
 80023c6:	2364      	movs	r3, #100	; 0x64
 80023c8:	2203      	movs	r2, #3
 80023ca:	4893      	ldr	r0, [pc, #588]	; (8002618 <main+0x43c>)
 80023cc:	f001 fb80 	bl	8003ad0 <HAL_I2C_IsDeviceReady>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d11a      	bne.n	800240c <main+0x230>
                  sprintf(uart_buffer, "Found I2C device at: 0x%02X\r\n", addr);
 80023d6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80023da:	461a      	mov	r2, r3
 80023dc:	498f      	ldr	r1, [pc, #572]	; (800261c <main+0x440>)
 80023de:	4890      	ldr	r0, [pc, #576]	; (8002620 <main+0x444>)
 80023e0:	f003 ffc0 	bl	8006364 <siprintf>
                  HAL_UART_Transmit(&huart2, (uint8_t*)uart_buffer, strlen(uart_buffer), 1000);
 80023e4:	488e      	ldr	r0, [pc, #568]	; (8002620 <main+0x444>)
 80023e6:	f7fd ff4b 	bl	8000280 <strlen>
 80023ea:	4603      	mov	r3, r0
 80023ec:	b29a      	uxth	r2, r3
 80023ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023f2:	498b      	ldr	r1, [pc, #556]	; (8002620 <main+0x444>)
 80023f4:	488b      	ldr	r0, [pc, #556]	; (8002624 <main+0x448>)
 80023f6:	f002 fc9a 	bl	8004d2e <HAL_UART_Transmit>
                  printf("Found I2C device at: 0x%02X\n", addr);
 80023fa:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80023fe:	4619      	mov	r1, r3
 8002400:	4889      	ldr	r0, [pc, #548]	; (8002628 <main+0x44c>)
 8002402:	f003 ff41 	bl	8006288 <iprintf>
                  found = true;
 8002406:	2301      	movs	r3, #1
 8002408:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
          for (uint8_t addr = 1; addr < 128; addr++) {
 800240c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002410:	3301      	adds	r3, #1
 8002412:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002416:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 800241a:	2b00      	cmp	r3, #0
 800241c:	dace      	bge.n	80023bc <main+0x1e0>
              }
          }

          if (!found) {
 800241e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002422:	f083 0301 	eor.w	r3, r3, #1
 8002426:	b2db      	uxtb	r3, r3
 8002428:	2b00      	cmp	r3, #0
 800242a:	d011      	beq.n	8002450 <main+0x274>
              sprintf(uart_buffer, "No I2C devices found!\r\n");
 800242c:	497f      	ldr	r1, [pc, #508]	; (800262c <main+0x450>)
 800242e:	487c      	ldr	r0, [pc, #496]	; (8002620 <main+0x444>)
 8002430:	f003 ff98 	bl	8006364 <siprintf>
              HAL_UART_Transmit(&huart2, (uint8_t*)uart_buffer, strlen(uart_buffer), 1000);
 8002434:	487a      	ldr	r0, [pc, #488]	; (8002620 <main+0x444>)
 8002436:	f7fd ff23 	bl	8000280 <strlen>
 800243a:	4603      	mov	r3, r0
 800243c:	b29a      	uxth	r2, r3
 800243e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002442:	4977      	ldr	r1, [pc, #476]	; (8002620 <main+0x444>)
 8002444:	4877      	ldr	r0, [pc, #476]	; (8002624 <main+0x448>)
 8002446:	f002 fc72 	bl	8004d2e <HAL_UART_Transmit>
              printf("No I2C devices found!\n");
 800244a:	4879      	ldr	r0, [pc, #484]	; (8002630 <main+0x454>)
 800244c:	f003 ff82 	bl	8006354 <puts>
          }

          // Continue with test pattern even if BME280 failed
      }

      uint32_t counter = 0;
 8002450:	2300      	movs	r3, #0
 8002452:	633b      	str	r3, [r7, #48]	; 0x30

      while (1) {
          // Send heartbeat message
          sprintf(uart_buffer, "\r\n=== Loop #%lu ===\r\n", counter);
 8002454:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002456:	4977      	ldr	r1, [pc, #476]	; (8002634 <main+0x458>)
 8002458:	4871      	ldr	r0, [pc, #452]	; (8002620 <main+0x444>)
 800245a:	f003 ff83 	bl	8006364 <siprintf>
          HAL_UART_Transmit(&huart2, (uint8_t*)uart_buffer, strlen(uart_buffer), 1000);
 800245e:	4870      	ldr	r0, [pc, #448]	; (8002620 <main+0x444>)
 8002460:	f7fd ff0e 	bl	8000280 <strlen>
 8002464:	4603      	mov	r3, r0
 8002466:	b29a      	uxth	r2, r3
 8002468:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800246c:	496c      	ldr	r1, [pc, #432]	; (8002620 <main+0x444>)
 800246e:	486d      	ldr	r0, [pc, #436]	; (8002624 <main+0x448>)
 8002470:	f002 fc5d 	bl	8004d2e <HAL_UART_Transmit>
          printf("\n=== Loop #%lu ===\n", counter);
 8002474:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002476:	4870      	ldr	r0, [pc, #448]	; (8002638 <main+0x45c>)
 8002478:	f003 ff06 	bl	8006288 <iprintf>

          if (BME280_IsConnected(&bme280)) {
 800247c:	486f      	ldr	r0, [pc, #444]	; (800263c <main+0x460>)
 800247e:	f7fe ff7b 	bl	8001378 <BME280_IsConnected>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	f000 8093 	beq.w	80025b0 <main+0x3d4>
              // Read sensor data
              float temperature = BME280_ReadTemperature(&bme280);
 800248a:	486c      	ldr	r0, [pc, #432]	; (800263c <main+0x460>)
 800248c:	f7ff f9e2 	bl	8001854 <BME280_ReadTemperature>
 8002490:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
              float pressure = BME280_ReadPressure(&bme280);
 8002494:	4869      	ldr	r0, [pc, #420]	; (800263c <main+0x460>)
 8002496:	f7ff fa27 	bl	80018e8 <BME280_ReadPressure>
 800249a:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
              float humidity = BME280_ReadHumidity(&bme280);
 800249e:	4867      	ldr	r0, [pc, #412]	; (800263c <main+0x460>)
 80024a0:	f7ff fcf4 	bl	8001e8c <BME280_ReadHumidity>
 80024a4:	ed87 0a08 	vstr	s0, [r7, #32]
              float altitude = BME280_ReadAltitude(&bme280, 1013.25f);
 80024a8:	ed9f 0a65 	vldr	s0, [pc, #404]	; 8002640 <main+0x464>
 80024ac:	4863      	ldr	r0, [pc, #396]	; (800263c <main+0x460>)
 80024ae:	f7ff fd63 	bl	8001f78 <BME280_ReadAltitude>
 80024b2:	ed87 0a07 	vstr	s0, [r7, #28]

              // Print to ST-Link VCP
              print_float_value(temperature, "Temperature", " C");
 80024b6:	4963      	ldr	r1, [pc, #396]	; (8002644 <main+0x468>)
 80024b8:	4863      	ldr	r0, [pc, #396]	; (8002648 <main+0x46c>)
 80024ba:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 80024be:	f7ff fdd1 	bl	8002064 <print_float_value>
              print_pressure_value(pressure);
 80024c2:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80024c6:	f7ff fe29 	bl	800211c <print_pressure_value>
              print_float_value(humidity, "Humidity", "%");
 80024ca:	4960      	ldr	r1, [pc, #384]	; (800264c <main+0x470>)
 80024cc:	4860      	ldr	r0, [pc, #384]	; (8002650 <main+0x474>)
 80024ce:	ed97 0a08 	vldr	s0, [r7, #32]
 80024d2:	f7ff fdc7 	bl	8002064 <print_float_value>
              print_float_value(altitude, "Altitude", " m");
 80024d6:	495f      	ldr	r1, [pc, #380]	; (8002654 <main+0x478>)
 80024d8:	485f      	ldr	r0, [pc, #380]	; (8002658 <main+0x47c>)
 80024da:	ed97 0a07 	vldr	s0, [r7, #28]
 80024de:	f7ff fdc1 	bl	8002064 <print_float_value>

              // Print to SWV ITM
              int temp_int = (int)temperature;
 80024e2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80024e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024ea:	ee17 3a90 	vmov	r3, s15
 80024ee:	61bb      	str	r3, [r7, #24]
              int temp_frac = (int)((temperature - temp_int) * 100);
 80024f0:	69bb      	ldr	r3, [r7, #24]
 80024f2:	ee07 3a90 	vmov	s15, r3
 80024f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024fa:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80024fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002502:	ed9f 7a56 	vldr	s14, [pc, #344]	; 800265c <main+0x480>
 8002506:	ee67 7a87 	vmul.f32	s15, s15, s14
 800250a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800250e:	ee17 3a90 	vmov	r3, s15
 8002512:	617b      	str	r3, [r7, #20]
              printf("Temperature: %d.%02d C\n", temp_int, abs(temp_frac));
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	2b00      	cmp	r3, #0
 8002518:	bfb8      	it	lt
 800251a:	425b      	neglt	r3, r3
 800251c:	461a      	mov	r2, r3
 800251e:	69b9      	ldr	r1, [r7, #24]
 8002520:	484f      	ldr	r0, [pc, #316]	; (8002660 <main+0x484>)
 8002522:	f003 feb1 	bl	8006288 <iprintf>

              int press_int = (int)(pressure / 100.0f);
 8002526:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800252a:	eddf 6a4c 	vldr	s13, [pc, #304]	; 800265c <main+0x480>
 800252e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002532:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002536:	ee17 3a90 	vmov	r3, s15
 800253a:	613b      	str	r3, [r7, #16]
              int press_frac = (int)(((pressure / 100.0f) - press_int) * 100);
 800253c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002540:	eddf 6a46 	vldr	s13, [pc, #280]	; 800265c <main+0x480>
 8002544:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	ee07 3a90 	vmov	s15, r3
 800254e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002552:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002556:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800265c <main+0x480>
 800255a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800255e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002562:	ee17 3a90 	vmov	r3, s15
 8002566:	60fb      	str	r3, [r7, #12]
              printf("Pressure: %d.%02d hPa\n", press_int, press_frac);
 8002568:	68fa      	ldr	r2, [r7, #12]
 800256a:	6939      	ldr	r1, [r7, #16]
 800256c:	483d      	ldr	r0, [pc, #244]	; (8002664 <main+0x488>)
 800256e:	f003 fe8b 	bl	8006288 <iprintf>

              int hum_int = (int)humidity;
 8002572:	edd7 7a08 	vldr	s15, [r7, #32]
 8002576:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800257a:	ee17 3a90 	vmov	r3, s15
 800257e:	60bb      	str	r3, [r7, #8]
              int hum_frac = (int)((humidity - hum_int) * 100);
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	ee07 3a90 	vmov	s15, r3
 8002586:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800258a:	ed97 7a08 	vldr	s14, [r7, #32]
 800258e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002592:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800265c <main+0x480>
 8002596:	ee67 7a87 	vmul.f32	s15, s15, s14
 800259a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800259e:	ee17 3a90 	vmov	r3, s15
 80025a2:	607b      	str	r3, [r7, #4]
              printf("Humidity: %d.%02d %%\n", hum_int, hum_frac);
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	68b9      	ldr	r1, [r7, #8]
 80025a8:	482f      	ldr	r0, [pc, #188]	; (8002668 <main+0x48c>)
 80025aa:	f003 fe6d 	bl	8006288 <iprintf>
 80025ae:	e011      	b.n	80025d4 <main+0x3f8>

          } else {
              sprintf(uart_buffer, "BME280 not connected!\r\n");
 80025b0:	492e      	ldr	r1, [pc, #184]	; (800266c <main+0x490>)
 80025b2:	481b      	ldr	r0, [pc, #108]	; (8002620 <main+0x444>)
 80025b4:	f003 fed6 	bl	8006364 <siprintf>
              HAL_UART_Transmit(&huart2, (uint8_t*)uart_buffer, strlen(uart_buffer), 1000);
 80025b8:	4819      	ldr	r0, [pc, #100]	; (8002620 <main+0x444>)
 80025ba:	f7fd fe61 	bl	8000280 <strlen>
 80025be:	4603      	mov	r3, r0
 80025c0:	b29a      	uxth	r2, r3
 80025c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025c6:	4916      	ldr	r1, [pc, #88]	; (8002620 <main+0x444>)
 80025c8:	4816      	ldr	r0, [pc, #88]	; (8002624 <main+0x448>)
 80025ca:	f002 fbb0 	bl	8004d2e <HAL_UART_Transmit>
              printf("BME280 not connected!\n");
 80025ce:	4828      	ldr	r0, [pc, #160]	; (8002670 <main+0x494>)
 80025d0:	f003 fec0 	bl	8006354 <puts>
          }

          sprintf(uart_buffer, "Uptime: %lu ms\r\n", HAL_GetTick());
 80025d4:	f000 fb7e 	bl	8002cd4 <HAL_GetTick>
 80025d8:	4603      	mov	r3, r0
 80025da:	461a      	mov	r2, r3
 80025dc:	4925      	ldr	r1, [pc, #148]	; (8002674 <main+0x498>)
 80025de:	4810      	ldr	r0, [pc, #64]	; (8002620 <main+0x444>)
 80025e0:	f003 fec0 	bl	8006364 <siprintf>
          HAL_UART_Transmit(&huart2, (uint8_t*)uart_buffer, strlen(uart_buffer), 1000);
 80025e4:	480e      	ldr	r0, [pc, #56]	; (8002620 <main+0x444>)
 80025e6:	f7fd fe4b 	bl	8000280 <strlen>
 80025ea:	4603      	mov	r3, r0
 80025ec:	b29a      	uxth	r2, r3
 80025ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025f2:	490b      	ldr	r1, [pc, #44]	; (8002620 <main+0x444>)
 80025f4:	480b      	ldr	r0, [pc, #44]	; (8002624 <main+0x448>)
 80025f6:	f002 fb9a 	bl	8004d2e <HAL_UART_Transmit>
          printf("Uptime: %lu ms\n", HAL_GetTick());
 80025fa:	f000 fb6b 	bl	8002cd4 <HAL_GetTick>
 80025fe:	4603      	mov	r3, r0
 8002600:	4619      	mov	r1, r3
 8002602:	481d      	ldr	r0, [pc, #116]	; (8002678 <main+0x49c>)
 8002604:	f003 fe40 	bl	8006288 <iprintf>

          counter++;
 8002608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800260a:	3301      	adds	r3, #1
 800260c:	633b      	str	r3, [r7, #48]	; 0x30
          HAL_Delay(2000);
 800260e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002612:	f000 fb6b 	bl	8002cec <HAL_Delay>
          sprintf(uart_buffer, "\r\n=== Loop #%lu ===\r\n", counter);
 8002616:	e71d      	b.n	8002454 <main+0x278>
 8002618:	200001f0 	.word	0x200001f0
 800261c:	0800a62c 	.word	0x0800a62c
 8002620:	200002b8 	.word	0x200002b8
 8002624:	20000244 	.word	0x20000244
 8002628:	0800a64c 	.word	0x0800a64c
 800262c:	0800a66c 	.word	0x0800a66c
 8002630:	0800a684 	.word	0x0800a684
 8002634:	0800a69c 	.word	0x0800a69c
 8002638:	0800a6b4 	.word	0x0800a6b4
 800263c:	20000288 	.word	0x20000288
 8002640:	447d5000 	.word	0x447d5000
 8002644:	0800a6c8 	.word	0x0800a6c8
 8002648:	0800a6cc 	.word	0x0800a6cc
 800264c:	0800a6d8 	.word	0x0800a6d8
 8002650:	0800a6dc 	.word	0x0800a6dc
 8002654:	0800a6e8 	.word	0x0800a6e8
 8002658:	0800a6ec 	.word	0x0800a6ec
 800265c:	42c80000 	.word	0x42c80000
 8002660:	0800a6f8 	.word	0x0800a6f8
 8002664:	0800a710 	.word	0x0800a710
 8002668:	0800a728 	.word	0x0800a728
 800266c:	0800a740 	.word	0x0800a740
 8002670:	0800a758 	.word	0x0800a758
 8002674:	0800a770 	.word	0x0800a770
 8002678:	0800a784 	.word	0x0800a784

0800267c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b094      	sub	sp, #80	; 0x50
 8002680:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002682:	f107 0320 	add.w	r3, r7, #32
 8002686:	2230      	movs	r2, #48	; 0x30
 8002688:	2100      	movs	r1, #0
 800268a:	4618      	mov	r0, r3
 800268c:	f003 ff62 	bl	8006554 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002690:	f107 030c 	add.w	r3, r7, #12
 8002694:	2200      	movs	r2, #0
 8002696:	601a      	str	r2, [r3, #0]
 8002698:	605a      	str	r2, [r3, #4]
 800269a:	609a      	str	r2, [r3, #8]
 800269c:	60da      	str	r2, [r3, #12]
 800269e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80026a0:	2300      	movs	r3, #0
 80026a2:	60bb      	str	r3, [r7, #8]
 80026a4:	4b28      	ldr	r3, [pc, #160]	; (8002748 <SystemClock_Config+0xcc>)
 80026a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a8:	4a27      	ldr	r2, [pc, #156]	; (8002748 <SystemClock_Config+0xcc>)
 80026aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026ae:	6413      	str	r3, [r2, #64]	; 0x40
 80026b0:	4b25      	ldr	r3, [pc, #148]	; (8002748 <SystemClock_Config+0xcc>)
 80026b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026b8:	60bb      	str	r3, [r7, #8]
 80026ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80026bc:	2300      	movs	r3, #0
 80026be:	607b      	str	r3, [r7, #4]
 80026c0:	4b22      	ldr	r3, [pc, #136]	; (800274c <SystemClock_Config+0xd0>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80026c8:	4a20      	ldr	r2, [pc, #128]	; (800274c <SystemClock_Config+0xd0>)
 80026ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026ce:	6013      	str	r3, [r2, #0]
 80026d0:	4b1e      	ldr	r3, [pc, #120]	; (800274c <SystemClock_Config+0xd0>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80026d8:	607b      	str	r3, [r7, #4]
 80026da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80026dc:	2301      	movs	r3, #1
 80026de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80026e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026e4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80026e6:	2302      	movs	r3, #2
 80026e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80026ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80026ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80026f0:	2319      	movs	r3, #25
 80026f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80026f4:	23a8      	movs	r3, #168	; 0xa8
 80026f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80026f8:	2302      	movs	r3, #2
 80026fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80026fc:	2304      	movs	r3, #4
 80026fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002700:	f107 0320 	add.w	r3, r7, #32
 8002704:	4618      	mov	r0, r3
 8002706:	f001 fe6d 	bl	80043e4 <HAL_RCC_OscConfig>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d001      	beq.n	8002714 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002710:	f000 f8ac 	bl	800286c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002714:	230f      	movs	r3, #15
 8002716:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002718:	2302      	movs	r3, #2
 800271a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800271c:	2300      	movs	r3, #0
 800271e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002720:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002724:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002726:	2300      	movs	r3, #0
 8002728:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800272a:	f107 030c 	add.w	r3, r7, #12
 800272e:	2102      	movs	r1, #2
 8002730:	4618      	mov	r0, r3
 8002732:	f002 f8cf 	bl	80048d4 <HAL_RCC_ClockConfig>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d001      	beq.n	8002740 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800273c:	f000 f896 	bl	800286c <Error_Handler>
  }
}
 8002740:	bf00      	nop
 8002742:	3750      	adds	r7, #80	; 0x50
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	40023800 	.word	0x40023800
 800274c:	40007000 	.word	0x40007000

08002750 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002754:	4b12      	ldr	r3, [pc, #72]	; (80027a0 <MX_I2C1_Init+0x50>)
 8002756:	4a13      	ldr	r2, [pc, #76]	; (80027a4 <MX_I2C1_Init+0x54>)
 8002758:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800275a:	4b11      	ldr	r3, [pc, #68]	; (80027a0 <MX_I2C1_Init+0x50>)
 800275c:	4a12      	ldr	r2, [pc, #72]	; (80027a8 <MX_I2C1_Init+0x58>)
 800275e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002760:	4b0f      	ldr	r3, [pc, #60]	; (80027a0 <MX_I2C1_Init+0x50>)
 8002762:	2200      	movs	r2, #0
 8002764:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002766:	4b0e      	ldr	r3, [pc, #56]	; (80027a0 <MX_I2C1_Init+0x50>)
 8002768:	2200      	movs	r2, #0
 800276a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800276c:	4b0c      	ldr	r3, [pc, #48]	; (80027a0 <MX_I2C1_Init+0x50>)
 800276e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002772:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002774:	4b0a      	ldr	r3, [pc, #40]	; (80027a0 <MX_I2C1_Init+0x50>)
 8002776:	2200      	movs	r2, #0
 8002778:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800277a:	4b09      	ldr	r3, [pc, #36]	; (80027a0 <MX_I2C1_Init+0x50>)
 800277c:	2200      	movs	r2, #0
 800277e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002780:	4b07      	ldr	r3, [pc, #28]	; (80027a0 <MX_I2C1_Init+0x50>)
 8002782:	2200      	movs	r2, #0
 8002784:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002786:	4b06      	ldr	r3, [pc, #24]	; (80027a0 <MX_I2C1_Init+0x50>)
 8002788:	2200      	movs	r2, #0
 800278a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800278c:	4804      	ldr	r0, [pc, #16]	; (80027a0 <MX_I2C1_Init+0x50>)
 800278e:	f000 fd3b 	bl	8003208 <HAL_I2C_Init>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d001      	beq.n	800279c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002798:	f000 f868 	bl	800286c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800279c:	bf00      	nop
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	200001f0 	.word	0x200001f0
 80027a4:	40005400 	.word	0x40005400
 80027a8:	000186a0 	.word	0x000186a0

080027ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80027b0:	4b11      	ldr	r3, [pc, #68]	; (80027f8 <MX_USART2_UART_Init+0x4c>)
 80027b2:	4a12      	ldr	r2, [pc, #72]	; (80027fc <MX_USART2_UART_Init+0x50>)
 80027b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80027b6:	4b10      	ldr	r3, [pc, #64]	; (80027f8 <MX_USART2_UART_Init+0x4c>)
 80027b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80027bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80027be:	4b0e      	ldr	r3, [pc, #56]	; (80027f8 <MX_USART2_UART_Init+0x4c>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80027c4:	4b0c      	ldr	r3, [pc, #48]	; (80027f8 <MX_USART2_UART_Init+0x4c>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80027ca:	4b0b      	ldr	r3, [pc, #44]	; (80027f8 <MX_USART2_UART_Init+0x4c>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80027d0:	4b09      	ldr	r3, [pc, #36]	; (80027f8 <MX_USART2_UART_Init+0x4c>)
 80027d2:	220c      	movs	r2, #12
 80027d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027d6:	4b08      	ldr	r3, [pc, #32]	; (80027f8 <MX_USART2_UART_Init+0x4c>)
 80027d8:	2200      	movs	r2, #0
 80027da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80027dc:	4b06      	ldr	r3, [pc, #24]	; (80027f8 <MX_USART2_UART_Init+0x4c>)
 80027de:	2200      	movs	r2, #0
 80027e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80027e2:	4805      	ldr	r0, [pc, #20]	; (80027f8 <MX_USART2_UART_Init+0x4c>)
 80027e4:	f002 fa56 	bl	8004c94 <HAL_UART_Init>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d001      	beq.n	80027f2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80027ee:	f000 f83d 	bl	800286c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80027f2:	bf00      	nop
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	20000244 	.word	0x20000244
 80027fc:	40004400 	.word	0x40004400

08002800 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002800:	b480      	push	{r7}
 8002802:	b085      	sub	sp, #20
 8002804:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002806:	2300      	movs	r3, #0
 8002808:	60fb      	str	r3, [r7, #12]
 800280a:	4b17      	ldr	r3, [pc, #92]	; (8002868 <MX_GPIO_Init+0x68>)
 800280c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280e:	4a16      	ldr	r2, [pc, #88]	; (8002868 <MX_GPIO_Init+0x68>)
 8002810:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002814:	6313      	str	r3, [r2, #48]	; 0x30
 8002816:	4b14      	ldr	r3, [pc, #80]	; (8002868 <MX_GPIO_Init+0x68>)
 8002818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800281e:	60fb      	str	r3, [r7, #12]
 8002820:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002822:	2300      	movs	r3, #0
 8002824:	60bb      	str	r3, [r7, #8]
 8002826:	4b10      	ldr	r3, [pc, #64]	; (8002868 <MX_GPIO_Init+0x68>)
 8002828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282a:	4a0f      	ldr	r2, [pc, #60]	; (8002868 <MX_GPIO_Init+0x68>)
 800282c:	f043 0301 	orr.w	r3, r3, #1
 8002830:	6313      	str	r3, [r2, #48]	; 0x30
 8002832:	4b0d      	ldr	r3, [pc, #52]	; (8002868 <MX_GPIO_Init+0x68>)
 8002834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002836:	f003 0301 	and.w	r3, r3, #1
 800283a:	60bb      	str	r3, [r7, #8]
 800283c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800283e:	2300      	movs	r3, #0
 8002840:	607b      	str	r3, [r7, #4]
 8002842:	4b09      	ldr	r3, [pc, #36]	; (8002868 <MX_GPIO_Init+0x68>)
 8002844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002846:	4a08      	ldr	r2, [pc, #32]	; (8002868 <MX_GPIO_Init+0x68>)
 8002848:	f043 0302 	orr.w	r3, r3, #2
 800284c:	6313      	str	r3, [r2, #48]	; 0x30
 800284e:	4b06      	ldr	r3, [pc, #24]	; (8002868 <MX_GPIO_Init+0x68>)
 8002850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	607b      	str	r3, [r7, #4]
 8002858:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800285a:	bf00      	nop
 800285c:	3714      	adds	r7, #20
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr
 8002866:	bf00      	nop
 8002868:	40023800 	.word	0x40023800

0800286c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800286c:	b480      	push	{r7}
 800286e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002870:	b672      	cpsid	i
}
 8002872:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002874:	e7fe      	b.n	8002874 <Error_Handler+0x8>
	...

08002878 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800287e:	2300      	movs	r3, #0
 8002880:	607b      	str	r3, [r7, #4]
 8002882:	4b10      	ldr	r3, [pc, #64]	; (80028c4 <HAL_MspInit+0x4c>)
 8002884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002886:	4a0f      	ldr	r2, [pc, #60]	; (80028c4 <HAL_MspInit+0x4c>)
 8002888:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800288c:	6453      	str	r3, [r2, #68]	; 0x44
 800288e:	4b0d      	ldr	r3, [pc, #52]	; (80028c4 <HAL_MspInit+0x4c>)
 8002890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002892:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002896:	607b      	str	r3, [r7, #4]
 8002898:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800289a:	2300      	movs	r3, #0
 800289c:	603b      	str	r3, [r7, #0]
 800289e:	4b09      	ldr	r3, [pc, #36]	; (80028c4 <HAL_MspInit+0x4c>)
 80028a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a2:	4a08      	ldr	r2, [pc, #32]	; (80028c4 <HAL_MspInit+0x4c>)
 80028a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028a8:	6413      	str	r3, [r2, #64]	; 0x40
 80028aa:	4b06      	ldr	r3, [pc, #24]	; (80028c4 <HAL_MspInit+0x4c>)
 80028ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028b2:	603b      	str	r3, [r7, #0]
 80028b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028b6:	bf00      	nop
 80028b8:	370c      	adds	r7, #12
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop
 80028c4:	40023800 	.word	0x40023800

080028c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b08a      	sub	sp, #40	; 0x28
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028d0:	f107 0314 	add.w	r3, r7, #20
 80028d4:	2200      	movs	r2, #0
 80028d6:	601a      	str	r2, [r3, #0]
 80028d8:	605a      	str	r2, [r3, #4]
 80028da:	609a      	str	r2, [r3, #8]
 80028dc:	60da      	str	r2, [r3, #12]
 80028de:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a19      	ldr	r2, [pc, #100]	; (800294c <HAL_I2C_MspInit+0x84>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d12b      	bne.n	8002942 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028ea:	2300      	movs	r3, #0
 80028ec:	613b      	str	r3, [r7, #16]
 80028ee:	4b18      	ldr	r3, [pc, #96]	; (8002950 <HAL_I2C_MspInit+0x88>)
 80028f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f2:	4a17      	ldr	r2, [pc, #92]	; (8002950 <HAL_I2C_MspInit+0x88>)
 80028f4:	f043 0302 	orr.w	r3, r3, #2
 80028f8:	6313      	str	r3, [r2, #48]	; 0x30
 80028fa:	4b15      	ldr	r3, [pc, #84]	; (8002950 <HAL_I2C_MspInit+0x88>)
 80028fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fe:	f003 0302 	and.w	r3, r3, #2
 8002902:	613b      	str	r3, [r7, #16]
 8002904:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002906:	23c0      	movs	r3, #192	; 0xc0
 8002908:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800290a:	2312      	movs	r3, #18
 800290c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800290e:	2300      	movs	r3, #0
 8002910:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002912:	2303      	movs	r3, #3
 8002914:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002916:	2304      	movs	r3, #4
 8002918:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800291a:	f107 0314 	add.w	r3, r7, #20
 800291e:	4619      	mov	r1, r3
 8002920:	480c      	ldr	r0, [pc, #48]	; (8002954 <HAL_I2C_MspInit+0x8c>)
 8002922:	f000 faed 	bl	8002f00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002926:	2300      	movs	r3, #0
 8002928:	60fb      	str	r3, [r7, #12]
 800292a:	4b09      	ldr	r3, [pc, #36]	; (8002950 <HAL_I2C_MspInit+0x88>)
 800292c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292e:	4a08      	ldr	r2, [pc, #32]	; (8002950 <HAL_I2C_MspInit+0x88>)
 8002930:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002934:	6413      	str	r3, [r2, #64]	; 0x40
 8002936:	4b06      	ldr	r3, [pc, #24]	; (8002950 <HAL_I2C_MspInit+0x88>)
 8002938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800293e:	60fb      	str	r3, [r7, #12]
 8002940:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002942:	bf00      	nop
 8002944:	3728      	adds	r7, #40	; 0x28
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	40005400 	.word	0x40005400
 8002950:	40023800 	.word	0x40023800
 8002954:	40020400 	.word	0x40020400

08002958 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b08a      	sub	sp, #40	; 0x28
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002960:	f107 0314 	add.w	r3, r7, #20
 8002964:	2200      	movs	r2, #0
 8002966:	601a      	str	r2, [r3, #0]
 8002968:	605a      	str	r2, [r3, #4]
 800296a:	609a      	str	r2, [r3, #8]
 800296c:	60da      	str	r2, [r3, #12]
 800296e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a19      	ldr	r2, [pc, #100]	; (80029dc <HAL_UART_MspInit+0x84>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d12b      	bne.n	80029d2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800297a:	2300      	movs	r3, #0
 800297c:	613b      	str	r3, [r7, #16]
 800297e:	4b18      	ldr	r3, [pc, #96]	; (80029e0 <HAL_UART_MspInit+0x88>)
 8002980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002982:	4a17      	ldr	r2, [pc, #92]	; (80029e0 <HAL_UART_MspInit+0x88>)
 8002984:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002988:	6413      	str	r3, [r2, #64]	; 0x40
 800298a:	4b15      	ldr	r3, [pc, #84]	; (80029e0 <HAL_UART_MspInit+0x88>)
 800298c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002992:	613b      	str	r3, [r7, #16]
 8002994:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002996:	2300      	movs	r3, #0
 8002998:	60fb      	str	r3, [r7, #12]
 800299a:	4b11      	ldr	r3, [pc, #68]	; (80029e0 <HAL_UART_MspInit+0x88>)
 800299c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299e:	4a10      	ldr	r2, [pc, #64]	; (80029e0 <HAL_UART_MspInit+0x88>)
 80029a0:	f043 0301 	orr.w	r3, r3, #1
 80029a4:	6313      	str	r3, [r2, #48]	; 0x30
 80029a6:	4b0e      	ldr	r3, [pc, #56]	; (80029e0 <HAL_UART_MspInit+0x88>)
 80029a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029aa:	f003 0301 	and.w	r3, r3, #1
 80029ae:	60fb      	str	r3, [r7, #12]
 80029b0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80029b2:	230c      	movs	r3, #12
 80029b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029b6:	2302      	movs	r3, #2
 80029b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ba:	2300      	movs	r3, #0
 80029bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029be:	2303      	movs	r3, #3
 80029c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80029c2:	2307      	movs	r3, #7
 80029c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029c6:	f107 0314 	add.w	r3, r7, #20
 80029ca:	4619      	mov	r1, r3
 80029cc:	4805      	ldr	r0, [pc, #20]	; (80029e4 <HAL_UART_MspInit+0x8c>)
 80029ce:	f000 fa97 	bl	8002f00 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80029d2:	bf00      	nop
 80029d4:	3728      	adds	r7, #40	; 0x28
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	40004400 	.word	0x40004400
 80029e0:	40023800 	.word	0x40023800
 80029e4:	40020000 	.word	0x40020000

080029e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029e8:	b480      	push	{r7}
 80029ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80029ec:	e7fe      	b.n	80029ec <NMI_Handler+0x4>

080029ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029ee:	b480      	push	{r7}
 80029f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029f2:	e7fe      	b.n	80029f2 <HardFault_Handler+0x4>

080029f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029f4:	b480      	push	{r7}
 80029f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029f8:	e7fe      	b.n	80029f8 <MemManage_Handler+0x4>

080029fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029fa:	b480      	push	{r7}
 80029fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029fe:	e7fe      	b.n	80029fe <BusFault_Handler+0x4>

08002a00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a00:	b480      	push	{r7}
 8002a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a04:	e7fe      	b.n	8002a04 <UsageFault_Handler+0x4>

08002a06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a06:	b480      	push	{r7}
 8002a08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a0a:	bf00      	nop
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr

08002a14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a14:	b480      	push	{r7}
 8002a16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a18:	bf00      	nop
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr

08002a22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a22:	b480      	push	{r7}
 8002a24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a26:	bf00      	nop
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr

08002a30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a34:	f000 f93a 	bl	8002cac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a38:	bf00      	nop
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	af00      	add	r7, sp, #0
  return 1;
 8002a40:	2301      	movs	r3, #1
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr

08002a4c <_kill>:

int _kill(int pid, int sig)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002a56:	f003 fdcf 	bl	80065f8 <__errno>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2216      	movs	r2, #22
 8002a5e:	601a      	str	r2, [r3, #0]
  return -1;
 8002a60:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3708      	adds	r7, #8
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <_exit>:

void _exit (int status)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002a74:	f04f 31ff 	mov.w	r1, #4294967295
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f7ff ffe7 	bl	8002a4c <_kill>
  while (1) {}    /* Make sure we hang here */
 8002a7e:	e7fe      	b.n	8002a7e <_exit+0x12>

08002a80 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b086      	sub	sp, #24
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	60b9      	str	r1, [r7, #8]
 8002a8a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	617b      	str	r3, [r7, #20]
 8002a90:	e00a      	b.n	8002aa8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002a92:	f3af 8000 	nop.w
 8002a96:	4601      	mov	r1, r0
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	1c5a      	adds	r2, r3, #1
 8002a9c:	60ba      	str	r2, [r7, #8]
 8002a9e:	b2ca      	uxtb	r2, r1
 8002aa0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	3301      	adds	r3, #1
 8002aa6:	617b      	str	r3, [r7, #20]
 8002aa8:	697a      	ldr	r2, [r7, #20]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	dbf0      	blt.n	8002a92 <_read+0x12>
  }

  return len;
 8002ab0:	687b      	ldr	r3, [r7, #4]
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3718      	adds	r7, #24
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}

08002aba <_close>:
  }
  return len;
}

int _close(int file)
{
 8002aba:	b480      	push	{r7}
 8002abc:	b083      	sub	sp, #12
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002ac2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	370c      	adds	r7, #12
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr

08002ad2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ad2:	b480      	push	{r7}
 8002ad4:	b083      	sub	sp, #12
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
 8002ada:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ae2:	605a      	str	r2, [r3, #4]
  return 0;
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	370c      	adds	r7, #12
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr

08002af2 <_isatty>:

int _isatty(int file)
{
 8002af2:	b480      	push	{r7}
 8002af4:	b083      	sub	sp, #12
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002afa:	2301      	movs	r3, #1
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	370c      	adds	r7, #12
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr

08002b08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b085      	sub	sp, #20
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	60b9      	str	r1, [r7, #8]
 8002b12:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3714      	adds	r7, #20
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr
	...

08002b24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b086      	sub	sp, #24
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b2c:	4a14      	ldr	r2, [pc, #80]	; (8002b80 <_sbrk+0x5c>)
 8002b2e:	4b15      	ldr	r3, [pc, #84]	; (8002b84 <_sbrk+0x60>)
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b38:	4b13      	ldr	r3, [pc, #76]	; (8002b88 <_sbrk+0x64>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d102      	bne.n	8002b46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b40:	4b11      	ldr	r3, [pc, #68]	; (8002b88 <_sbrk+0x64>)
 8002b42:	4a12      	ldr	r2, [pc, #72]	; (8002b8c <_sbrk+0x68>)
 8002b44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b46:	4b10      	ldr	r3, [pc, #64]	; (8002b88 <_sbrk+0x64>)
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4413      	add	r3, r2
 8002b4e:	693a      	ldr	r2, [r7, #16]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d207      	bcs.n	8002b64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b54:	f003 fd50 	bl	80065f8 <__errno>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	220c      	movs	r2, #12
 8002b5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b62:	e009      	b.n	8002b78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b64:	4b08      	ldr	r3, [pc, #32]	; (8002b88 <_sbrk+0x64>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b6a:	4b07      	ldr	r3, [pc, #28]	; (8002b88 <_sbrk+0x64>)
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4413      	add	r3, r2
 8002b72:	4a05      	ldr	r2, [pc, #20]	; (8002b88 <_sbrk+0x64>)
 8002b74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b76:	68fb      	ldr	r3, [r7, #12]
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3718      	adds	r7, #24
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	20010000 	.word	0x20010000
 8002b84:	00000400 	.word	0x00000400
 8002b88:	20000380 	.word	0x20000380
 8002b8c:	200004d8 	.word	0x200004d8

08002b90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b90:	b480      	push	{r7}
 8002b92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b94:	4b06      	ldr	r3, [pc, #24]	; (8002bb0 <SystemInit+0x20>)
 8002b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b9a:	4a05      	ldr	r2, [pc, #20]	; (8002bb0 <SystemInit+0x20>)
 8002b9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ba0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ba4:	bf00      	nop
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop
 8002bb0:	e000ed00 	.word	0xe000ed00

08002bb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002bb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002bec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002bb8:	480d      	ldr	r0, [pc, #52]	; (8002bf0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002bba:	490e      	ldr	r1, [pc, #56]	; (8002bf4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002bbc:	4a0e      	ldr	r2, [pc, #56]	; (8002bf8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002bbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bc0:	e002      	b.n	8002bc8 <LoopCopyDataInit>

08002bc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bc6:	3304      	adds	r3, #4

08002bc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bcc:	d3f9      	bcc.n	8002bc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bce:	4a0b      	ldr	r2, [pc, #44]	; (8002bfc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002bd0:	4c0b      	ldr	r4, [pc, #44]	; (8002c00 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002bd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bd4:	e001      	b.n	8002bda <LoopFillZerobss>

08002bd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bd8:	3204      	adds	r2, #4

08002bda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bdc:	d3fb      	bcc.n	8002bd6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002bde:	f7ff ffd7 	bl	8002b90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002be2:	f003 fd0f 	bl	8006604 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002be6:	f7ff faf9 	bl	80021dc <main>
  bx  lr    
 8002bea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002bec:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002bf0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bf4:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002bf8:	0800ac20 	.word	0x0800ac20
  ldr r2, =_sbss
 8002bfc:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002c00:	200004d4 	.word	0x200004d4

08002c04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c04:	e7fe      	b.n	8002c04 <ADC_IRQHandler>
	...

08002c08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c0c:	4b0e      	ldr	r3, [pc, #56]	; (8002c48 <HAL_Init+0x40>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a0d      	ldr	r2, [pc, #52]	; (8002c48 <HAL_Init+0x40>)
 8002c12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c18:	4b0b      	ldr	r3, [pc, #44]	; (8002c48 <HAL_Init+0x40>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a0a      	ldr	r2, [pc, #40]	; (8002c48 <HAL_Init+0x40>)
 8002c1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c24:	4b08      	ldr	r3, [pc, #32]	; (8002c48 <HAL_Init+0x40>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a07      	ldr	r2, [pc, #28]	; (8002c48 <HAL_Init+0x40>)
 8002c2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c30:	2003      	movs	r0, #3
 8002c32:	f000 f931 	bl	8002e98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c36:	200f      	movs	r0, #15
 8002c38:	f000 f808 	bl	8002c4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c3c:	f7ff fe1c 	bl	8002878 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	40023c00 	.word	0x40023c00

08002c4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c54:	4b12      	ldr	r3, [pc, #72]	; (8002ca0 <HAL_InitTick+0x54>)
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	4b12      	ldr	r3, [pc, #72]	; (8002ca4 <HAL_InitTick+0x58>)
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c62:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c66:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f000 f93b 	bl	8002ee6 <HAL_SYSTICK_Config>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d001      	beq.n	8002c7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e00e      	b.n	8002c98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2b0f      	cmp	r3, #15
 8002c7e:	d80a      	bhi.n	8002c96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c80:	2200      	movs	r2, #0
 8002c82:	6879      	ldr	r1, [r7, #4]
 8002c84:	f04f 30ff 	mov.w	r0, #4294967295
 8002c88:	f000 f911 	bl	8002eae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c8c:	4a06      	ldr	r2, [pc, #24]	; (8002ca8 <HAL_InitTick+0x5c>)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c92:	2300      	movs	r3, #0
 8002c94:	e000      	b.n	8002c98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3708      	adds	r7, #8
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	20000000 	.word	0x20000000
 8002ca4:	20000008 	.word	0x20000008
 8002ca8:	20000004 	.word	0x20000004

08002cac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cac:	b480      	push	{r7}
 8002cae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002cb0:	4b06      	ldr	r3, [pc, #24]	; (8002ccc <HAL_IncTick+0x20>)
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	4b06      	ldr	r3, [pc, #24]	; (8002cd0 <HAL_IncTick+0x24>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4413      	add	r3, r2
 8002cbc:	4a04      	ldr	r2, [pc, #16]	; (8002cd0 <HAL_IncTick+0x24>)
 8002cbe:	6013      	str	r3, [r2, #0]
}
 8002cc0:	bf00      	nop
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr
 8002cca:	bf00      	nop
 8002ccc:	20000008 	.word	0x20000008
 8002cd0:	20000384 	.word	0x20000384

08002cd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	af00      	add	r7, sp, #0
  return uwTick;
 8002cd8:	4b03      	ldr	r3, [pc, #12]	; (8002ce8 <HAL_GetTick+0x14>)
 8002cda:	681b      	ldr	r3, [r3, #0]
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop
 8002ce8:	20000384 	.word	0x20000384

08002cec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b084      	sub	sp, #16
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002cf4:	f7ff ffee 	bl	8002cd4 <HAL_GetTick>
 8002cf8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d04:	d005      	beq.n	8002d12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d06:	4b0a      	ldr	r3, [pc, #40]	; (8002d30 <HAL_Delay+0x44>)
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	4413      	add	r3, r2
 8002d10:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d12:	bf00      	nop
 8002d14:	f7ff ffde 	bl	8002cd4 <HAL_GetTick>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	68fa      	ldr	r2, [r7, #12]
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d8f7      	bhi.n	8002d14 <HAL_Delay+0x28>
  {
  }
}
 8002d24:	bf00      	nop
 8002d26:	bf00      	nop
 8002d28:	3710      	adds	r7, #16
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	20000008 	.word	0x20000008

08002d34 <__NVIC_SetPriorityGrouping>:
{
 8002d34:	b480      	push	{r7}
 8002d36:	b085      	sub	sp, #20
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f003 0307 	and.w	r3, r3, #7
 8002d42:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d44:	4b0c      	ldr	r3, [pc, #48]	; (8002d78 <__NVIC_SetPriorityGrouping+0x44>)
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d4a:	68ba      	ldr	r2, [r7, #8]
 8002d4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d50:	4013      	ands	r3, r2
 8002d52:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d66:	4a04      	ldr	r2, [pc, #16]	; (8002d78 <__NVIC_SetPriorityGrouping+0x44>)
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	60d3      	str	r3, [r2, #12]
}
 8002d6c:	bf00      	nop
 8002d6e:	3714      	adds	r7, #20
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr
 8002d78:	e000ed00 	.word	0xe000ed00

08002d7c <__NVIC_GetPriorityGrouping>:
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d80:	4b04      	ldr	r3, [pc, #16]	; (8002d94 <__NVIC_GetPriorityGrouping+0x18>)
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	0a1b      	lsrs	r3, r3, #8
 8002d86:	f003 0307 	and.w	r3, r3, #7
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr
 8002d94:	e000ed00 	.word	0xe000ed00

08002d98 <__NVIC_SetPriority>:
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	4603      	mov	r3, r0
 8002da0:	6039      	str	r1, [r7, #0]
 8002da2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002da4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	db0a      	blt.n	8002dc2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	b2da      	uxtb	r2, r3
 8002db0:	490c      	ldr	r1, [pc, #48]	; (8002de4 <__NVIC_SetPriority+0x4c>)
 8002db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002db6:	0112      	lsls	r2, r2, #4
 8002db8:	b2d2      	uxtb	r2, r2
 8002dba:	440b      	add	r3, r1
 8002dbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002dc0:	e00a      	b.n	8002dd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	b2da      	uxtb	r2, r3
 8002dc6:	4908      	ldr	r1, [pc, #32]	; (8002de8 <__NVIC_SetPriority+0x50>)
 8002dc8:	79fb      	ldrb	r3, [r7, #7]
 8002dca:	f003 030f 	and.w	r3, r3, #15
 8002dce:	3b04      	subs	r3, #4
 8002dd0:	0112      	lsls	r2, r2, #4
 8002dd2:	b2d2      	uxtb	r2, r2
 8002dd4:	440b      	add	r3, r1
 8002dd6:	761a      	strb	r2, [r3, #24]
}
 8002dd8:	bf00      	nop
 8002dda:	370c      	adds	r7, #12
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr
 8002de4:	e000e100 	.word	0xe000e100
 8002de8:	e000ed00 	.word	0xe000ed00

08002dec <NVIC_EncodePriority>:
{
 8002dec:	b480      	push	{r7}
 8002dee:	b089      	sub	sp, #36	; 0x24
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	60b9      	str	r1, [r7, #8]
 8002df6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f003 0307 	and.w	r3, r3, #7
 8002dfe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	f1c3 0307 	rsb	r3, r3, #7
 8002e06:	2b04      	cmp	r3, #4
 8002e08:	bf28      	it	cs
 8002e0a:	2304      	movcs	r3, #4
 8002e0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	3304      	adds	r3, #4
 8002e12:	2b06      	cmp	r3, #6
 8002e14:	d902      	bls.n	8002e1c <NVIC_EncodePriority+0x30>
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	3b03      	subs	r3, #3
 8002e1a:	e000      	b.n	8002e1e <NVIC_EncodePriority+0x32>
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e20:	f04f 32ff 	mov.w	r2, #4294967295
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2a:	43da      	mvns	r2, r3
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	401a      	ands	r2, r3
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e34:	f04f 31ff 	mov.w	r1, #4294967295
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e3e:	43d9      	mvns	r1, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e44:	4313      	orrs	r3, r2
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3724      	adds	r7, #36	; 0x24
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
	...

08002e54 <SysTick_Config>:
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	3b01      	subs	r3, #1
 8002e60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e64:	d301      	bcc.n	8002e6a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002e66:	2301      	movs	r3, #1
 8002e68:	e00f      	b.n	8002e8a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e6a:	4a0a      	ldr	r2, [pc, #40]	; (8002e94 <SysTick_Config+0x40>)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	3b01      	subs	r3, #1
 8002e70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e72:	210f      	movs	r1, #15
 8002e74:	f04f 30ff 	mov.w	r0, #4294967295
 8002e78:	f7ff ff8e 	bl	8002d98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e7c:	4b05      	ldr	r3, [pc, #20]	; (8002e94 <SysTick_Config+0x40>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e82:	4b04      	ldr	r3, [pc, #16]	; (8002e94 <SysTick_Config+0x40>)
 8002e84:	2207      	movs	r2, #7
 8002e86:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002e88:	2300      	movs	r3, #0
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3708      	adds	r7, #8
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	e000e010 	.word	0xe000e010

08002e98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f7ff ff47 	bl	8002d34 <__NVIC_SetPriorityGrouping>
}
 8002ea6:	bf00      	nop
 8002ea8:	3708      	adds	r7, #8
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}

08002eae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002eae:	b580      	push	{r7, lr}
 8002eb0:	b086      	sub	sp, #24
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	60b9      	str	r1, [r7, #8]
 8002eb8:	607a      	str	r2, [r7, #4]
 8002eba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ec0:	f7ff ff5c 	bl	8002d7c <__NVIC_GetPriorityGrouping>
 8002ec4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	68b9      	ldr	r1, [r7, #8]
 8002eca:	6978      	ldr	r0, [r7, #20]
 8002ecc:	f7ff ff8e 	bl	8002dec <NVIC_EncodePriority>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ed6:	4611      	mov	r1, r2
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7ff ff5d 	bl	8002d98 <__NVIC_SetPriority>
}
 8002ede:	bf00      	nop
 8002ee0:	3718      	adds	r7, #24
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}

08002ee6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ee6:	b580      	push	{r7, lr}
 8002ee8:	b082      	sub	sp, #8
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f7ff ffb0 	bl	8002e54 <SysTick_Config>
 8002ef4:	4603      	mov	r3, r0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3708      	adds	r7, #8
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
	...

08002f00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b089      	sub	sp, #36	; 0x24
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f12:	2300      	movs	r3, #0
 8002f14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f16:	2300      	movs	r3, #0
 8002f18:	61fb      	str	r3, [r7, #28]
 8002f1a:	e159      	b.n	80031d0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	fa02 f303 	lsl.w	r3, r2, r3
 8002f24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	697a      	ldr	r2, [r7, #20]
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f30:	693a      	ldr	r2, [r7, #16]
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	f040 8148 	bne.w	80031ca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f003 0303 	and.w	r3, r3, #3
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d005      	beq.n	8002f52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d130      	bne.n	8002fb4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	005b      	lsls	r3, r3, #1
 8002f5c:	2203      	movs	r2, #3
 8002f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f62:	43db      	mvns	r3, r3
 8002f64:	69ba      	ldr	r2, [r7, #24]
 8002f66:	4013      	ands	r3, r2
 8002f68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	68da      	ldr	r2, [r3, #12]
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	005b      	lsls	r3, r3, #1
 8002f72:	fa02 f303 	lsl.w	r3, r2, r3
 8002f76:	69ba      	ldr	r2, [r7, #24]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	69ba      	ldr	r2, [r7, #24]
 8002f80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f88:	2201      	movs	r2, #1
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f90:	43db      	mvns	r3, r3
 8002f92:	69ba      	ldr	r2, [r7, #24]
 8002f94:	4013      	ands	r3, r2
 8002f96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	091b      	lsrs	r3, r3, #4
 8002f9e:	f003 0201 	and.w	r2, r3, #1
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa8:	69ba      	ldr	r2, [r7, #24]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	69ba      	ldr	r2, [r7, #24]
 8002fb2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f003 0303 	and.w	r3, r3, #3
 8002fbc:	2b03      	cmp	r3, #3
 8002fbe:	d017      	beq.n	8002ff0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	005b      	lsls	r3, r3, #1
 8002fca:	2203      	movs	r2, #3
 8002fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd0:	43db      	mvns	r3, r3
 8002fd2:	69ba      	ldr	r2, [r7, #24]
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	689a      	ldr	r2, [r3, #8]
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	005b      	lsls	r3, r3, #1
 8002fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe4:	69ba      	ldr	r2, [r7, #24]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	69ba      	ldr	r2, [r7, #24]
 8002fee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f003 0303 	and.w	r3, r3, #3
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	d123      	bne.n	8003044 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	08da      	lsrs	r2, r3, #3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	3208      	adds	r2, #8
 8003004:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003008:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	f003 0307 	and.w	r3, r3, #7
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	220f      	movs	r2, #15
 8003014:	fa02 f303 	lsl.w	r3, r2, r3
 8003018:	43db      	mvns	r3, r3
 800301a:	69ba      	ldr	r2, [r7, #24]
 800301c:	4013      	ands	r3, r2
 800301e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	691a      	ldr	r2, [r3, #16]
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	f003 0307 	and.w	r3, r3, #7
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	fa02 f303 	lsl.w	r3, r2, r3
 8003030:	69ba      	ldr	r2, [r7, #24]
 8003032:	4313      	orrs	r3, r2
 8003034:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	08da      	lsrs	r2, r3, #3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	3208      	adds	r2, #8
 800303e:	69b9      	ldr	r1, [r7, #24]
 8003040:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	005b      	lsls	r3, r3, #1
 800304e:	2203      	movs	r2, #3
 8003050:	fa02 f303 	lsl.w	r3, r2, r3
 8003054:	43db      	mvns	r3, r3
 8003056:	69ba      	ldr	r2, [r7, #24]
 8003058:	4013      	ands	r3, r2
 800305a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f003 0203 	and.w	r2, r3, #3
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	005b      	lsls	r3, r3, #1
 8003068:	fa02 f303 	lsl.w	r3, r2, r3
 800306c:	69ba      	ldr	r2, [r7, #24]
 800306e:	4313      	orrs	r3, r2
 8003070:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	69ba      	ldr	r2, [r7, #24]
 8003076:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003080:	2b00      	cmp	r3, #0
 8003082:	f000 80a2 	beq.w	80031ca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003086:	2300      	movs	r3, #0
 8003088:	60fb      	str	r3, [r7, #12]
 800308a:	4b57      	ldr	r3, [pc, #348]	; (80031e8 <HAL_GPIO_Init+0x2e8>)
 800308c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800308e:	4a56      	ldr	r2, [pc, #344]	; (80031e8 <HAL_GPIO_Init+0x2e8>)
 8003090:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003094:	6453      	str	r3, [r2, #68]	; 0x44
 8003096:	4b54      	ldr	r3, [pc, #336]	; (80031e8 <HAL_GPIO_Init+0x2e8>)
 8003098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800309a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800309e:	60fb      	str	r3, [r7, #12]
 80030a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030a2:	4a52      	ldr	r2, [pc, #328]	; (80031ec <HAL_GPIO_Init+0x2ec>)
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	089b      	lsrs	r3, r3, #2
 80030a8:	3302      	adds	r3, #2
 80030aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	f003 0303 	and.w	r3, r3, #3
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	220f      	movs	r2, #15
 80030ba:	fa02 f303 	lsl.w	r3, r2, r3
 80030be:	43db      	mvns	r3, r3
 80030c0:	69ba      	ldr	r2, [r7, #24]
 80030c2:	4013      	ands	r3, r2
 80030c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a49      	ldr	r2, [pc, #292]	; (80031f0 <HAL_GPIO_Init+0x2f0>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d019      	beq.n	8003102 <HAL_GPIO_Init+0x202>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a48      	ldr	r2, [pc, #288]	; (80031f4 <HAL_GPIO_Init+0x2f4>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d013      	beq.n	80030fe <HAL_GPIO_Init+0x1fe>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a47      	ldr	r2, [pc, #284]	; (80031f8 <HAL_GPIO_Init+0x2f8>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d00d      	beq.n	80030fa <HAL_GPIO_Init+0x1fa>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a46      	ldr	r2, [pc, #280]	; (80031fc <HAL_GPIO_Init+0x2fc>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d007      	beq.n	80030f6 <HAL_GPIO_Init+0x1f6>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a45      	ldr	r2, [pc, #276]	; (8003200 <HAL_GPIO_Init+0x300>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d101      	bne.n	80030f2 <HAL_GPIO_Init+0x1f2>
 80030ee:	2304      	movs	r3, #4
 80030f0:	e008      	b.n	8003104 <HAL_GPIO_Init+0x204>
 80030f2:	2307      	movs	r3, #7
 80030f4:	e006      	b.n	8003104 <HAL_GPIO_Init+0x204>
 80030f6:	2303      	movs	r3, #3
 80030f8:	e004      	b.n	8003104 <HAL_GPIO_Init+0x204>
 80030fa:	2302      	movs	r3, #2
 80030fc:	e002      	b.n	8003104 <HAL_GPIO_Init+0x204>
 80030fe:	2301      	movs	r3, #1
 8003100:	e000      	b.n	8003104 <HAL_GPIO_Init+0x204>
 8003102:	2300      	movs	r3, #0
 8003104:	69fa      	ldr	r2, [r7, #28]
 8003106:	f002 0203 	and.w	r2, r2, #3
 800310a:	0092      	lsls	r2, r2, #2
 800310c:	4093      	lsls	r3, r2
 800310e:	69ba      	ldr	r2, [r7, #24]
 8003110:	4313      	orrs	r3, r2
 8003112:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003114:	4935      	ldr	r1, [pc, #212]	; (80031ec <HAL_GPIO_Init+0x2ec>)
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	089b      	lsrs	r3, r3, #2
 800311a:	3302      	adds	r3, #2
 800311c:	69ba      	ldr	r2, [r7, #24]
 800311e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003122:	4b38      	ldr	r3, [pc, #224]	; (8003204 <HAL_GPIO_Init+0x304>)
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	43db      	mvns	r3, r3
 800312c:	69ba      	ldr	r2, [r7, #24]
 800312e:	4013      	ands	r3, r2
 8003130:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d003      	beq.n	8003146 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800313e:	69ba      	ldr	r2, [r7, #24]
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	4313      	orrs	r3, r2
 8003144:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003146:	4a2f      	ldr	r2, [pc, #188]	; (8003204 <HAL_GPIO_Init+0x304>)
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800314c:	4b2d      	ldr	r3, [pc, #180]	; (8003204 <HAL_GPIO_Init+0x304>)
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	43db      	mvns	r3, r3
 8003156:	69ba      	ldr	r2, [r7, #24]
 8003158:	4013      	ands	r3, r2
 800315a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003164:	2b00      	cmp	r3, #0
 8003166:	d003      	beq.n	8003170 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	4313      	orrs	r3, r2
 800316e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003170:	4a24      	ldr	r2, [pc, #144]	; (8003204 <HAL_GPIO_Init+0x304>)
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003176:	4b23      	ldr	r3, [pc, #140]	; (8003204 <HAL_GPIO_Init+0x304>)
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	43db      	mvns	r3, r3
 8003180:	69ba      	ldr	r2, [r7, #24]
 8003182:	4013      	ands	r3, r2
 8003184:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d003      	beq.n	800319a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003192:	69ba      	ldr	r2, [r7, #24]
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	4313      	orrs	r3, r2
 8003198:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800319a:	4a1a      	ldr	r2, [pc, #104]	; (8003204 <HAL_GPIO_Init+0x304>)
 800319c:	69bb      	ldr	r3, [r7, #24]
 800319e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031a0:	4b18      	ldr	r3, [pc, #96]	; (8003204 <HAL_GPIO_Init+0x304>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	43db      	mvns	r3, r3
 80031aa:	69ba      	ldr	r2, [r7, #24]
 80031ac:	4013      	ands	r3, r2
 80031ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d003      	beq.n	80031c4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80031bc:	69ba      	ldr	r2, [r7, #24]
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031c4:	4a0f      	ldr	r2, [pc, #60]	; (8003204 <HAL_GPIO_Init+0x304>)
 80031c6:	69bb      	ldr	r3, [r7, #24]
 80031c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	3301      	adds	r3, #1
 80031ce:	61fb      	str	r3, [r7, #28]
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	2b0f      	cmp	r3, #15
 80031d4:	f67f aea2 	bls.w	8002f1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80031d8:	bf00      	nop
 80031da:	bf00      	nop
 80031dc:	3724      	adds	r7, #36	; 0x24
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr
 80031e6:	bf00      	nop
 80031e8:	40023800 	.word	0x40023800
 80031ec:	40013800 	.word	0x40013800
 80031f0:	40020000 	.word	0x40020000
 80031f4:	40020400 	.word	0x40020400
 80031f8:	40020800 	.word	0x40020800
 80031fc:	40020c00 	.word	0x40020c00
 8003200:	40021000 	.word	0x40021000
 8003204:	40013c00 	.word	0x40013c00

08003208 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d101      	bne.n	800321a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e12b      	b.n	8003472 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003220:	b2db      	uxtb	r3, r3
 8003222:	2b00      	cmp	r3, #0
 8003224:	d106      	bne.n	8003234 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f7ff fb4a 	bl	80028c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2224      	movs	r2, #36	; 0x24
 8003238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f022 0201 	bic.w	r2, r2, #1
 800324a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800325a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800326a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800326c:	f001 fcea 	bl	8004c44 <HAL_RCC_GetPCLK1Freq>
 8003270:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	4a81      	ldr	r2, [pc, #516]	; (800347c <HAL_I2C_Init+0x274>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d807      	bhi.n	800328c <HAL_I2C_Init+0x84>
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	4a80      	ldr	r2, [pc, #512]	; (8003480 <HAL_I2C_Init+0x278>)
 8003280:	4293      	cmp	r3, r2
 8003282:	bf94      	ite	ls
 8003284:	2301      	movls	r3, #1
 8003286:	2300      	movhi	r3, #0
 8003288:	b2db      	uxtb	r3, r3
 800328a:	e006      	b.n	800329a <HAL_I2C_Init+0x92>
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	4a7d      	ldr	r2, [pc, #500]	; (8003484 <HAL_I2C_Init+0x27c>)
 8003290:	4293      	cmp	r3, r2
 8003292:	bf94      	ite	ls
 8003294:	2301      	movls	r3, #1
 8003296:	2300      	movhi	r3, #0
 8003298:	b2db      	uxtb	r3, r3
 800329a:	2b00      	cmp	r3, #0
 800329c:	d001      	beq.n	80032a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e0e7      	b.n	8003472 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	4a78      	ldr	r2, [pc, #480]	; (8003488 <HAL_I2C_Init+0x280>)
 80032a6:	fba2 2303 	umull	r2, r3, r2, r3
 80032aa:	0c9b      	lsrs	r3, r3, #18
 80032ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	68ba      	ldr	r2, [r7, #8]
 80032be:	430a      	orrs	r2, r1
 80032c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	6a1b      	ldr	r3, [r3, #32]
 80032c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	4a6a      	ldr	r2, [pc, #424]	; (800347c <HAL_I2C_Init+0x274>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d802      	bhi.n	80032dc <HAL_I2C_Init+0xd4>
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	3301      	adds	r3, #1
 80032da:	e009      	b.n	80032f0 <HAL_I2C_Init+0xe8>
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80032e2:	fb02 f303 	mul.w	r3, r2, r3
 80032e6:	4a69      	ldr	r2, [pc, #420]	; (800348c <HAL_I2C_Init+0x284>)
 80032e8:	fba2 2303 	umull	r2, r3, r2, r3
 80032ec:	099b      	lsrs	r3, r3, #6
 80032ee:	3301      	adds	r3, #1
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	6812      	ldr	r2, [r2, #0]
 80032f4:	430b      	orrs	r3, r1
 80032f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	69db      	ldr	r3, [r3, #28]
 80032fe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003302:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	495c      	ldr	r1, [pc, #368]	; (800347c <HAL_I2C_Init+0x274>)
 800330c:	428b      	cmp	r3, r1
 800330e:	d819      	bhi.n	8003344 <HAL_I2C_Init+0x13c>
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	1e59      	subs	r1, r3, #1
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	005b      	lsls	r3, r3, #1
 800331a:	fbb1 f3f3 	udiv	r3, r1, r3
 800331e:	1c59      	adds	r1, r3, #1
 8003320:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003324:	400b      	ands	r3, r1
 8003326:	2b00      	cmp	r3, #0
 8003328:	d00a      	beq.n	8003340 <HAL_I2C_Init+0x138>
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	1e59      	subs	r1, r3, #1
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	005b      	lsls	r3, r3, #1
 8003334:	fbb1 f3f3 	udiv	r3, r1, r3
 8003338:	3301      	adds	r3, #1
 800333a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800333e:	e051      	b.n	80033e4 <HAL_I2C_Init+0x1dc>
 8003340:	2304      	movs	r3, #4
 8003342:	e04f      	b.n	80033e4 <HAL_I2C_Init+0x1dc>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d111      	bne.n	8003370 <HAL_I2C_Init+0x168>
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	1e58      	subs	r0, r3, #1
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6859      	ldr	r1, [r3, #4]
 8003354:	460b      	mov	r3, r1
 8003356:	005b      	lsls	r3, r3, #1
 8003358:	440b      	add	r3, r1
 800335a:	fbb0 f3f3 	udiv	r3, r0, r3
 800335e:	3301      	adds	r3, #1
 8003360:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003364:	2b00      	cmp	r3, #0
 8003366:	bf0c      	ite	eq
 8003368:	2301      	moveq	r3, #1
 800336a:	2300      	movne	r3, #0
 800336c:	b2db      	uxtb	r3, r3
 800336e:	e012      	b.n	8003396 <HAL_I2C_Init+0x18e>
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	1e58      	subs	r0, r3, #1
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6859      	ldr	r1, [r3, #4]
 8003378:	460b      	mov	r3, r1
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	440b      	add	r3, r1
 800337e:	0099      	lsls	r1, r3, #2
 8003380:	440b      	add	r3, r1
 8003382:	fbb0 f3f3 	udiv	r3, r0, r3
 8003386:	3301      	adds	r3, #1
 8003388:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800338c:	2b00      	cmp	r3, #0
 800338e:	bf0c      	ite	eq
 8003390:	2301      	moveq	r3, #1
 8003392:	2300      	movne	r3, #0
 8003394:	b2db      	uxtb	r3, r3
 8003396:	2b00      	cmp	r3, #0
 8003398:	d001      	beq.n	800339e <HAL_I2C_Init+0x196>
 800339a:	2301      	movs	r3, #1
 800339c:	e022      	b.n	80033e4 <HAL_I2C_Init+0x1dc>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d10e      	bne.n	80033c4 <HAL_I2C_Init+0x1bc>
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	1e58      	subs	r0, r3, #1
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6859      	ldr	r1, [r3, #4]
 80033ae:	460b      	mov	r3, r1
 80033b0:	005b      	lsls	r3, r3, #1
 80033b2:	440b      	add	r3, r1
 80033b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80033b8:	3301      	adds	r3, #1
 80033ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033c2:	e00f      	b.n	80033e4 <HAL_I2C_Init+0x1dc>
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	1e58      	subs	r0, r3, #1
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6859      	ldr	r1, [r3, #4]
 80033cc:	460b      	mov	r3, r1
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	440b      	add	r3, r1
 80033d2:	0099      	lsls	r1, r3, #2
 80033d4:	440b      	add	r3, r1
 80033d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80033da:	3301      	adds	r3, #1
 80033dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80033e4:	6879      	ldr	r1, [r7, #4]
 80033e6:	6809      	ldr	r1, [r1, #0]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	69da      	ldr	r2, [r3, #28]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6a1b      	ldr	r3, [r3, #32]
 80033fe:	431a      	orrs	r2, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	430a      	orrs	r2, r1
 8003406:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003412:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	6911      	ldr	r1, [r2, #16]
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	68d2      	ldr	r2, [r2, #12]
 800341e:	4311      	orrs	r1, r2
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	6812      	ldr	r2, [r2, #0]
 8003424:	430b      	orrs	r3, r1
 8003426:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	695a      	ldr	r2, [r3, #20]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	699b      	ldr	r3, [r3, #24]
 800343a:	431a      	orrs	r2, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	430a      	orrs	r2, r1
 8003442:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f042 0201 	orr.w	r2, r2, #1
 8003452:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2220      	movs	r2, #32
 800345e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2200      	movs	r2, #0
 800346c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003470:	2300      	movs	r3, #0
}
 8003472:	4618      	mov	r0, r3
 8003474:	3710      	adds	r7, #16
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	000186a0 	.word	0x000186a0
 8003480:	001e847f 	.word	0x001e847f
 8003484:	003d08ff 	.word	0x003d08ff
 8003488:	431bde83 	.word	0x431bde83
 800348c:	10624dd3 	.word	0x10624dd3

08003490 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b088      	sub	sp, #32
 8003494:	af02      	add	r7, sp, #8
 8003496:	60f8      	str	r0, [r7, #12]
 8003498:	4608      	mov	r0, r1
 800349a:	4611      	mov	r1, r2
 800349c:	461a      	mov	r2, r3
 800349e:	4603      	mov	r3, r0
 80034a0:	817b      	strh	r3, [r7, #10]
 80034a2:	460b      	mov	r3, r1
 80034a4:	813b      	strh	r3, [r7, #8]
 80034a6:	4613      	mov	r3, r2
 80034a8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80034aa:	f7ff fc13 	bl	8002cd4 <HAL_GetTick>
 80034ae:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	2b20      	cmp	r3, #32
 80034ba:	f040 80d9 	bne.w	8003670 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	9300      	str	r3, [sp, #0]
 80034c2:	2319      	movs	r3, #25
 80034c4:	2201      	movs	r2, #1
 80034c6:	496d      	ldr	r1, [pc, #436]	; (800367c <HAL_I2C_Mem_Write+0x1ec>)
 80034c8:	68f8      	ldr	r0, [r7, #12]
 80034ca:	f000 fdad 	bl	8004028 <I2C_WaitOnFlagUntilTimeout>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d001      	beq.n	80034d8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80034d4:	2302      	movs	r3, #2
 80034d6:	e0cc      	b.n	8003672 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d101      	bne.n	80034e6 <HAL_I2C_Mem_Write+0x56>
 80034e2:	2302      	movs	r3, #2
 80034e4:	e0c5      	b.n	8003672 <HAL_I2C_Mem_Write+0x1e2>
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2201      	movs	r2, #1
 80034ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0301 	and.w	r3, r3, #1
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d007      	beq.n	800350c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f042 0201 	orr.w	r2, r2, #1
 800350a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800351a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2221      	movs	r2, #33	; 0x21
 8003520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2240      	movs	r2, #64	; 0x40
 8003528:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2200      	movs	r2, #0
 8003530:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	6a3a      	ldr	r2, [r7, #32]
 8003536:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800353c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003542:	b29a      	uxth	r2, r3
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	4a4d      	ldr	r2, [pc, #308]	; (8003680 <HAL_I2C_Mem_Write+0x1f0>)
 800354c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800354e:	88f8      	ldrh	r0, [r7, #6]
 8003550:	893a      	ldrh	r2, [r7, #8]
 8003552:	8979      	ldrh	r1, [r7, #10]
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	9301      	str	r3, [sp, #4]
 8003558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800355a:	9300      	str	r3, [sp, #0]
 800355c:	4603      	mov	r3, r0
 800355e:	68f8      	ldr	r0, [r7, #12]
 8003560:	f000 fbe4 	bl	8003d2c <I2C_RequestMemoryWrite>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d052      	beq.n	8003610 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e081      	b.n	8003672 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800356e:	697a      	ldr	r2, [r7, #20]
 8003570:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003572:	68f8      	ldr	r0, [r7, #12]
 8003574:	f000 fe2e 	bl	80041d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d00d      	beq.n	800359a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003582:	2b04      	cmp	r3, #4
 8003584:	d107      	bne.n	8003596 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003594:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e06b      	b.n	8003672 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359e:	781a      	ldrb	r2, [r3, #0]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035aa:	1c5a      	adds	r2, r3, #1
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035b4:	3b01      	subs	r3, #1
 80035b6:	b29a      	uxth	r2, r3
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	3b01      	subs	r3, #1
 80035c4:	b29a      	uxth	r2, r3
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	695b      	ldr	r3, [r3, #20]
 80035d0:	f003 0304 	and.w	r3, r3, #4
 80035d4:	2b04      	cmp	r3, #4
 80035d6:	d11b      	bne.n	8003610 <HAL_I2C_Mem_Write+0x180>
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d017      	beq.n	8003610 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e4:	781a      	ldrb	r2, [r3, #0]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f0:	1c5a      	adds	r2, r3, #1
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035fa:	3b01      	subs	r3, #1
 80035fc:	b29a      	uxth	r2, r3
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003606:	b29b      	uxth	r3, r3
 8003608:	3b01      	subs	r3, #1
 800360a:	b29a      	uxth	r2, r3
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003614:	2b00      	cmp	r3, #0
 8003616:	d1aa      	bne.n	800356e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003618:	697a      	ldr	r2, [r7, #20]
 800361a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800361c:	68f8      	ldr	r0, [r7, #12]
 800361e:	f000 fe1a 	bl	8004256 <I2C_WaitOnBTFFlagUntilTimeout>
 8003622:	4603      	mov	r3, r0
 8003624:	2b00      	cmp	r3, #0
 8003626:	d00d      	beq.n	8003644 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362c:	2b04      	cmp	r3, #4
 800362e:	d107      	bne.n	8003640 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800363e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e016      	b.n	8003672 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003652:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2220      	movs	r2, #32
 8003658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2200      	movs	r2, #0
 8003660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2200      	movs	r2, #0
 8003668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800366c:	2300      	movs	r3, #0
 800366e:	e000      	b.n	8003672 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003670:	2302      	movs	r3, #2
  }
}
 8003672:	4618      	mov	r0, r3
 8003674:	3718      	adds	r7, #24
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	00100002 	.word	0x00100002
 8003680:	ffff0000 	.word	0xffff0000

08003684 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b08c      	sub	sp, #48	; 0x30
 8003688:	af02      	add	r7, sp, #8
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	4608      	mov	r0, r1
 800368e:	4611      	mov	r1, r2
 8003690:	461a      	mov	r2, r3
 8003692:	4603      	mov	r3, r0
 8003694:	817b      	strh	r3, [r7, #10]
 8003696:	460b      	mov	r3, r1
 8003698:	813b      	strh	r3, [r7, #8]
 800369a:	4613      	mov	r3, r2
 800369c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800369e:	f7ff fb19 	bl	8002cd4 <HAL_GetTick>
 80036a2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	2b20      	cmp	r3, #32
 80036ae:	f040 8208 	bne.w	8003ac2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80036b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b4:	9300      	str	r3, [sp, #0]
 80036b6:	2319      	movs	r3, #25
 80036b8:	2201      	movs	r2, #1
 80036ba:	497b      	ldr	r1, [pc, #492]	; (80038a8 <HAL_I2C_Mem_Read+0x224>)
 80036bc:	68f8      	ldr	r0, [r7, #12]
 80036be:	f000 fcb3 	bl	8004028 <I2C_WaitOnFlagUntilTimeout>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d001      	beq.n	80036cc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80036c8:	2302      	movs	r3, #2
 80036ca:	e1fb      	b.n	8003ac4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d101      	bne.n	80036da <HAL_I2C_Mem_Read+0x56>
 80036d6:	2302      	movs	r3, #2
 80036d8:	e1f4      	b.n	8003ac4 <HAL_I2C_Mem_Read+0x440>
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2201      	movs	r2, #1
 80036de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0301 	and.w	r3, r3, #1
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d007      	beq.n	8003700 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f042 0201 	orr.w	r2, r2, #1
 80036fe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800370e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2222      	movs	r2, #34	; 0x22
 8003714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2240      	movs	r2, #64	; 0x40
 800371c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2200      	movs	r2, #0
 8003724:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800372a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003730:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003736:	b29a      	uxth	r2, r3
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	4a5b      	ldr	r2, [pc, #364]	; (80038ac <HAL_I2C_Mem_Read+0x228>)
 8003740:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003742:	88f8      	ldrh	r0, [r7, #6]
 8003744:	893a      	ldrh	r2, [r7, #8]
 8003746:	8979      	ldrh	r1, [r7, #10]
 8003748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374a:	9301      	str	r3, [sp, #4]
 800374c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800374e:	9300      	str	r3, [sp, #0]
 8003750:	4603      	mov	r3, r0
 8003752:	68f8      	ldr	r0, [r7, #12]
 8003754:	f000 fb80 	bl	8003e58 <I2C_RequestMemoryRead>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d001      	beq.n	8003762 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e1b0      	b.n	8003ac4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003766:	2b00      	cmp	r3, #0
 8003768:	d113      	bne.n	8003792 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800376a:	2300      	movs	r3, #0
 800376c:	623b      	str	r3, [r7, #32]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	695b      	ldr	r3, [r3, #20]
 8003774:	623b      	str	r3, [r7, #32]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	699b      	ldr	r3, [r3, #24]
 800377c:	623b      	str	r3, [r7, #32]
 800377e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800378e:	601a      	str	r2, [r3, #0]
 8003790:	e184      	b.n	8003a9c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003796:	2b01      	cmp	r3, #1
 8003798:	d11b      	bne.n	80037d2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037aa:	2300      	movs	r3, #0
 80037ac:	61fb      	str	r3, [r7, #28]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	695b      	ldr	r3, [r3, #20]
 80037b4:	61fb      	str	r3, [r7, #28]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	699b      	ldr	r3, [r3, #24]
 80037bc:	61fb      	str	r3, [r7, #28]
 80037be:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037ce:	601a      	str	r2, [r3, #0]
 80037d0:	e164      	b.n	8003a9c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d11b      	bne.n	8003812 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037e8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037fa:	2300      	movs	r3, #0
 80037fc:	61bb      	str	r3, [r7, #24]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	695b      	ldr	r3, [r3, #20]
 8003804:	61bb      	str	r3, [r7, #24]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	699b      	ldr	r3, [r3, #24]
 800380c:	61bb      	str	r3, [r7, #24]
 800380e:	69bb      	ldr	r3, [r7, #24]
 8003810:	e144      	b.n	8003a9c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003812:	2300      	movs	r3, #0
 8003814:	617b      	str	r3, [r7, #20]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	695b      	ldr	r3, [r3, #20]
 800381c:	617b      	str	r3, [r7, #20]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	699b      	ldr	r3, [r3, #24]
 8003824:	617b      	str	r3, [r7, #20]
 8003826:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003828:	e138      	b.n	8003a9c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800382e:	2b03      	cmp	r3, #3
 8003830:	f200 80f1 	bhi.w	8003a16 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003838:	2b01      	cmp	r3, #1
 800383a:	d123      	bne.n	8003884 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800383c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800383e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003840:	68f8      	ldr	r0, [r7, #12]
 8003842:	f000 fd49 	bl	80042d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d001      	beq.n	8003850 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e139      	b.n	8003ac4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	691a      	ldr	r2, [r3, #16]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385a:	b2d2      	uxtb	r2, r2
 800385c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003862:	1c5a      	adds	r2, r3, #1
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800386c:	3b01      	subs	r3, #1
 800386e:	b29a      	uxth	r2, r3
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003878:	b29b      	uxth	r3, r3
 800387a:	3b01      	subs	r3, #1
 800387c:	b29a      	uxth	r2, r3
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003882:	e10b      	b.n	8003a9c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003888:	2b02      	cmp	r3, #2
 800388a:	d14e      	bne.n	800392a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800388c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388e:	9300      	str	r3, [sp, #0]
 8003890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003892:	2200      	movs	r2, #0
 8003894:	4906      	ldr	r1, [pc, #24]	; (80038b0 <HAL_I2C_Mem_Read+0x22c>)
 8003896:	68f8      	ldr	r0, [r7, #12]
 8003898:	f000 fbc6 	bl	8004028 <I2C_WaitOnFlagUntilTimeout>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d008      	beq.n	80038b4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e10e      	b.n	8003ac4 <HAL_I2C_Mem_Read+0x440>
 80038a6:	bf00      	nop
 80038a8:	00100002 	.word	0x00100002
 80038ac:	ffff0000 	.word	0xffff0000
 80038b0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	691a      	ldr	r2, [r3, #16]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ce:	b2d2      	uxtb	r2, r2
 80038d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d6:	1c5a      	adds	r2, r3, #1
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038e0:	3b01      	subs	r3, #1
 80038e2:	b29a      	uxth	r2, r3
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	3b01      	subs	r3, #1
 80038f0:	b29a      	uxth	r2, r3
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	691a      	ldr	r2, [r3, #16]
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003900:	b2d2      	uxtb	r2, r2
 8003902:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003908:	1c5a      	adds	r2, r3, #1
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003912:	3b01      	subs	r3, #1
 8003914:	b29a      	uxth	r2, r3
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800391e:	b29b      	uxth	r3, r3
 8003920:	3b01      	subs	r3, #1
 8003922:	b29a      	uxth	r2, r3
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003928:	e0b8      	b.n	8003a9c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800392a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392c:	9300      	str	r3, [sp, #0]
 800392e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003930:	2200      	movs	r2, #0
 8003932:	4966      	ldr	r1, [pc, #408]	; (8003acc <HAL_I2C_Mem_Read+0x448>)
 8003934:	68f8      	ldr	r0, [r7, #12]
 8003936:	f000 fb77 	bl	8004028 <I2C_WaitOnFlagUntilTimeout>
 800393a:	4603      	mov	r3, r0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d001      	beq.n	8003944 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	e0bf      	b.n	8003ac4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003952:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	691a      	ldr	r2, [r3, #16]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395e:	b2d2      	uxtb	r2, r2
 8003960:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003966:	1c5a      	adds	r2, r3, #1
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003970:	3b01      	subs	r3, #1
 8003972:	b29a      	uxth	r2, r3
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800397c:	b29b      	uxth	r3, r3
 800397e:	3b01      	subs	r3, #1
 8003980:	b29a      	uxth	r2, r3
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003988:	9300      	str	r3, [sp, #0]
 800398a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800398c:	2200      	movs	r2, #0
 800398e:	494f      	ldr	r1, [pc, #316]	; (8003acc <HAL_I2C_Mem_Read+0x448>)
 8003990:	68f8      	ldr	r0, [r7, #12]
 8003992:	f000 fb49 	bl	8004028 <I2C_WaitOnFlagUntilTimeout>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d001      	beq.n	80039a0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e091      	b.n	8003ac4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	691a      	ldr	r2, [r3, #16]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ba:	b2d2      	uxtb	r2, r2
 80039bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c2:	1c5a      	adds	r2, r3, #1
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039cc:	3b01      	subs	r3, #1
 80039ce:	b29a      	uxth	r2, r3
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039d8:	b29b      	uxth	r3, r3
 80039da:	3b01      	subs	r3, #1
 80039dc:	b29a      	uxth	r2, r3
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	691a      	ldr	r2, [r3, #16]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ec:	b2d2      	uxtb	r2, r2
 80039ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f4:	1c5a      	adds	r2, r3, #1
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039fe:	3b01      	subs	r3, #1
 8003a00:	b29a      	uxth	r2, r3
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	3b01      	subs	r3, #1
 8003a0e:	b29a      	uxth	r2, r3
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003a14:	e042      	b.n	8003a9c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a18:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003a1a:	68f8      	ldr	r0, [r7, #12]
 8003a1c:	f000 fc5c 	bl	80042d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d001      	beq.n	8003a2a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e04c      	b.n	8003ac4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	691a      	ldr	r2, [r3, #16]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a34:	b2d2      	uxtb	r2, r2
 8003a36:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3c:	1c5a      	adds	r2, r3, #1
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a46:	3b01      	subs	r3, #1
 8003a48:	b29a      	uxth	r2, r3
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	3b01      	subs	r3, #1
 8003a56:	b29a      	uxth	r2, r3
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	695b      	ldr	r3, [r3, #20]
 8003a62:	f003 0304 	and.w	r3, r3, #4
 8003a66:	2b04      	cmp	r3, #4
 8003a68:	d118      	bne.n	8003a9c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	691a      	ldr	r2, [r3, #16]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a74:	b2d2      	uxtb	r2, r2
 8003a76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7c:	1c5a      	adds	r2, r3, #1
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a86:	3b01      	subs	r3, #1
 8003a88:	b29a      	uxth	r2, r3
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	3b01      	subs	r3, #1
 8003a96:	b29a      	uxth	r2, r3
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	f47f aec2 	bne.w	800382a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2220      	movs	r2, #32
 8003aaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	e000      	b.n	8003ac4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003ac2:	2302      	movs	r3, #2
  }
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3728      	adds	r7, #40	; 0x28
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	00010004 	.word	0x00010004

08003ad0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b08a      	sub	sp, #40	; 0x28
 8003ad4:	af02      	add	r7, sp, #8
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	607a      	str	r2, [r7, #4]
 8003ada:	603b      	str	r3, [r7, #0]
 8003adc:	460b      	mov	r3, r1
 8003ade:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003ae0:	f7ff f8f8 	bl	8002cd4 <HAL_GetTick>
 8003ae4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	2b20      	cmp	r3, #32
 8003af4:	f040 8111 	bne.w	8003d1a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	9300      	str	r3, [sp, #0]
 8003afc:	2319      	movs	r3, #25
 8003afe:	2201      	movs	r2, #1
 8003b00:	4988      	ldr	r1, [pc, #544]	; (8003d24 <HAL_I2C_IsDeviceReady+0x254>)
 8003b02:	68f8      	ldr	r0, [r7, #12]
 8003b04:	f000 fa90 	bl	8004028 <I2C_WaitOnFlagUntilTimeout>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d001      	beq.n	8003b12 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003b0e:	2302      	movs	r3, #2
 8003b10:	e104      	b.n	8003d1c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d101      	bne.n	8003b20 <HAL_I2C_IsDeviceReady+0x50>
 8003b1c:	2302      	movs	r3, #2
 8003b1e:	e0fd      	b.n	8003d1c <HAL_I2C_IsDeviceReady+0x24c>
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 0301 	and.w	r3, r3, #1
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d007      	beq.n	8003b46 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f042 0201 	orr.w	r2, r2, #1
 8003b44:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b54:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2224      	movs	r2, #36	; 0x24
 8003b5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2200      	movs	r2, #0
 8003b62:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	4a70      	ldr	r2, [pc, #448]	; (8003d28 <HAL_I2C_IsDeviceReady+0x258>)
 8003b68:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b78:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	9300      	str	r3, [sp, #0]
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	2200      	movs	r2, #0
 8003b82:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b86:	68f8      	ldr	r0, [r7, #12]
 8003b88:	f000 fa4e 	bl	8004028 <I2C_WaitOnFlagUntilTimeout>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d00d      	beq.n	8003bae <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ba0:	d103      	bne.n	8003baa <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ba8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e0b6      	b.n	8003d1c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003bae:	897b      	ldrh	r3, [r7, #10]
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003bbc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003bbe:	f7ff f889 	bl	8002cd4 <HAL_GetTick>
 8003bc2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	695b      	ldr	r3, [r3, #20]
 8003bca:	f003 0302 	and.w	r3, r3, #2
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	bf0c      	ite	eq
 8003bd2:	2301      	moveq	r3, #1
 8003bd4:	2300      	movne	r3, #0
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	695b      	ldr	r3, [r3, #20]
 8003be0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003be4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003be8:	bf0c      	ite	eq
 8003bea:	2301      	moveq	r3, #1
 8003bec:	2300      	movne	r3, #0
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003bf2:	e025      	b.n	8003c40 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003bf4:	f7ff f86e 	bl	8002cd4 <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	683a      	ldr	r2, [r7, #0]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d302      	bcc.n	8003c0a <HAL_I2C_IsDeviceReady+0x13a>
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d103      	bne.n	8003c12 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	22a0      	movs	r2, #160	; 0xa0
 8003c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	695b      	ldr	r3, [r3, #20]
 8003c18:	f003 0302 	and.w	r3, r3, #2
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	bf0c      	ite	eq
 8003c20:	2301      	moveq	r3, #1
 8003c22:	2300      	movne	r3, #0
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	695b      	ldr	r3, [r3, #20]
 8003c2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c36:	bf0c      	ite	eq
 8003c38:	2301      	moveq	r3, #1
 8003c3a:	2300      	movne	r3, #0
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	2ba0      	cmp	r3, #160	; 0xa0
 8003c4a:	d005      	beq.n	8003c58 <HAL_I2C_IsDeviceReady+0x188>
 8003c4c:	7dfb      	ldrb	r3, [r7, #23]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d102      	bne.n	8003c58 <HAL_I2C_IsDeviceReady+0x188>
 8003c52:	7dbb      	ldrb	r3, [r7, #22]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d0cd      	beq.n	8003bf4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2220      	movs	r2, #32
 8003c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	695b      	ldr	r3, [r3, #20]
 8003c66:	f003 0302 	and.w	r3, r3, #2
 8003c6a:	2b02      	cmp	r3, #2
 8003c6c:	d129      	bne.n	8003cc2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c7c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c7e:	2300      	movs	r3, #0
 8003c80:	613b      	str	r3, [r7, #16]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	695b      	ldr	r3, [r3, #20]
 8003c88:	613b      	str	r3, [r7, #16]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	699b      	ldr	r3, [r3, #24]
 8003c90:	613b      	str	r3, [r7, #16]
 8003c92:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	9300      	str	r3, [sp, #0]
 8003c98:	2319      	movs	r3, #25
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	4921      	ldr	r1, [pc, #132]	; (8003d24 <HAL_I2C_IsDeviceReady+0x254>)
 8003c9e:	68f8      	ldr	r0, [r7, #12]
 8003ca0:	f000 f9c2 	bl	8004028 <I2C_WaitOnFlagUntilTimeout>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d001      	beq.n	8003cae <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e036      	b.n	8003d1c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2220      	movs	r2, #32
 8003cb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	e02c      	b.n	8003d1c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cd0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003cda:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	9300      	str	r3, [sp, #0]
 8003ce0:	2319      	movs	r3, #25
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	490f      	ldr	r1, [pc, #60]	; (8003d24 <HAL_I2C_IsDeviceReady+0x254>)
 8003ce6:	68f8      	ldr	r0, [r7, #12]
 8003ce8:	f000 f99e 	bl	8004028 <I2C_WaitOnFlagUntilTimeout>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d001      	beq.n	8003cf6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e012      	b.n	8003d1c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003cf6:	69bb      	ldr	r3, [r7, #24]
 8003cf8:	3301      	adds	r3, #1
 8003cfa:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003cfc:	69ba      	ldr	r2, [r7, #24]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	f4ff af32 	bcc.w	8003b6a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2220      	movs	r2, #32
 8003d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e000      	b.n	8003d1c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003d1a:	2302      	movs	r3, #2
  }
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3720      	adds	r7, #32
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	00100002 	.word	0x00100002
 8003d28:	ffff0000 	.word	0xffff0000

08003d2c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b088      	sub	sp, #32
 8003d30:	af02      	add	r7, sp, #8
 8003d32:	60f8      	str	r0, [r7, #12]
 8003d34:	4608      	mov	r0, r1
 8003d36:	4611      	mov	r1, r2
 8003d38:	461a      	mov	r2, r3
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	817b      	strh	r3, [r7, #10]
 8003d3e:	460b      	mov	r3, r1
 8003d40:	813b      	strh	r3, [r7, #8]
 8003d42:	4613      	mov	r3, r2
 8003d44:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d54:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d58:	9300      	str	r3, [sp, #0]
 8003d5a:	6a3b      	ldr	r3, [r7, #32]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d62:	68f8      	ldr	r0, [r7, #12]
 8003d64:	f000 f960 	bl	8004028 <I2C_WaitOnFlagUntilTimeout>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d00d      	beq.n	8003d8a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d7c:	d103      	bne.n	8003d86 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d84:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e05f      	b.n	8003e4a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d8a:	897b      	ldrh	r3, [r7, #10]
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	461a      	mov	r2, r3
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003d98:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9c:	6a3a      	ldr	r2, [r7, #32]
 8003d9e:	492d      	ldr	r1, [pc, #180]	; (8003e54 <I2C_RequestMemoryWrite+0x128>)
 8003da0:	68f8      	ldr	r0, [r7, #12]
 8003da2:	f000 f998 	bl	80040d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d001      	beq.n	8003db0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	e04c      	b.n	8003e4a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003db0:	2300      	movs	r3, #0
 8003db2:	617b      	str	r3, [r7, #20]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	695b      	ldr	r3, [r3, #20]
 8003dba:	617b      	str	r3, [r7, #20]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	699b      	ldr	r3, [r3, #24]
 8003dc2:	617b      	str	r3, [r7, #20]
 8003dc4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dc8:	6a39      	ldr	r1, [r7, #32]
 8003dca:	68f8      	ldr	r0, [r7, #12]
 8003dcc:	f000 fa02 	bl	80041d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d00d      	beq.n	8003df2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dda:	2b04      	cmp	r3, #4
 8003ddc:	d107      	bne.n	8003dee <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e02b      	b.n	8003e4a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003df2:	88fb      	ldrh	r3, [r7, #6]
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d105      	bne.n	8003e04 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003df8:	893b      	ldrh	r3, [r7, #8]
 8003dfa:	b2da      	uxtb	r2, r3
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	611a      	str	r2, [r3, #16]
 8003e02:	e021      	b.n	8003e48 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003e04:	893b      	ldrh	r3, [r7, #8]
 8003e06:	0a1b      	lsrs	r3, r3, #8
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	b2da      	uxtb	r2, r3
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e14:	6a39      	ldr	r1, [r7, #32]
 8003e16:	68f8      	ldr	r0, [r7, #12]
 8003e18:	f000 f9dc 	bl	80041d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d00d      	beq.n	8003e3e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e26:	2b04      	cmp	r3, #4
 8003e28:	d107      	bne.n	8003e3a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e38:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e005      	b.n	8003e4a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e3e:	893b      	ldrh	r3, [r7, #8]
 8003e40:	b2da      	uxtb	r2, r3
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003e48:	2300      	movs	r3, #0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3718      	adds	r7, #24
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	00010002 	.word	0x00010002

08003e58 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b088      	sub	sp, #32
 8003e5c:	af02      	add	r7, sp, #8
 8003e5e:	60f8      	str	r0, [r7, #12]
 8003e60:	4608      	mov	r0, r1
 8003e62:	4611      	mov	r1, r2
 8003e64:	461a      	mov	r2, r3
 8003e66:	4603      	mov	r3, r0
 8003e68:	817b      	strh	r3, [r7, #10]
 8003e6a:	460b      	mov	r3, r1
 8003e6c:	813b      	strh	r3, [r7, #8]
 8003e6e:	4613      	mov	r3, r2
 8003e70:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e80:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e90:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e94:	9300      	str	r3, [sp, #0]
 8003e96:	6a3b      	ldr	r3, [r7, #32]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e9e:	68f8      	ldr	r0, [r7, #12]
 8003ea0:	f000 f8c2 	bl	8004028 <I2C_WaitOnFlagUntilTimeout>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d00d      	beq.n	8003ec6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003eb8:	d103      	bne.n	8003ec2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ec0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e0aa      	b.n	800401c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ec6:	897b      	ldrh	r3, [r7, #10]
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	461a      	mov	r2, r3
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003ed4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed8:	6a3a      	ldr	r2, [r7, #32]
 8003eda:	4952      	ldr	r1, [pc, #328]	; (8004024 <I2C_RequestMemoryRead+0x1cc>)
 8003edc:	68f8      	ldr	r0, [r7, #12]
 8003ede:	f000 f8fa 	bl	80040d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d001      	beq.n	8003eec <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e097      	b.n	800401c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eec:	2300      	movs	r3, #0
 8003eee:	617b      	str	r3, [r7, #20]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	695b      	ldr	r3, [r3, #20]
 8003ef6:	617b      	str	r3, [r7, #20]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	699b      	ldr	r3, [r3, #24]
 8003efe:	617b      	str	r3, [r7, #20]
 8003f00:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f04:	6a39      	ldr	r1, [r7, #32]
 8003f06:	68f8      	ldr	r0, [r7, #12]
 8003f08:	f000 f964 	bl	80041d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d00d      	beq.n	8003f2e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f16:	2b04      	cmp	r3, #4
 8003f18:	d107      	bne.n	8003f2a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f28:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e076      	b.n	800401c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f2e:	88fb      	ldrh	r3, [r7, #6]
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d105      	bne.n	8003f40 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f34:	893b      	ldrh	r3, [r7, #8]
 8003f36:	b2da      	uxtb	r2, r3
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	611a      	str	r2, [r3, #16]
 8003f3e:	e021      	b.n	8003f84 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003f40:	893b      	ldrh	r3, [r7, #8]
 8003f42:	0a1b      	lsrs	r3, r3, #8
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	b2da      	uxtb	r2, r3
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f50:	6a39      	ldr	r1, [r7, #32]
 8003f52:	68f8      	ldr	r0, [r7, #12]
 8003f54:	f000 f93e 	bl	80041d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d00d      	beq.n	8003f7a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f62:	2b04      	cmp	r3, #4
 8003f64:	d107      	bne.n	8003f76 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f74:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e050      	b.n	800401c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f7a:	893b      	ldrh	r3, [r7, #8]
 8003f7c:	b2da      	uxtb	r2, r3
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f86:	6a39      	ldr	r1, [r7, #32]
 8003f88:	68f8      	ldr	r0, [r7, #12]
 8003f8a:	f000 f923 	bl	80041d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d00d      	beq.n	8003fb0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f98:	2b04      	cmp	r3, #4
 8003f9a:	d107      	bne.n	8003fac <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003faa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	e035      	b.n	800401c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fbe:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc2:	9300      	str	r3, [sp, #0]
 8003fc4:	6a3b      	ldr	r3, [r7, #32]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003fcc:	68f8      	ldr	r0, [r7, #12]
 8003fce:	f000 f82b 	bl	8004028 <I2C_WaitOnFlagUntilTimeout>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d00d      	beq.n	8003ff4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fe2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fe6:	d103      	bne.n	8003ff0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	e013      	b.n	800401c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003ff4:	897b      	ldrh	r3, [r7, #10]
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	f043 0301 	orr.w	r3, r3, #1
 8003ffc:	b2da      	uxtb	r2, r3
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004006:	6a3a      	ldr	r2, [r7, #32]
 8004008:	4906      	ldr	r1, [pc, #24]	; (8004024 <I2C_RequestMemoryRead+0x1cc>)
 800400a:	68f8      	ldr	r0, [r7, #12]
 800400c:	f000 f863 	bl	80040d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004010:	4603      	mov	r3, r0
 8004012:	2b00      	cmp	r3, #0
 8004014:	d001      	beq.n	800401a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e000      	b.n	800401c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800401a:	2300      	movs	r3, #0
}
 800401c:	4618      	mov	r0, r3
 800401e:	3718      	adds	r7, #24
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}
 8004024:	00010002 	.word	0x00010002

08004028 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	60b9      	str	r1, [r7, #8]
 8004032:	603b      	str	r3, [r7, #0]
 8004034:	4613      	mov	r3, r2
 8004036:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004038:	e025      	b.n	8004086 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004040:	d021      	beq.n	8004086 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004042:	f7fe fe47 	bl	8002cd4 <HAL_GetTick>
 8004046:	4602      	mov	r2, r0
 8004048:	69bb      	ldr	r3, [r7, #24]
 800404a:	1ad3      	subs	r3, r2, r3
 800404c:	683a      	ldr	r2, [r7, #0]
 800404e:	429a      	cmp	r2, r3
 8004050:	d302      	bcc.n	8004058 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d116      	bne.n	8004086 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2200      	movs	r2, #0
 800405c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2220      	movs	r2, #32
 8004062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2200      	movs	r2, #0
 800406a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004072:	f043 0220 	orr.w	r2, r3, #32
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2200      	movs	r2, #0
 800407e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e023      	b.n	80040ce <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	0c1b      	lsrs	r3, r3, #16
 800408a:	b2db      	uxtb	r3, r3
 800408c:	2b01      	cmp	r3, #1
 800408e:	d10d      	bne.n	80040ac <I2C_WaitOnFlagUntilTimeout+0x84>
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	695b      	ldr	r3, [r3, #20]
 8004096:	43da      	mvns	r2, r3
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	4013      	ands	r3, r2
 800409c:	b29b      	uxth	r3, r3
 800409e:	2b00      	cmp	r3, #0
 80040a0:	bf0c      	ite	eq
 80040a2:	2301      	moveq	r3, #1
 80040a4:	2300      	movne	r3, #0
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	461a      	mov	r2, r3
 80040aa:	e00c      	b.n	80040c6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	699b      	ldr	r3, [r3, #24]
 80040b2:	43da      	mvns	r2, r3
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	4013      	ands	r3, r2
 80040b8:	b29b      	uxth	r3, r3
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	bf0c      	ite	eq
 80040be:	2301      	moveq	r3, #1
 80040c0:	2300      	movne	r3, #0
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	461a      	mov	r2, r3
 80040c6:	79fb      	ldrb	r3, [r7, #7]
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d0b6      	beq.n	800403a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80040cc:	2300      	movs	r3, #0
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3710      	adds	r7, #16
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}

080040d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80040d6:	b580      	push	{r7, lr}
 80040d8:	b084      	sub	sp, #16
 80040da:	af00      	add	r7, sp, #0
 80040dc:	60f8      	str	r0, [r7, #12]
 80040de:	60b9      	str	r1, [r7, #8]
 80040e0:	607a      	str	r2, [r7, #4]
 80040e2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80040e4:	e051      	b.n	800418a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	695b      	ldr	r3, [r3, #20]
 80040ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040f4:	d123      	bne.n	800413e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004104:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800410e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2200      	movs	r2, #0
 8004114:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2220      	movs	r2, #32
 800411a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2200      	movs	r2, #0
 8004122:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412a:	f043 0204 	orr.w	r2, r3, #4
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e046      	b.n	80041cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004144:	d021      	beq.n	800418a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004146:	f7fe fdc5 	bl	8002cd4 <HAL_GetTick>
 800414a:	4602      	mov	r2, r0
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	1ad3      	subs	r3, r2, r3
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	429a      	cmp	r2, r3
 8004154:	d302      	bcc.n	800415c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d116      	bne.n	800418a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2200      	movs	r2, #0
 8004160:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2220      	movs	r2, #32
 8004166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2200      	movs	r2, #0
 800416e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004176:	f043 0220 	orr.w	r2, r3, #32
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2200      	movs	r2, #0
 8004182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e020      	b.n	80041cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	0c1b      	lsrs	r3, r3, #16
 800418e:	b2db      	uxtb	r3, r3
 8004190:	2b01      	cmp	r3, #1
 8004192:	d10c      	bne.n	80041ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	695b      	ldr	r3, [r3, #20]
 800419a:	43da      	mvns	r2, r3
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	4013      	ands	r3, r2
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	bf14      	ite	ne
 80041a6:	2301      	movne	r3, #1
 80041a8:	2300      	moveq	r3, #0
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	e00b      	b.n	80041c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	699b      	ldr	r3, [r3, #24]
 80041b4:	43da      	mvns	r2, r3
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	4013      	ands	r3, r2
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	2b00      	cmp	r3, #0
 80041be:	bf14      	ite	ne
 80041c0:	2301      	movne	r3, #1
 80041c2:	2300      	moveq	r3, #0
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d18d      	bne.n	80040e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80041ca:	2300      	movs	r3, #0
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3710      	adds	r7, #16
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}

080041d4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b084      	sub	sp, #16
 80041d8:	af00      	add	r7, sp, #0
 80041da:	60f8      	str	r0, [r7, #12]
 80041dc:	60b9      	str	r1, [r7, #8]
 80041de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80041e0:	e02d      	b.n	800423e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80041e2:	68f8      	ldr	r0, [r7, #12]
 80041e4:	f000 f8ce 	bl	8004384 <I2C_IsAcknowledgeFailed>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d001      	beq.n	80041f2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e02d      	b.n	800424e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041f8:	d021      	beq.n	800423e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041fa:	f7fe fd6b 	bl	8002cd4 <HAL_GetTick>
 80041fe:	4602      	mov	r2, r0
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	1ad3      	subs	r3, r2, r3
 8004204:	68ba      	ldr	r2, [r7, #8]
 8004206:	429a      	cmp	r2, r3
 8004208:	d302      	bcc.n	8004210 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d116      	bne.n	800423e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2200      	movs	r2, #0
 8004214:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2220      	movs	r2, #32
 800421a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2200      	movs	r2, #0
 8004222:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422a:	f043 0220 	orr.w	r2, r3, #32
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2200      	movs	r2, #0
 8004236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e007      	b.n	800424e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	695b      	ldr	r3, [r3, #20]
 8004244:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004248:	2b80      	cmp	r3, #128	; 0x80
 800424a:	d1ca      	bne.n	80041e2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800424c:	2300      	movs	r3, #0
}
 800424e:	4618      	mov	r0, r3
 8004250:	3710      	adds	r7, #16
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}

08004256 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004256:	b580      	push	{r7, lr}
 8004258:	b084      	sub	sp, #16
 800425a:	af00      	add	r7, sp, #0
 800425c:	60f8      	str	r0, [r7, #12]
 800425e:	60b9      	str	r1, [r7, #8]
 8004260:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004262:	e02d      	b.n	80042c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004264:	68f8      	ldr	r0, [r7, #12]
 8004266:	f000 f88d 	bl	8004384 <I2C_IsAcknowledgeFailed>
 800426a:	4603      	mov	r3, r0
 800426c:	2b00      	cmp	r3, #0
 800426e:	d001      	beq.n	8004274 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	e02d      	b.n	80042d0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	f1b3 3fff 	cmp.w	r3, #4294967295
 800427a:	d021      	beq.n	80042c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800427c:	f7fe fd2a 	bl	8002cd4 <HAL_GetTick>
 8004280:	4602      	mov	r2, r0
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	68ba      	ldr	r2, [r7, #8]
 8004288:	429a      	cmp	r2, r3
 800428a:	d302      	bcc.n	8004292 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d116      	bne.n	80042c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2200      	movs	r2, #0
 8004296:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2220      	movs	r2, #32
 800429c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2200      	movs	r2, #0
 80042a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ac:	f043 0220 	orr.w	r2, r3, #32
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2200      	movs	r2, #0
 80042b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e007      	b.n	80042d0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	695b      	ldr	r3, [r3, #20]
 80042c6:	f003 0304 	and.w	r3, r3, #4
 80042ca:	2b04      	cmp	r3, #4
 80042cc:	d1ca      	bne.n	8004264 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80042ce:	2300      	movs	r3, #0
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3710      	adds	r7, #16
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}

080042d8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	60f8      	str	r0, [r7, #12]
 80042e0:	60b9      	str	r1, [r7, #8]
 80042e2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80042e4:	e042      	b.n	800436c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	695b      	ldr	r3, [r3, #20]
 80042ec:	f003 0310 	and.w	r3, r3, #16
 80042f0:	2b10      	cmp	r3, #16
 80042f2:	d119      	bne.n	8004328 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f06f 0210 	mvn.w	r2, #16
 80042fc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2200      	movs	r2, #0
 8004302:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2220      	movs	r2, #32
 8004308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2200      	movs	r2, #0
 8004310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2200      	movs	r2, #0
 8004320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	e029      	b.n	800437c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004328:	f7fe fcd4 	bl	8002cd4 <HAL_GetTick>
 800432c:	4602      	mov	r2, r0
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	68ba      	ldr	r2, [r7, #8]
 8004334:	429a      	cmp	r2, r3
 8004336:	d302      	bcc.n	800433e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d116      	bne.n	800436c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2200      	movs	r2, #0
 8004342:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2220      	movs	r2, #32
 8004348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2200      	movs	r2, #0
 8004350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004358:	f043 0220 	orr.w	r2, r3, #32
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2200      	movs	r2, #0
 8004364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	e007      	b.n	800437c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	695b      	ldr	r3, [r3, #20]
 8004372:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004376:	2b40      	cmp	r3, #64	; 0x40
 8004378:	d1b5      	bne.n	80042e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800437a:	2300      	movs	r3, #0
}
 800437c:	4618      	mov	r0, r3
 800437e:	3710      	adds	r7, #16
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}

08004384 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	695b      	ldr	r3, [r3, #20]
 8004392:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004396:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800439a:	d11b      	bne.n	80043d4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80043a4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2220      	movs	r2, #32
 80043b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2200      	movs	r2, #0
 80043b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c0:	f043 0204 	orr.w	r2, r3, #4
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e000      	b.n	80043d6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80043d4:	2300      	movs	r3, #0
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	370c      	adds	r7, #12
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr
	...

080043e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b086      	sub	sp, #24
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d101      	bne.n	80043f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e267      	b.n	80048c6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0301 	and.w	r3, r3, #1
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d075      	beq.n	80044ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004402:	4b88      	ldr	r3, [pc, #544]	; (8004624 <HAL_RCC_OscConfig+0x240>)
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	f003 030c 	and.w	r3, r3, #12
 800440a:	2b04      	cmp	r3, #4
 800440c:	d00c      	beq.n	8004428 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800440e:	4b85      	ldr	r3, [pc, #532]	; (8004624 <HAL_RCC_OscConfig+0x240>)
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004416:	2b08      	cmp	r3, #8
 8004418:	d112      	bne.n	8004440 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800441a:	4b82      	ldr	r3, [pc, #520]	; (8004624 <HAL_RCC_OscConfig+0x240>)
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004422:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004426:	d10b      	bne.n	8004440 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004428:	4b7e      	ldr	r3, [pc, #504]	; (8004624 <HAL_RCC_OscConfig+0x240>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004430:	2b00      	cmp	r3, #0
 8004432:	d05b      	beq.n	80044ec <HAL_RCC_OscConfig+0x108>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d157      	bne.n	80044ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	e242      	b.n	80048c6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004448:	d106      	bne.n	8004458 <HAL_RCC_OscConfig+0x74>
 800444a:	4b76      	ldr	r3, [pc, #472]	; (8004624 <HAL_RCC_OscConfig+0x240>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a75      	ldr	r2, [pc, #468]	; (8004624 <HAL_RCC_OscConfig+0x240>)
 8004450:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004454:	6013      	str	r3, [r2, #0]
 8004456:	e01d      	b.n	8004494 <HAL_RCC_OscConfig+0xb0>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004460:	d10c      	bne.n	800447c <HAL_RCC_OscConfig+0x98>
 8004462:	4b70      	ldr	r3, [pc, #448]	; (8004624 <HAL_RCC_OscConfig+0x240>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a6f      	ldr	r2, [pc, #444]	; (8004624 <HAL_RCC_OscConfig+0x240>)
 8004468:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800446c:	6013      	str	r3, [r2, #0]
 800446e:	4b6d      	ldr	r3, [pc, #436]	; (8004624 <HAL_RCC_OscConfig+0x240>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a6c      	ldr	r2, [pc, #432]	; (8004624 <HAL_RCC_OscConfig+0x240>)
 8004474:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004478:	6013      	str	r3, [r2, #0]
 800447a:	e00b      	b.n	8004494 <HAL_RCC_OscConfig+0xb0>
 800447c:	4b69      	ldr	r3, [pc, #420]	; (8004624 <HAL_RCC_OscConfig+0x240>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a68      	ldr	r2, [pc, #416]	; (8004624 <HAL_RCC_OscConfig+0x240>)
 8004482:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004486:	6013      	str	r3, [r2, #0]
 8004488:	4b66      	ldr	r3, [pc, #408]	; (8004624 <HAL_RCC_OscConfig+0x240>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a65      	ldr	r2, [pc, #404]	; (8004624 <HAL_RCC_OscConfig+0x240>)
 800448e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004492:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d013      	beq.n	80044c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800449c:	f7fe fc1a 	bl	8002cd4 <HAL_GetTick>
 80044a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044a2:	e008      	b.n	80044b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044a4:	f7fe fc16 	bl	8002cd4 <HAL_GetTick>
 80044a8:	4602      	mov	r2, r0
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	1ad3      	subs	r3, r2, r3
 80044ae:	2b64      	cmp	r3, #100	; 0x64
 80044b0:	d901      	bls.n	80044b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80044b2:	2303      	movs	r3, #3
 80044b4:	e207      	b.n	80048c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044b6:	4b5b      	ldr	r3, [pc, #364]	; (8004624 <HAL_RCC_OscConfig+0x240>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d0f0      	beq.n	80044a4 <HAL_RCC_OscConfig+0xc0>
 80044c2:	e014      	b.n	80044ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044c4:	f7fe fc06 	bl	8002cd4 <HAL_GetTick>
 80044c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044ca:	e008      	b.n	80044de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044cc:	f7fe fc02 	bl	8002cd4 <HAL_GetTick>
 80044d0:	4602      	mov	r2, r0
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	2b64      	cmp	r3, #100	; 0x64
 80044d8:	d901      	bls.n	80044de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80044da:	2303      	movs	r3, #3
 80044dc:	e1f3      	b.n	80048c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044de:	4b51      	ldr	r3, [pc, #324]	; (8004624 <HAL_RCC_OscConfig+0x240>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d1f0      	bne.n	80044cc <HAL_RCC_OscConfig+0xe8>
 80044ea:	e000      	b.n	80044ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 0302 	and.w	r3, r3, #2
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d063      	beq.n	80045c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80044fa:	4b4a      	ldr	r3, [pc, #296]	; (8004624 <HAL_RCC_OscConfig+0x240>)
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	f003 030c 	and.w	r3, r3, #12
 8004502:	2b00      	cmp	r3, #0
 8004504:	d00b      	beq.n	800451e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004506:	4b47      	ldr	r3, [pc, #284]	; (8004624 <HAL_RCC_OscConfig+0x240>)
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800450e:	2b08      	cmp	r3, #8
 8004510:	d11c      	bne.n	800454c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004512:	4b44      	ldr	r3, [pc, #272]	; (8004624 <HAL_RCC_OscConfig+0x240>)
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d116      	bne.n	800454c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800451e:	4b41      	ldr	r3, [pc, #260]	; (8004624 <HAL_RCC_OscConfig+0x240>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 0302 	and.w	r3, r3, #2
 8004526:	2b00      	cmp	r3, #0
 8004528:	d005      	beq.n	8004536 <HAL_RCC_OscConfig+0x152>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	2b01      	cmp	r3, #1
 8004530:	d001      	beq.n	8004536 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e1c7      	b.n	80048c6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004536:	4b3b      	ldr	r3, [pc, #236]	; (8004624 <HAL_RCC_OscConfig+0x240>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	00db      	lsls	r3, r3, #3
 8004544:	4937      	ldr	r1, [pc, #220]	; (8004624 <HAL_RCC_OscConfig+0x240>)
 8004546:	4313      	orrs	r3, r2
 8004548:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800454a:	e03a      	b.n	80045c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d020      	beq.n	8004596 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004554:	4b34      	ldr	r3, [pc, #208]	; (8004628 <HAL_RCC_OscConfig+0x244>)
 8004556:	2201      	movs	r2, #1
 8004558:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800455a:	f7fe fbbb 	bl	8002cd4 <HAL_GetTick>
 800455e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004560:	e008      	b.n	8004574 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004562:	f7fe fbb7 	bl	8002cd4 <HAL_GetTick>
 8004566:	4602      	mov	r2, r0
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	1ad3      	subs	r3, r2, r3
 800456c:	2b02      	cmp	r3, #2
 800456e:	d901      	bls.n	8004574 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004570:	2303      	movs	r3, #3
 8004572:	e1a8      	b.n	80048c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004574:	4b2b      	ldr	r3, [pc, #172]	; (8004624 <HAL_RCC_OscConfig+0x240>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 0302 	and.w	r3, r3, #2
 800457c:	2b00      	cmp	r3, #0
 800457e:	d0f0      	beq.n	8004562 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004580:	4b28      	ldr	r3, [pc, #160]	; (8004624 <HAL_RCC_OscConfig+0x240>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	691b      	ldr	r3, [r3, #16]
 800458c:	00db      	lsls	r3, r3, #3
 800458e:	4925      	ldr	r1, [pc, #148]	; (8004624 <HAL_RCC_OscConfig+0x240>)
 8004590:	4313      	orrs	r3, r2
 8004592:	600b      	str	r3, [r1, #0]
 8004594:	e015      	b.n	80045c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004596:	4b24      	ldr	r3, [pc, #144]	; (8004628 <HAL_RCC_OscConfig+0x244>)
 8004598:	2200      	movs	r2, #0
 800459a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800459c:	f7fe fb9a 	bl	8002cd4 <HAL_GetTick>
 80045a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045a2:	e008      	b.n	80045b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045a4:	f7fe fb96 	bl	8002cd4 <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d901      	bls.n	80045b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e187      	b.n	80048c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045b6:	4b1b      	ldr	r3, [pc, #108]	; (8004624 <HAL_RCC_OscConfig+0x240>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 0302 	and.w	r3, r3, #2
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d1f0      	bne.n	80045a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0308 	and.w	r3, r3, #8
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d036      	beq.n	800463c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	695b      	ldr	r3, [r3, #20]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d016      	beq.n	8004604 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045d6:	4b15      	ldr	r3, [pc, #84]	; (800462c <HAL_RCC_OscConfig+0x248>)
 80045d8:	2201      	movs	r2, #1
 80045da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045dc:	f7fe fb7a 	bl	8002cd4 <HAL_GetTick>
 80045e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045e2:	e008      	b.n	80045f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045e4:	f7fe fb76 	bl	8002cd4 <HAL_GetTick>
 80045e8:	4602      	mov	r2, r0
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	2b02      	cmp	r3, #2
 80045f0:	d901      	bls.n	80045f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80045f2:	2303      	movs	r3, #3
 80045f4:	e167      	b.n	80048c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045f6:	4b0b      	ldr	r3, [pc, #44]	; (8004624 <HAL_RCC_OscConfig+0x240>)
 80045f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045fa:	f003 0302 	and.w	r3, r3, #2
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d0f0      	beq.n	80045e4 <HAL_RCC_OscConfig+0x200>
 8004602:	e01b      	b.n	800463c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004604:	4b09      	ldr	r3, [pc, #36]	; (800462c <HAL_RCC_OscConfig+0x248>)
 8004606:	2200      	movs	r2, #0
 8004608:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800460a:	f7fe fb63 	bl	8002cd4 <HAL_GetTick>
 800460e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004610:	e00e      	b.n	8004630 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004612:	f7fe fb5f 	bl	8002cd4 <HAL_GetTick>
 8004616:	4602      	mov	r2, r0
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	1ad3      	subs	r3, r2, r3
 800461c:	2b02      	cmp	r3, #2
 800461e:	d907      	bls.n	8004630 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004620:	2303      	movs	r3, #3
 8004622:	e150      	b.n	80048c6 <HAL_RCC_OscConfig+0x4e2>
 8004624:	40023800 	.word	0x40023800
 8004628:	42470000 	.word	0x42470000
 800462c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004630:	4b88      	ldr	r3, [pc, #544]	; (8004854 <HAL_RCC_OscConfig+0x470>)
 8004632:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004634:	f003 0302 	and.w	r3, r3, #2
 8004638:	2b00      	cmp	r3, #0
 800463a:	d1ea      	bne.n	8004612 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 0304 	and.w	r3, r3, #4
 8004644:	2b00      	cmp	r3, #0
 8004646:	f000 8097 	beq.w	8004778 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800464a:	2300      	movs	r3, #0
 800464c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800464e:	4b81      	ldr	r3, [pc, #516]	; (8004854 <HAL_RCC_OscConfig+0x470>)
 8004650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004656:	2b00      	cmp	r3, #0
 8004658:	d10f      	bne.n	800467a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800465a:	2300      	movs	r3, #0
 800465c:	60bb      	str	r3, [r7, #8]
 800465e:	4b7d      	ldr	r3, [pc, #500]	; (8004854 <HAL_RCC_OscConfig+0x470>)
 8004660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004662:	4a7c      	ldr	r2, [pc, #496]	; (8004854 <HAL_RCC_OscConfig+0x470>)
 8004664:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004668:	6413      	str	r3, [r2, #64]	; 0x40
 800466a:	4b7a      	ldr	r3, [pc, #488]	; (8004854 <HAL_RCC_OscConfig+0x470>)
 800466c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004672:	60bb      	str	r3, [r7, #8]
 8004674:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004676:	2301      	movs	r3, #1
 8004678:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800467a:	4b77      	ldr	r3, [pc, #476]	; (8004858 <HAL_RCC_OscConfig+0x474>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004682:	2b00      	cmp	r3, #0
 8004684:	d118      	bne.n	80046b8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004686:	4b74      	ldr	r3, [pc, #464]	; (8004858 <HAL_RCC_OscConfig+0x474>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a73      	ldr	r2, [pc, #460]	; (8004858 <HAL_RCC_OscConfig+0x474>)
 800468c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004690:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004692:	f7fe fb1f 	bl	8002cd4 <HAL_GetTick>
 8004696:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004698:	e008      	b.n	80046ac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800469a:	f7fe fb1b 	bl	8002cd4 <HAL_GetTick>
 800469e:	4602      	mov	r2, r0
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	d901      	bls.n	80046ac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80046a8:	2303      	movs	r3, #3
 80046aa:	e10c      	b.n	80048c6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046ac:	4b6a      	ldr	r3, [pc, #424]	; (8004858 <HAL_RCC_OscConfig+0x474>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d0f0      	beq.n	800469a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d106      	bne.n	80046ce <HAL_RCC_OscConfig+0x2ea>
 80046c0:	4b64      	ldr	r3, [pc, #400]	; (8004854 <HAL_RCC_OscConfig+0x470>)
 80046c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c4:	4a63      	ldr	r2, [pc, #396]	; (8004854 <HAL_RCC_OscConfig+0x470>)
 80046c6:	f043 0301 	orr.w	r3, r3, #1
 80046ca:	6713      	str	r3, [r2, #112]	; 0x70
 80046cc:	e01c      	b.n	8004708 <HAL_RCC_OscConfig+0x324>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	2b05      	cmp	r3, #5
 80046d4:	d10c      	bne.n	80046f0 <HAL_RCC_OscConfig+0x30c>
 80046d6:	4b5f      	ldr	r3, [pc, #380]	; (8004854 <HAL_RCC_OscConfig+0x470>)
 80046d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046da:	4a5e      	ldr	r2, [pc, #376]	; (8004854 <HAL_RCC_OscConfig+0x470>)
 80046dc:	f043 0304 	orr.w	r3, r3, #4
 80046e0:	6713      	str	r3, [r2, #112]	; 0x70
 80046e2:	4b5c      	ldr	r3, [pc, #368]	; (8004854 <HAL_RCC_OscConfig+0x470>)
 80046e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046e6:	4a5b      	ldr	r2, [pc, #364]	; (8004854 <HAL_RCC_OscConfig+0x470>)
 80046e8:	f043 0301 	orr.w	r3, r3, #1
 80046ec:	6713      	str	r3, [r2, #112]	; 0x70
 80046ee:	e00b      	b.n	8004708 <HAL_RCC_OscConfig+0x324>
 80046f0:	4b58      	ldr	r3, [pc, #352]	; (8004854 <HAL_RCC_OscConfig+0x470>)
 80046f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046f4:	4a57      	ldr	r2, [pc, #348]	; (8004854 <HAL_RCC_OscConfig+0x470>)
 80046f6:	f023 0301 	bic.w	r3, r3, #1
 80046fa:	6713      	str	r3, [r2, #112]	; 0x70
 80046fc:	4b55      	ldr	r3, [pc, #340]	; (8004854 <HAL_RCC_OscConfig+0x470>)
 80046fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004700:	4a54      	ldr	r2, [pc, #336]	; (8004854 <HAL_RCC_OscConfig+0x470>)
 8004702:	f023 0304 	bic.w	r3, r3, #4
 8004706:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d015      	beq.n	800473c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004710:	f7fe fae0 	bl	8002cd4 <HAL_GetTick>
 8004714:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004716:	e00a      	b.n	800472e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004718:	f7fe fadc 	bl	8002cd4 <HAL_GetTick>
 800471c:	4602      	mov	r2, r0
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	f241 3288 	movw	r2, #5000	; 0x1388
 8004726:	4293      	cmp	r3, r2
 8004728:	d901      	bls.n	800472e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800472a:	2303      	movs	r3, #3
 800472c:	e0cb      	b.n	80048c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800472e:	4b49      	ldr	r3, [pc, #292]	; (8004854 <HAL_RCC_OscConfig+0x470>)
 8004730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004732:	f003 0302 	and.w	r3, r3, #2
 8004736:	2b00      	cmp	r3, #0
 8004738:	d0ee      	beq.n	8004718 <HAL_RCC_OscConfig+0x334>
 800473a:	e014      	b.n	8004766 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800473c:	f7fe faca 	bl	8002cd4 <HAL_GetTick>
 8004740:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004742:	e00a      	b.n	800475a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004744:	f7fe fac6 	bl	8002cd4 <HAL_GetTick>
 8004748:	4602      	mov	r2, r0
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004752:	4293      	cmp	r3, r2
 8004754:	d901      	bls.n	800475a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004756:	2303      	movs	r3, #3
 8004758:	e0b5      	b.n	80048c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800475a:	4b3e      	ldr	r3, [pc, #248]	; (8004854 <HAL_RCC_OscConfig+0x470>)
 800475c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800475e:	f003 0302 	and.w	r3, r3, #2
 8004762:	2b00      	cmp	r3, #0
 8004764:	d1ee      	bne.n	8004744 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004766:	7dfb      	ldrb	r3, [r7, #23]
 8004768:	2b01      	cmp	r3, #1
 800476a:	d105      	bne.n	8004778 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800476c:	4b39      	ldr	r3, [pc, #228]	; (8004854 <HAL_RCC_OscConfig+0x470>)
 800476e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004770:	4a38      	ldr	r2, [pc, #224]	; (8004854 <HAL_RCC_OscConfig+0x470>)
 8004772:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004776:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	699b      	ldr	r3, [r3, #24]
 800477c:	2b00      	cmp	r3, #0
 800477e:	f000 80a1 	beq.w	80048c4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004782:	4b34      	ldr	r3, [pc, #208]	; (8004854 <HAL_RCC_OscConfig+0x470>)
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	f003 030c 	and.w	r3, r3, #12
 800478a:	2b08      	cmp	r3, #8
 800478c:	d05c      	beq.n	8004848 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	699b      	ldr	r3, [r3, #24]
 8004792:	2b02      	cmp	r3, #2
 8004794:	d141      	bne.n	800481a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004796:	4b31      	ldr	r3, [pc, #196]	; (800485c <HAL_RCC_OscConfig+0x478>)
 8004798:	2200      	movs	r2, #0
 800479a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800479c:	f7fe fa9a 	bl	8002cd4 <HAL_GetTick>
 80047a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047a2:	e008      	b.n	80047b6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047a4:	f7fe fa96 	bl	8002cd4 <HAL_GetTick>
 80047a8:	4602      	mov	r2, r0
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	2b02      	cmp	r3, #2
 80047b0:	d901      	bls.n	80047b6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80047b2:	2303      	movs	r3, #3
 80047b4:	e087      	b.n	80048c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047b6:	4b27      	ldr	r3, [pc, #156]	; (8004854 <HAL_RCC_OscConfig+0x470>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d1f0      	bne.n	80047a4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	69da      	ldr	r2, [r3, #28]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6a1b      	ldr	r3, [r3, #32]
 80047ca:	431a      	orrs	r2, r3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d0:	019b      	lsls	r3, r3, #6
 80047d2:	431a      	orrs	r2, r3
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047d8:	085b      	lsrs	r3, r3, #1
 80047da:	3b01      	subs	r3, #1
 80047dc:	041b      	lsls	r3, r3, #16
 80047de:	431a      	orrs	r2, r3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e4:	061b      	lsls	r3, r3, #24
 80047e6:	491b      	ldr	r1, [pc, #108]	; (8004854 <HAL_RCC_OscConfig+0x470>)
 80047e8:	4313      	orrs	r3, r2
 80047ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047ec:	4b1b      	ldr	r3, [pc, #108]	; (800485c <HAL_RCC_OscConfig+0x478>)
 80047ee:	2201      	movs	r2, #1
 80047f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047f2:	f7fe fa6f 	bl	8002cd4 <HAL_GetTick>
 80047f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047f8:	e008      	b.n	800480c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047fa:	f7fe fa6b 	bl	8002cd4 <HAL_GetTick>
 80047fe:	4602      	mov	r2, r0
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	1ad3      	subs	r3, r2, r3
 8004804:	2b02      	cmp	r3, #2
 8004806:	d901      	bls.n	800480c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004808:	2303      	movs	r3, #3
 800480a:	e05c      	b.n	80048c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800480c:	4b11      	ldr	r3, [pc, #68]	; (8004854 <HAL_RCC_OscConfig+0x470>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004814:	2b00      	cmp	r3, #0
 8004816:	d0f0      	beq.n	80047fa <HAL_RCC_OscConfig+0x416>
 8004818:	e054      	b.n	80048c4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800481a:	4b10      	ldr	r3, [pc, #64]	; (800485c <HAL_RCC_OscConfig+0x478>)
 800481c:	2200      	movs	r2, #0
 800481e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004820:	f7fe fa58 	bl	8002cd4 <HAL_GetTick>
 8004824:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004826:	e008      	b.n	800483a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004828:	f7fe fa54 	bl	8002cd4 <HAL_GetTick>
 800482c:	4602      	mov	r2, r0
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	1ad3      	subs	r3, r2, r3
 8004832:	2b02      	cmp	r3, #2
 8004834:	d901      	bls.n	800483a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004836:	2303      	movs	r3, #3
 8004838:	e045      	b.n	80048c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800483a:	4b06      	ldr	r3, [pc, #24]	; (8004854 <HAL_RCC_OscConfig+0x470>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004842:	2b00      	cmp	r3, #0
 8004844:	d1f0      	bne.n	8004828 <HAL_RCC_OscConfig+0x444>
 8004846:	e03d      	b.n	80048c4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	699b      	ldr	r3, [r3, #24]
 800484c:	2b01      	cmp	r3, #1
 800484e:	d107      	bne.n	8004860 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	e038      	b.n	80048c6 <HAL_RCC_OscConfig+0x4e2>
 8004854:	40023800 	.word	0x40023800
 8004858:	40007000 	.word	0x40007000
 800485c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004860:	4b1b      	ldr	r3, [pc, #108]	; (80048d0 <HAL_RCC_OscConfig+0x4ec>)
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	699b      	ldr	r3, [r3, #24]
 800486a:	2b01      	cmp	r3, #1
 800486c:	d028      	beq.n	80048c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004878:	429a      	cmp	r2, r3
 800487a:	d121      	bne.n	80048c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004886:	429a      	cmp	r2, r3
 8004888:	d11a      	bne.n	80048c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800488a:	68fa      	ldr	r2, [r7, #12]
 800488c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004890:	4013      	ands	r3, r2
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004896:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004898:	4293      	cmp	r3, r2
 800489a:	d111      	bne.n	80048c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048a6:	085b      	lsrs	r3, r3, #1
 80048a8:	3b01      	subs	r3, #1
 80048aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d107      	bne.n	80048c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048bc:	429a      	cmp	r2, r3
 80048be:	d001      	beq.n	80048c4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e000      	b.n	80048c6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80048c4:	2300      	movs	r3, #0
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3718      	adds	r7, #24
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	bf00      	nop
 80048d0:	40023800 	.word	0x40023800

080048d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b084      	sub	sp, #16
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d101      	bne.n	80048e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	e0cc      	b.n	8004a82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80048e8:	4b68      	ldr	r3, [pc, #416]	; (8004a8c <HAL_RCC_ClockConfig+0x1b8>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 0307 	and.w	r3, r3, #7
 80048f0:	683a      	ldr	r2, [r7, #0]
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d90c      	bls.n	8004910 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048f6:	4b65      	ldr	r3, [pc, #404]	; (8004a8c <HAL_RCC_ClockConfig+0x1b8>)
 80048f8:	683a      	ldr	r2, [r7, #0]
 80048fa:	b2d2      	uxtb	r2, r2
 80048fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048fe:	4b63      	ldr	r3, [pc, #396]	; (8004a8c <HAL_RCC_ClockConfig+0x1b8>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 0307 	and.w	r3, r3, #7
 8004906:	683a      	ldr	r2, [r7, #0]
 8004908:	429a      	cmp	r2, r3
 800490a:	d001      	beq.n	8004910 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	e0b8      	b.n	8004a82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 0302 	and.w	r3, r3, #2
 8004918:	2b00      	cmp	r3, #0
 800491a:	d020      	beq.n	800495e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 0304 	and.w	r3, r3, #4
 8004924:	2b00      	cmp	r3, #0
 8004926:	d005      	beq.n	8004934 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004928:	4b59      	ldr	r3, [pc, #356]	; (8004a90 <HAL_RCC_ClockConfig+0x1bc>)
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	4a58      	ldr	r2, [pc, #352]	; (8004a90 <HAL_RCC_ClockConfig+0x1bc>)
 800492e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004932:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 0308 	and.w	r3, r3, #8
 800493c:	2b00      	cmp	r3, #0
 800493e:	d005      	beq.n	800494c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004940:	4b53      	ldr	r3, [pc, #332]	; (8004a90 <HAL_RCC_ClockConfig+0x1bc>)
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	4a52      	ldr	r2, [pc, #328]	; (8004a90 <HAL_RCC_ClockConfig+0x1bc>)
 8004946:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800494a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800494c:	4b50      	ldr	r3, [pc, #320]	; (8004a90 <HAL_RCC_ClockConfig+0x1bc>)
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	494d      	ldr	r1, [pc, #308]	; (8004a90 <HAL_RCC_ClockConfig+0x1bc>)
 800495a:	4313      	orrs	r3, r2
 800495c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 0301 	and.w	r3, r3, #1
 8004966:	2b00      	cmp	r3, #0
 8004968:	d044      	beq.n	80049f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	2b01      	cmp	r3, #1
 8004970:	d107      	bne.n	8004982 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004972:	4b47      	ldr	r3, [pc, #284]	; (8004a90 <HAL_RCC_ClockConfig+0x1bc>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800497a:	2b00      	cmp	r3, #0
 800497c:	d119      	bne.n	80049b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e07f      	b.n	8004a82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	2b02      	cmp	r3, #2
 8004988:	d003      	beq.n	8004992 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800498e:	2b03      	cmp	r3, #3
 8004990:	d107      	bne.n	80049a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004992:	4b3f      	ldr	r3, [pc, #252]	; (8004a90 <HAL_RCC_ClockConfig+0x1bc>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800499a:	2b00      	cmp	r3, #0
 800499c:	d109      	bne.n	80049b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e06f      	b.n	8004a82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049a2:	4b3b      	ldr	r3, [pc, #236]	; (8004a90 <HAL_RCC_ClockConfig+0x1bc>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 0302 	and.w	r3, r3, #2
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d101      	bne.n	80049b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e067      	b.n	8004a82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049b2:	4b37      	ldr	r3, [pc, #220]	; (8004a90 <HAL_RCC_ClockConfig+0x1bc>)
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	f023 0203 	bic.w	r2, r3, #3
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	4934      	ldr	r1, [pc, #208]	; (8004a90 <HAL_RCC_ClockConfig+0x1bc>)
 80049c0:	4313      	orrs	r3, r2
 80049c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80049c4:	f7fe f986 	bl	8002cd4 <HAL_GetTick>
 80049c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049ca:	e00a      	b.n	80049e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049cc:	f7fe f982 	bl	8002cd4 <HAL_GetTick>
 80049d0:	4602      	mov	r2, r0
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80049da:	4293      	cmp	r3, r2
 80049dc:	d901      	bls.n	80049e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80049de:	2303      	movs	r3, #3
 80049e0:	e04f      	b.n	8004a82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049e2:	4b2b      	ldr	r3, [pc, #172]	; (8004a90 <HAL_RCC_ClockConfig+0x1bc>)
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	f003 020c 	and.w	r2, r3, #12
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	009b      	lsls	r3, r3, #2
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d1eb      	bne.n	80049cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80049f4:	4b25      	ldr	r3, [pc, #148]	; (8004a8c <HAL_RCC_ClockConfig+0x1b8>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 0307 	and.w	r3, r3, #7
 80049fc:	683a      	ldr	r2, [r7, #0]
 80049fe:	429a      	cmp	r2, r3
 8004a00:	d20c      	bcs.n	8004a1c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a02:	4b22      	ldr	r3, [pc, #136]	; (8004a8c <HAL_RCC_ClockConfig+0x1b8>)
 8004a04:	683a      	ldr	r2, [r7, #0]
 8004a06:	b2d2      	uxtb	r2, r2
 8004a08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a0a:	4b20      	ldr	r3, [pc, #128]	; (8004a8c <HAL_RCC_ClockConfig+0x1b8>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 0307 	and.w	r3, r3, #7
 8004a12:	683a      	ldr	r2, [r7, #0]
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d001      	beq.n	8004a1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	e032      	b.n	8004a82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 0304 	and.w	r3, r3, #4
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d008      	beq.n	8004a3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a28:	4b19      	ldr	r3, [pc, #100]	; (8004a90 <HAL_RCC_ClockConfig+0x1bc>)
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	4916      	ldr	r1, [pc, #88]	; (8004a90 <HAL_RCC_ClockConfig+0x1bc>)
 8004a36:	4313      	orrs	r3, r2
 8004a38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 0308 	and.w	r3, r3, #8
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d009      	beq.n	8004a5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a46:	4b12      	ldr	r3, [pc, #72]	; (8004a90 <HAL_RCC_ClockConfig+0x1bc>)
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	691b      	ldr	r3, [r3, #16]
 8004a52:	00db      	lsls	r3, r3, #3
 8004a54:	490e      	ldr	r1, [pc, #56]	; (8004a90 <HAL_RCC_ClockConfig+0x1bc>)
 8004a56:	4313      	orrs	r3, r2
 8004a58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a5a:	f000 f821 	bl	8004aa0 <HAL_RCC_GetSysClockFreq>
 8004a5e:	4602      	mov	r2, r0
 8004a60:	4b0b      	ldr	r3, [pc, #44]	; (8004a90 <HAL_RCC_ClockConfig+0x1bc>)
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	091b      	lsrs	r3, r3, #4
 8004a66:	f003 030f 	and.w	r3, r3, #15
 8004a6a:	490a      	ldr	r1, [pc, #40]	; (8004a94 <HAL_RCC_ClockConfig+0x1c0>)
 8004a6c:	5ccb      	ldrb	r3, [r1, r3]
 8004a6e:	fa22 f303 	lsr.w	r3, r2, r3
 8004a72:	4a09      	ldr	r2, [pc, #36]	; (8004a98 <HAL_RCC_ClockConfig+0x1c4>)
 8004a74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004a76:	4b09      	ldr	r3, [pc, #36]	; (8004a9c <HAL_RCC_ClockConfig+0x1c8>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f7fe f8e6 	bl	8002c4c <HAL_InitTick>

  return HAL_OK;
 8004a80:	2300      	movs	r3, #0
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3710      	adds	r7, #16
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	40023c00 	.word	0x40023c00
 8004a90:	40023800 	.word	0x40023800
 8004a94:	0800a7b8 	.word	0x0800a7b8
 8004a98:	20000000 	.word	0x20000000
 8004a9c:	20000004 	.word	0x20000004

08004aa0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004aa0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004aa4:	b090      	sub	sp, #64	; 0x40
 8004aa6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	637b      	str	r3, [r7, #52]	; 0x34
 8004aac:	2300      	movs	r3, #0
 8004aae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ab8:	4b59      	ldr	r3, [pc, #356]	; (8004c20 <HAL_RCC_GetSysClockFreq+0x180>)
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	f003 030c 	and.w	r3, r3, #12
 8004ac0:	2b08      	cmp	r3, #8
 8004ac2:	d00d      	beq.n	8004ae0 <HAL_RCC_GetSysClockFreq+0x40>
 8004ac4:	2b08      	cmp	r3, #8
 8004ac6:	f200 80a1 	bhi.w	8004c0c <HAL_RCC_GetSysClockFreq+0x16c>
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d002      	beq.n	8004ad4 <HAL_RCC_GetSysClockFreq+0x34>
 8004ace:	2b04      	cmp	r3, #4
 8004ad0:	d003      	beq.n	8004ada <HAL_RCC_GetSysClockFreq+0x3a>
 8004ad2:	e09b      	b.n	8004c0c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ad4:	4b53      	ldr	r3, [pc, #332]	; (8004c24 <HAL_RCC_GetSysClockFreq+0x184>)
 8004ad6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004ad8:	e09b      	b.n	8004c12 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004ada:	4b53      	ldr	r3, [pc, #332]	; (8004c28 <HAL_RCC_GetSysClockFreq+0x188>)
 8004adc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004ade:	e098      	b.n	8004c12 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ae0:	4b4f      	ldr	r3, [pc, #316]	; (8004c20 <HAL_RCC_GetSysClockFreq+0x180>)
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ae8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004aea:	4b4d      	ldr	r3, [pc, #308]	; (8004c20 <HAL_RCC_GetSysClockFreq+0x180>)
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d028      	beq.n	8004b48 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004af6:	4b4a      	ldr	r3, [pc, #296]	; (8004c20 <HAL_RCC_GetSysClockFreq+0x180>)
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	099b      	lsrs	r3, r3, #6
 8004afc:	2200      	movs	r2, #0
 8004afe:	623b      	str	r3, [r7, #32]
 8004b00:	627a      	str	r2, [r7, #36]	; 0x24
 8004b02:	6a3b      	ldr	r3, [r7, #32]
 8004b04:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004b08:	2100      	movs	r1, #0
 8004b0a:	4b47      	ldr	r3, [pc, #284]	; (8004c28 <HAL_RCC_GetSysClockFreq+0x188>)
 8004b0c:	fb03 f201 	mul.w	r2, r3, r1
 8004b10:	2300      	movs	r3, #0
 8004b12:	fb00 f303 	mul.w	r3, r0, r3
 8004b16:	4413      	add	r3, r2
 8004b18:	4a43      	ldr	r2, [pc, #268]	; (8004c28 <HAL_RCC_GetSysClockFreq+0x188>)
 8004b1a:	fba0 1202 	umull	r1, r2, r0, r2
 8004b1e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b20:	460a      	mov	r2, r1
 8004b22:	62ba      	str	r2, [r7, #40]	; 0x28
 8004b24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b26:	4413      	add	r3, r2
 8004b28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	61bb      	str	r3, [r7, #24]
 8004b30:	61fa      	str	r2, [r7, #28]
 8004b32:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b36:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004b3a:	f7fc fa0b 	bl	8000f54 <__aeabi_uldivmod>
 8004b3e:	4602      	mov	r2, r0
 8004b40:	460b      	mov	r3, r1
 8004b42:	4613      	mov	r3, r2
 8004b44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b46:	e053      	b.n	8004bf0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b48:	4b35      	ldr	r3, [pc, #212]	; (8004c20 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	099b      	lsrs	r3, r3, #6
 8004b4e:	2200      	movs	r2, #0
 8004b50:	613b      	str	r3, [r7, #16]
 8004b52:	617a      	str	r2, [r7, #20]
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004b5a:	f04f 0b00 	mov.w	fp, #0
 8004b5e:	4652      	mov	r2, sl
 8004b60:	465b      	mov	r3, fp
 8004b62:	f04f 0000 	mov.w	r0, #0
 8004b66:	f04f 0100 	mov.w	r1, #0
 8004b6a:	0159      	lsls	r1, r3, #5
 8004b6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b70:	0150      	lsls	r0, r2, #5
 8004b72:	4602      	mov	r2, r0
 8004b74:	460b      	mov	r3, r1
 8004b76:	ebb2 080a 	subs.w	r8, r2, sl
 8004b7a:	eb63 090b 	sbc.w	r9, r3, fp
 8004b7e:	f04f 0200 	mov.w	r2, #0
 8004b82:	f04f 0300 	mov.w	r3, #0
 8004b86:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004b8a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004b8e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004b92:	ebb2 0408 	subs.w	r4, r2, r8
 8004b96:	eb63 0509 	sbc.w	r5, r3, r9
 8004b9a:	f04f 0200 	mov.w	r2, #0
 8004b9e:	f04f 0300 	mov.w	r3, #0
 8004ba2:	00eb      	lsls	r3, r5, #3
 8004ba4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ba8:	00e2      	lsls	r2, r4, #3
 8004baa:	4614      	mov	r4, r2
 8004bac:	461d      	mov	r5, r3
 8004bae:	eb14 030a 	adds.w	r3, r4, sl
 8004bb2:	603b      	str	r3, [r7, #0]
 8004bb4:	eb45 030b 	adc.w	r3, r5, fp
 8004bb8:	607b      	str	r3, [r7, #4]
 8004bba:	f04f 0200 	mov.w	r2, #0
 8004bbe:	f04f 0300 	mov.w	r3, #0
 8004bc2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004bc6:	4629      	mov	r1, r5
 8004bc8:	028b      	lsls	r3, r1, #10
 8004bca:	4621      	mov	r1, r4
 8004bcc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004bd0:	4621      	mov	r1, r4
 8004bd2:	028a      	lsls	r2, r1, #10
 8004bd4:	4610      	mov	r0, r2
 8004bd6:	4619      	mov	r1, r3
 8004bd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bda:	2200      	movs	r2, #0
 8004bdc:	60bb      	str	r3, [r7, #8]
 8004bde:	60fa      	str	r2, [r7, #12]
 8004be0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004be4:	f7fc f9b6 	bl	8000f54 <__aeabi_uldivmod>
 8004be8:	4602      	mov	r2, r0
 8004bea:	460b      	mov	r3, r1
 8004bec:	4613      	mov	r3, r2
 8004bee:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004bf0:	4b0b      	ldr	r3, [pc, #44]	; (8004c20 <HAL_RCC_GetSysClockFreq+0x180>)
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	0c1b      	lsrs	r3, r3, #16
 8004bf6:	f003 0303 	and.w	r3, r3, #3
 8004bfa:	3301      	adds	r3, #1
 8004bfc:	005b      	lsls	r3, r3, #1
 8004bfe:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004c00:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c08:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004c0a:	e002      	b.n	8004c12 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c0c:	4b05      	ldr	r3, [pc, #20]	; (8004c24 <HAL_RCC_GetSysClockFreq+0x184>)
 8004c0e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004c10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	3740      	adds	r7, #64	; 0x40
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c1e:	bf00      	nop
 8004c20:	40023800 	.word	0x40023800
 8004c24:	00f42400 	.word	0x00f42400
 8004c28:	017d7840 	.word	0x017d7840

08004c2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c30:	4b03      	ldr	r3, [pc, #12]	; (8004c40 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c32:	681b      	ldr	r3, [r3, #0]
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr
 8004c3e:	bf00      	nop
 8004c40:	20000000 	.word	0x20000000

08004c44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004c48:	f7ff fff0 	bl	8004c2c <HAL_RCC_GetHCLKFreq>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	4b05      	ldr	r3, [pc, #20]	; (8004c64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	0a9b      	lsrs	r3, r3, #10
 8004c54:	f003 0307 	and.w	r3, r3, #7
 8004c58:	4903      	ldr	r1, [pc, #12]	; (8004c68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c5a:	5ccb      	ldrb	r3, [r1, r3]
 8004c5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	bd80      	pop	{r7, pc}
 8004c64:	40023800 	.word	0x40023800
 8004c68:	0800a7c8 	.word	0x0800a7c8

08004c6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004c70:	f7ff ffdc 	bl	8004c2c <HAL_RCC_GetHCLKFreq>
 8004c74:	4602      	mov	r2, r0
 8004c76:	4b05      	ldr	r3, [pc, #20]	; (8004c8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	0b5b      	lsrs	r3, r3, #13
 8004c7c:	f003 0307 	and.w	r3, r3, #7
 8004c80:	4903      	ldr	r1, [pc, #12]	; (8004c90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c82:	5ccb      	ldrb	r3, [r1, r3]
 8004c84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	bd80      	pop	{r7, pc}
 8004c8c:	40023800 	.word	0x40023800
 8004c90:	0800a7c8 	.word	0x0800a7c8

08004c94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b082      	sub	sp, #8
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d101      	bne.n	8004ca6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e03f      	b.n	8004d26 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d106      	bne.n	8004cc0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f7fd fe4c 	bl	8002958 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2224      	movs	r2, #36	; 0x24
 8004cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	68da      	ldr	r2, [r3, #12]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004cd6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f000 f929 	bl	8004f30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	691a      	ldr	r2, [r3, #16]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004cec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	695a      	ldr	r2, [r3, #20]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004cfc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	68da      	ldr	r2, [r3, #12]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2200      	movs	r2, #0
 8004d12:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2220      	movs	r2, #32
 8004d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2220      	movs	r2, #32
 8004d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004d24:	2300      	movs	r3, #0
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3708      	adds	r7, #8
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}

08004d2e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d2e:	b580      	push	{r7, lr}
 8004d30:	b08a      	sub	sp, #40	; 0x28
 8004d32:	af02      	add	r7, sp, #8
 8004d34:	60f8      	str	r0, [r7, #12]
 8004d36:	60b9      	str	r1, [r7, #8]
 8004d38:	603b      	str	r3, [r7, #0]
 8004d3a:	4613      	mov	r3, r2
 8004d3c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	2b20      	cmp	r3, #32
 8004d4c:	d17c      	bne.n	8004e48 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d002      	beq.n	8004d5a <HAL_UART_Transmit+0x2c>
 8004d54:	88fb      	ldrh	r3, [r7, #6]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d101      	bne.n	8004d5e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e075      	b.n	8004e4a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d101      	bne.n	8004d6c <HAL_UART_Transmit+0x3e>
 8004d68:	2302      	movs	r3, #2
 8004d6a:	e06e      	b.n	8004e4a <HAL_UART_Transmit+0x11c>
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2200      	movs	r2, #0
 8004d78:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2221      	movs	r2, #33	; 0x21
 8004d7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d82:	f7fd ffa7 	bl	8002cd4 <HAL_GetTick>
 8004d86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	88fa      	ldrh	r2, [r7, #6]
 8004d8c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	88fa      	ldrh	r2, [r7, #6]
 8004d92:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d9c:	d108      	bne.n	8004db0 <HAL_UART_Transmit+0x82>
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	691b      	ldr	r3, [r3, #16]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d104      	bne.n	8004db0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004da6:	2300      	movs	r3, #0
 8004da8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	61bb      	str	r3, [r7, #24]
 8004dae:	e003      	b.n	8004db8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004db4:	2300      	movs	r3, #0
 8004db6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004dc0:	e02a      	b.n	8004e18 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	9300      	str	r3, [sp, #0]
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	2180      	movs	r1, #128	; 0x80
 8004dcc:	68f8      	ldr	r0, [r7, #12]
 8004dce:	f000 f840 	bl	8004e52 <UART_WaitOnFlagUntilTimeout>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d001      	beq.n	8004ddc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004dd8:	2303      	movs	r3, #3
 8004dda:	e036      	b.n	8004e4a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004ddc:	69fb      	ldr	r3, [r7, #28]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d10b      	bne.n	8004dfa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004de2:	69bb      	ldr	r3, [r7, #24]
 8004de4:	881b      	ldrh	r3, [r3, #0]
 8004de6:	461a      	mov	r2, r3
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004df0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004df2:	69bb      	ldr	r3, [r7, #24]
 8004df4:	3302      	adds	r3, #2
 8004df6:	61bb      	str	r3, [r7, #24]
 8004df8:	e007      	b.n	8004e0a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004dfa:	69fb      	ldr	r3, [r7, #28]
 8004dfc:	781a      	ldrb	r2, [r3, #0]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004e04:	69fb      	ldr	r3, [r7, #28]
 8004e06:	3301      	adds	r3, #1
 8004e08:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	3b01      	subs	r3, #1
 8004e12:	b29a      	uxth	r2, r3
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d1cf      	bne.n	8004dc2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	9300      	str	r3, [sp, #0]
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	2140      	movs	r1, #64	; 0x40
 8004e2c:	68f8      	ldr	r0, [r7, #12]
 8004e2e:	f000 f810 	bl	8004e52 <UART_WaitOnFlagUntilTimeout>
 8004e32:	4603      	mov	r3, r0
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d001      	beq.n	8004e3c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004e38:	2303      	movs	r3, #3
 8004e3a:	e006      	b.n	8004e4a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2220      	movs	r2, #32
 8004e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004e44:	2300      	movs	r3, #0
 8004e46:	e000      	b.n	8004e4a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004e48:	2302      	movs	r3, #2
  }
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3720      	adds	r7, #32
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}

08004e52 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004e52:	b580      	push	{r7, lr}
 8004e54:	b090      	sub	sp, #64	; 0x40
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	60f8      	str	r0, [r7, #12]
 8004e5a:	60b9      	str	r1, [r7, #8]
 8004e5c:	603b      	str	r3, [r7, #0]
 8004e5e:	4613      	mov	r3, r2
 8004e60:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e62:	e050      	b.n	8004f06 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e6a:	d04c      	beq.n	8004f06 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004e6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d007      	beq.n	8004e82 <UART_WaitOnFlagUntilTimeout+0x30>
 8004e72:	f7fd ff2f 	bl	8002cd4 <HAL_GetTick>
 8004e76:	4602      	mov	r2, r0
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	1ad3      	subs	r3, r2, r3
 8004e7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	d241      	bcs.n	8004f06 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	330c      	adds	r3, #12
 8004e88:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e8c:	e853 3f00 	ldrex	r3, [r3]
 8004e90:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e94:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004e98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	330c      	adds	r3, #12
 8004ea0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004ea2:	637a      	str	r2, [r7, #52]	; 0x34
 8004ea4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ea6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004ea8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004eaa:	e841 2300 	strex	r3, r2, [r1]
 8004eae:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d1e5      	bne.n	8004e82 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	3314      	adds	r3, #20
 8004ebc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	e853 3f00 	ldrex	r3, [r3]
 8004ec4:	613b      	str	r3, [r7, #16]
   return(result);
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	f023 0301 	bic.w	r3, r3, #1
 8004ecc:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	3314      	adds	r3, #20
 8004ed4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ed6:	623a      	str	r2, [r7, #32]
 8004ed8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eda:	69f9      	ldr	r1, [r7, #28]
 8004edc:	6a3a      	ldr	r2, [r7, #32]
 8004ede:	e841 2300 	strex	r3, r2, [r1]
 8004ee2:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ee4:	69bb      	ldr	r3, [r7, #24]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d1e5      	bne.n	8004eb6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2220      	movs	r2, #32
 8004eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2220      	movs	r2, #32
 8004ef6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2200      	movs	r2, #0
 8004efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004f02:	2303      	movs	r3, #3
 8004f04:	e00f      	b.n	8004f26 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	4013      	ands	r3, r2
 8004f10:	68ba      	ldr	r2, [r7, #8]
 8004f12:	429a      	cmp	r2, r3
 8004f14:	bf0c      	ite	eq
 8004f16:	2301      	moveq	r3, #1
 8004f18:	2300      	movne	r3, #0
 8004f1a:	b2db      	uxtb	r3, r3
 8004f1c:	461a      	mov	r2, r3
 8004f1e:	79fb      	ldrb	r3, [r7, #7]
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d09f      	beq.n	8004e64 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004f24:	2300      	movs	r3, #0
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3740      	adds	r7, #64	; 0x40
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}
	...

08004f30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f34:	b0c0      	sub	sp, #256	; 0x100
 8004f36:	af00      	add	r7, sp, #0
 8004f38:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	691b      	ldr	r3, [r3, #16]
 8004f44:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f4c:	68d9      	ldr	r1, [r3, #12]
 8004f4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	ea40 0301 	orr.w	r3, r0, r1
 8004f58:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004f5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f5e:	689a      	ldr	r2, [r3, #8]
 8004f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f64:	691b      	ldr	r3, [r3, #16]
 8004f66:	431a      	orrs	r2, r3
 8004f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f6c:	695b      	ldr	r3, [r3, #20]
 8004f6e:	431a      	orrs	r2, r3
 8004f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f74:	69db      	ldr	r3, [r3, #28]
 8004f76:	4313      	orrs	r3, r2
 8004f78:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004f88:	f021 010c 	bic.w	r1, r1, #12
 8004f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004f96:	430b      	orrs	r3, r1
 8004f98:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	695b      	ldr	r3, [r3, #20]
 8004fa2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004fa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004faa:	6999      	ldr	r1, [r3, #24]
 8004fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	ea40 0301 	orr.w	r3, r0, r1
 8004fb6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	4b8f      	ldr	r3, [pc, #572]	; (80051fc <UART_SetConfig+0x2cc>)
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d005      	beq.n	8004fd0 <UART_SetConfig+0xa0>
 8004fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	4b8d      	ldr	r3, [pc, #564]	; (8005200 <UART_SetConfig+0x2d0>)
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d104      	bne.n	8004fda <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004fd0:	f7ff fe4c 	bl	8004c6c <HAL_RCC_GetPCLK2Freq>
 8004fd4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004fd8:	e003      	b.n	8004fe2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004fda:	f7ff fe33 	bl	8004c44 <HAL_RCC_GetPCLK1Freq>
 8004fde:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004fe2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fe6:	69db      	ldr	r3, [r3, #28]
 8004fe8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fec:	f040 810c 	bne.w	8005208 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004ff0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004ffa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004ffe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005002:	4622      	mov	r2, r4
 8005004:	462b      	mov	r3, r5
 8005006:	1891      	adds	r1, r2, r2
 8005008:	65b9      	str	r1, [r7, #88]	; 0x58
 800500a:	415b      	adcs	r3, r3
 800500c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800500e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005012:	4621      	mov	r1, r4
 8005014:	eb12 0801 	adds.w	r8, r2, r1
 8005018:	4629      	mov	r1, r5
 800501a:	eb43 0901 	adc.w	r9, r3, r1
 800501e:	f04f 0200 	mov.w	r2, #0
 8005022:	f04f 0300 	mov.w	r3, #0
 8005026:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800502a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800502e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005032:	4690      	mov	r8, r2
 8005034:	4699      	mov	r9, r3
 8005036:	4623      	mov	r3, r4
 8005038:	eb18 0303 	adds.w	r3, r8, r3
 800503c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005040:	462b      	mov	r3, r5
 8005042:	eb49 0303 	adc.w	r3, r9, r3
 8005046:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800504a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005056:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800505a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800505e:	460b      	mov	r3, r1
 8005060:	18db      	adds	r3, r3, r3
 8005062:	653b      	str	r3, [r7, #80]	; 0x50
 8005064:	4613      	mov	r3, r2
 8005066:	eb42 0303 	adc.w	r3, r2, r3
 800506a:	657b      	str	r3, [r7, #84]	; 0x54
 800506c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005070:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005074:	f7fb ff6e 	bl	8000f54 <__aeabi_uldivmod>
 8005078:	4602      	mov	r2, r0
 800507a:	460b      	mov	r3, r1
 800507c:	4b61      	ldr	r3, [pc, #388]	; (8005204 <UART_SetConfig+0x2d4>)
 800507e:	fba3 2302 	umull	r2, r3, r3, r2
 8005082:	095b      	lsrs	r3, r3, #5
 8005084:	011c      	lsls	r4, r3, #4
 8005086:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800508a:	2200      	movs	r2, #0
 800508c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005090:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005094:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005098:	4642      	mov	r2, r8
 800509a:	464b      	mov	r3, r9
 800509c:	1891      	adds	r1, r2, r2
 800509e:	64b9      	str	r1, [r7, #72]	; 0x48
 80050a0:	415b      	adcs	r3, r3
 80050a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050a4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80050a8:	4641      	mov	r1, r8
 80050aa:	eb12 0a01 	adds.w	sl, r2, r1
 80050ae:	4649      	mov	r1, r9
 80050b0:	eb43 0b01 	adc.w	fp, r3, r1
 80050b4:	f04f 0200 	mov.w	r2, #0
 80050b8:	f04f 0300 	mov.w	r3, #0
 80050bc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80050c0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80050c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80050c8:	4692      	mov	sl, r2
 80050ca:	469b      	mov	fp, r3
 80050cc:	4643      	mov	r3, r8
 80050ce:	eb1a 0303 	adds.w	r3, sl, r3
 80050d2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80050d6:	464b      	mov	r3, r9
 80050d8:	eb4b 0303 	adc.w	r3, fp, r3
 80050dc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80050e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80050ec:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80050f0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80050f4:	460b      	mov	r3, r1
 80050f6:	18db      	adds	r3, r3, r3
 80050f8:	643b      	str	r3, [r7, #64]	; 0x40
 80050fa:	4613      	mov	r3, r2
 80050fc:	eb42 0303 	adc.w	r3, r2, r3
 8005100:	647b      	str	r3, [r7, #68]	; 0x44
 8005102:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005106:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800510a:	f7fb ff23 	bl	8000f54 <__aeabi_uldivmod>
 800510e:	4602      	mov	r2, r0
 8005110:	460b      	mov	r3, r1
 8005112:	4611      	mov	r1, r2
 8005114:	4b3b      	ldr	r3, [pc, #236]	; (8005204 <UART_SetConfig+0x2d4>)
 8005116:	fba3 2301 	umull	r2, r3, r3, r1
 800511a:	095b      	lsrs	r3, r3, #5
 800511c:	2264      	movs	r2, #100	; 0x64
 800511e:	fb02 f303 	mul.w	r3, r2, r3
 8005122:	1acb      	subs	r3, r1, r3
 8005124:	00db      	lsls	r3, r3, #3
 8005126:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800512a:	4b36      	ldr	r3, [pc, #216]	; (8005204 <UART_SetConfig+0x2d4>)
 800512c:	fba3 2302 	umull	r2, r3, r3, r2
 8005130:	095b      	lsrs	r3, r3, #5
 8005132:	005b      	lsls	r3, r3, #1
 8005134:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005138:	441c      	add	r4, r3
 800513a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800513e:	2200      	movs	r2, #0
 8005140:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005144:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005148:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800514c:	4642      	mov	r2, r8
 800514e:	464b      	mov	r3, r9
 8005150:	1891      	adds	r1, r2, r2
 8005152:	63b9      	str	r1, [r7, #56]	; 0x38
 8005154:	415b      	adcs	r3, r3
 8005156:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005158:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800515c:	4641      	mov	r1, r8
 800515e:	1851      	adds	r1, r2, r1
 8005160:	6339      	str	r1, [r7, #48]	; 0x30
 8005162:	4649      	mov	r1, r9
 8005164:	414b      	adcs	r3, r1
 8005166:	637b      	str	r3, [r7, #52]	; 0x34
 8005168:	f04f 0200 	mov.w	r2, #0
 800516c:	f04f 0300 	mov.w	r3, #0
 8005170:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005174:	4659      	mov	r1, fp
 8005176:	00cb      	lsls	r3, r1, #3
 8005178:	4651      	mov	r1, sl
 800517a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800517e:	4651      	mov	r1, sl
 8005180:	00ca      	lsls	r2, r1, #3
 8005182:	4610      	mov	r0, r2
 8005184:	4619      	mov	r1, r3
 8005186:	4603      	mov	r3, r0
 8005188:	4642      	mov	r2, r8
 800518a:	189b      	adds	r3, r3, r2
 800518c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005190:	464b      	mov	r3, r9
 8005192:	460a      	mov	r2, r1
 8005194:	eb42 0303 	adc.w	r3, r2, r3
 8005198:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800519c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80051a8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80051ac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80051b0:	460b      	mov	r3, r1
 80051b2:	18db      	adds	r3, r3, r3
 80051b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80051b6:	4613      	mov	r3, r2
 80051b8:	eb42 0303 	adc.w	r3, r2, r3
 80051bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80051c2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80051c6:	f7fb fec5 	bl	8000f54 <__aeabi_uldivmod>
 80051ca:	4602      	mov	r2, r0
 80051cc:	460b      	mov	r3, r1
 80051ce:	4b0d      	ldr	r3, [pc, #52]	; (8005204 <UART_SetConfig+0x2d4>)
 80051d0:	fba3 1302 	umull	r1, r3, r3, r2
 80051d4:	095b      	lsrs	r3, r3, #5
 80051d6:	2164      	movs	r1, #100	; 0x64
 80051d8:	fb01 f303 	mul.w	r3, r1, r3
 80051dc:	1ad3      	subs	r3, r2, r3
 80051de:	00db      	lsls	r3, r3, #3
 80051e0:	3332      	adds	r3, #50	; 0x32
 80051e2:	4a08      	ldr	r2, [pc, #32]	; (8005204 <UART_SetConfig+0x2d4>)
 80051e4:	fba2 2303 	umull	r2, r3, r2, r3
 80051e8:	095b      	lsrs	r3, r3, #5
 80051ea:	f003 0207 	and.w	r2, r3, #7
 80051ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4422      	add	r2, r4
 80051f6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80051f8:	e106      	b.n	8005408 <UART_SetConfig+0x4d8>
 80051fa:	bf00      	nop
 80051fc:	40011000 	.word	0x40011000
 8005200:	40011400 	.word	0x40011400
 8005204:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005208:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800520c:	2200      	movs	r2, #0
 800520e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005212:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005216:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800521a:	4642      	mov	r2, r8
 800521c:	464b      	mov	r3, r9
 800521e:	1891      	adds	r1, r2, r2
 8005220:	6239      	str	r1, [r7, #32]
 8005222:	415b      	adcs	r3, r3
 8005224:	627b      	str	r3, [r7, #36]	; 0x24
 8005226:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800522a:	4641      	mov	r1, r8
 800522c:	1854      	adds	r4, r2, r1
 800522e:	4649      	mov	r1, r9
 8005230:	eb43 0501 	adc.w	r5, r3, r1
 8005234:	f04f 0200 	mov.w	r2, #0
 8005238:	f04f 0300 	mov.w	r3, #0
 800523c:	00eb      	lsls	r3, r5, #3
 800523e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005242:	00e2      	lsls	r2, r4, #3
 8005244:	4614      	mov	r4, r2
 8005246:	461d      	mov	r5, r3
 8005248:	4643      	mov	r3, r8
 800524a:	18e3      	adds	r3, r4, r3
 800524c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005250:	464b      	mov	r3, r9
 8005252:	eb45 0303 	adc.w	r3, r5, r3
 8005256:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800525a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005266:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800526a:	f04f 0200 	mov.w	r2, #0
 800526e:	f04f 0300 	mov.w	r3, #0
 8005272:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005276:	4629      	mov	r1, r5
 8005278:	008b      	lsls	r3, r1, #2
 800527a:	4621      	mov	r1, r4
 800527c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005280:	4621      	mov	r1, r4
 8005282:	008a      	lsls	r2, r1, #2
 8005284:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005288:	f7fb fe64 	bl	8000f54 <__aeabi_uldivmod>
 800528c:	4602      	mov	r2, r0
 800528e:	460b      	mov	r3, r1
 8005290:	4b60      	ldr	r3, [pc, #384]	; (8005414 <UART_SetConfig+0x4e4>)
 8005292:	fba3 2302 	umull	r2, r3, r3, r2
 8005296:	095b      	lsrs	r3, r3, #5
 8005298:	011c      	lsls	r4, r3, #4
 800529a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800529e:	2200      	movs	r2, #0
 80052a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80052a4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80052a8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80052ac:	4642      	mov	r2, r8
 80052ae:	464b      	mov	r3, r9
 80052b0:	1891      	adds	r1, r2, r2
 80052b2:	61b9      	str	r1, [r7, #24]
 80052b4:	415b      	adcs	r3, r3
 80052b6:	61fb      	str	r3, [r7, #28]
 80052b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80052bc:	4641      	mov	r1, r8
 80052be:	1851      	adds	r1, r2, r1
 80052c0:	6139      	str	r1, [r7, #16]
 80052c2:	4649      	mov	r1, r9
 80052c4:	414b      	adcs	r3, r1
 80052c6:	617b      	str	r3, [r7, #20]
 80052c8:	f04f 0200 	mov.w	r2, #0
 80052cc:	f04f 0300 	mov.w	r3, #0
 80052d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80052d4:	4659      	mov	r1, fp
 80052d6:	00cb      	lsls	r3, r1, #3
 80052d8:	4651      	mov	r1, sl
 80052da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052de:	4651      	mov	r1, sl
 80052e0:	00ca      	lsls	r2, r1, #3
 80052e2:	4610      	mov	r0, r2
 80052e4:	4619      	mov	r1, r3
 80052e6:	4603      	mov	r3, r0
 80052e8:	4642      	mov	r2, r8
 80052ea:	189b      	adds	r3, r3, r2
 80052ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80052f0:	464b      	mov	r3, r9
 80052f2:	460a      	mov	r2, r1
 80052f4:	eb42 0303 	adc.w	r3, r2, r3
 80052f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80052fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	2200      	movs	r2, #0
 8005304:	67bb      	str	r3, [r7, #120]	; 0x78
 8005306:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005308:	f04f 0200 	mov.w	r2, #0
 800530c:	f04f 0300 	mov.w	r3, #0
 8005310:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005314:	4649      	mov	r1, r9
 8005316:	008b      	lsls	r3, r1, #2
 8005318:	4641      	mov	r1, r8
 800531a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800531e:	4641      	mov	r1, r8
 8005320:	008a      	lsls	r2, r1, #2
 8005322:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005326:	f7fb fe15 	bl	8000f54 <__aeabi_uldivmod>
 800532a:	4602      	mov	r2, r0
 800532c:	460b      	mov	r3, r1
 800532e:	4611      	mov	r1, r2
 8005330:	4b38      	ldr	r3, [pc, #224]	; (8005414 <UART_SetConfig+0x4e4>)
 8005332:	fba3 2301 	umull	r2, r3, r3, r1
 8005336:	095b      	lsrs	r3, r3, #5
 8005338:	2264      	movs	r2, #100	; 0x64
 800533a:	fb02 f303 	mul.w	r3, r2, r3
 800533e:	1acb      	subs	r3, r1, r3
 8005340:	011b      	lsls	r3, r3, #4
 8005342:	3332      	adds	r3, #50	; 0x32
 8005344:	4a33      	ldr	r2, [pc, #204]	; (8005414 <UART_SetConfig+0x4e4>)
 8005346:	fba2 2303 	umull	r2, r3, r2, r3
 800534a:	095b      	lsrs	r3, r3, #5
 800534c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005350:	441c      	add	r4, r3
 8005352:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005356:	2200      	movs	r2, #0
 8005358:	673b      	str	r3, [r7, #112]	; 0x70
 800535a:	677a      	str	r2, [r7, #116]	; 0x74
 800535c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005360:	4642      	mov	r2, r8
 8005362:	464b      	mov	r3, r9
 8005364:	1891      	adds	r1, r2, r2
 8005366:	60b9      	str	r1, [r7, #8]
 8005368:	415b      	adcs	r3, r3
 800536a:	60fb      	str	r3, [r7, #12]
 800536c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005370:	4641      	mov	r1, r8
 8005372:	1851      	adds	r1, r2, r1
 8005374:	6039      	str	r1, [r7, #0]
 8005376:	4649      	mov	r1, r9
 8005378:	414b      	adcs	r3, r1
 800537a:	607b      	str	r3, [r7, #4]
 800537c:	f04f 0200 	mov.w	r2, #0
 8005380:	f04f 0300 	mov.w	r3, #0
 8005384:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005388:	4659      	mov	r1, fp
 800538a:	00cb      	lsls	r3, r1, #3
 800538c:	4651      	mov	r1, sl
 800538e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005392:	4651      	mov	r1, sl
 8005394:	00ca      	lsls	r2, r1, #3
 8005396:	4610      	mov	r0, r2
 8005398:	4619      	mov	r1, r3
 800539a:	4603      	mov	r3, r0
 800539c:	4642      	mov	r2, r8
 800539e:	189b      	adds	r3, r3, r2
 80053a0:	66bb      	str	r3, [r7, #104]	; 0x68
 80053a2:	464b      	mov	r3, r9
 80053a4:	460a      	mov	r2, r1
 80053a6:	eb42 0303 	adc.w	r3, r2, r3
 80053aa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80053ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	2200      	movs	r2, #0
 80053b4:	663b      	str	r3, [r7, #96]	; 0x60
 80053b6:	667a      	str	r2, [r7, #100]	; 0x64
 80053b8:	f04f 0200 	mov.w	r2, #0
 80053bc:	f04f 0300 	mov.w	r3, #0
 80053c0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80053c4:	4649      	mov	r1, r9
 80053c6:	008b      	lsls	r3, r1, #2
 80053c8:	4641      	mov	r1, r8
 80053ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80053ce:	4641      	mov	r1, r8
 80053d0:	008a      	lsls	r2, r1, #2
 80053d2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80053d6:	f7fb fdbd 	bl	8000f54 <__aeabi_uldivmod>
 80053da:	4602      	mov	r2, r0
 80053dc:	460b      	mov	r3, r1
 80053de:	4b0d      	ldr	r3, [pc, #52]	; (8005414 <UART_SetConfig+0x4e4>)
 80053e0:	fba3 1302 	umull	r1, r3, r3, r2
 80053e4:	095b      	lsrs	r3, r3, #5
 80053e6:	2164      	movs	r1, #100	; 0x64
 80053e8:	fb01 f303 	mul.w	r3, r1, r3
 80053ec:	1ad3      	subs	r3, r2, r3
 80053ee:	011b      	lsls	r3, r3, #4
 80053f0:	3332      	adds	r3, #50	; 0x32
 80053f2:	4a08      	ldr	r2, [pc, #32]	; (8005414 <UART_SetConfig+0x4e4>)
 80053f4:	fba2 2303 	umull	r2, r3, r2, r3
 80053f8:	095b      	lsrs	r3, r3, #5
 80053fa:	f003 020f 	and.w	r2, r3, #15
 80053fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4422      	add	r2, r4
 8005406:	609a      	str	r2, [r3, #8]
}
 8005408:	bf00      	nop
 800540a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800540e:	46bd      	mov	sp, r7
 8005410:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005414:	51eb851f 	.word	0x51eb851f

08005418 <__cvt>:
 8005418:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800541c:	ec55 4b10 	vmov	r4, r5, d0
 8005420:	2d00      	cmp	r5, #0
 8005422:	460e      	mov	r6, r1
 8005424:	4619      	mov	r1, r3
 8005426:	462b      	mov	r3, r5
 8005428:	bfbb      	ittet	lt
 800542a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800542e:	461d      	movlt	r5, r3
 8005430:	2300      	movge	r3, #0
 8005432:	232d      	movlt	r3, #45	; 0x2d
 8005434:	700b      	strb	r3, [r1, #0]
 8005436:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005438:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800543c:	4691      	mov	r9, r2
 800543e:	f023 0820 	bic.w	r8, r3, #32
 8005442:	bfbc      	itt	lt
 8005444:	4622      	movlt	r2, r4
 8005446:	4614      	movlt	r4, r2
 8005448:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800544c:	d005      	beq.n	800545a <__cvt+0x42>
 800544e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005452:	d100      	bne.n	8005456 <__cvt+0x3e>
 8005454:	3601      	adds	r6, #1
 8005456:	2102      	movs	r1, #2
 8005458:	e000      	b.n	800545c <__cvt+0x44>
 800545a:	2103      	movs	r1, #3
 800545c:	ab03      	add	r3, sp, #12
 800545e:	9301      	str	r3, [sp, #4]
 8005460:	ab02      	add	r3, sp, #8
 8005462:	9300      	str	r3, [sp, #0]
 8005464:	ec45 4b10 	vmov	d0, r4, r5
 8005468:	4653      	mov	r3, sl
 800546a:	4632      	mov	r2, r6
 800546c:	f001 f980 	bl	8006770 <_dtoa_r>
 8005470:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005474:	4607      	mov	r7, r0
 8005476:	d102      	bne.n	800547e <__cvt+0x66>
 8005478:	f019 0f01 	tst.w	r9, #1
 800547c:	d022      	beq.n	80054c4 <__cvt+0xac>
 800547e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005482:	eb07 0906 	add.w	r9, r7, r6
 8005486:	d110      	bne.n	80054aa <__cvt+0x92>
 8005488:	783b      	ldrb	r3, [r7, #0]
 800548a:	2b30      	cmp	r3, #48	; 0x30
 800548c:	d10a      	bne.n	80054a4 <__cvt+0x8c>
 800548e:	2200      	movs	r2, #0
 8005490:	2300      	movs	r3, #0
 8005492:	4620      	mov	r0, r4
 8005494:	4629      	mov	r1, r5
 8005496:	f7fb fb1f 	bl	8000ad8 <__aeabi_dcmpeq>
 800549a:	b918      	cbnz	r0, 80054a4 <__cvt+0x8c>
 800549c:	f1c6 0601 	rsb	r6, r6, #1
 80054a0:	f8ca 6000 	str.w	r6, [sl]
 80054a4:	f8da 3000 	ldr.w	r3, [sl]
 80054a8:	4499      	add	r9, r3
 80054aa:	2200      	movs	r2, #0
 80054ac:	2300      	movs	r3, #0
 80054ae:	4620      	mov	r0, r4
 80054b0:	4629      	mov	r1, r5
 80054b2:	f7fb fb11 	bl	8000ad8 <__aeabi_dcmpeq>
 80054b6:	b108      	cbz	r0, 80054bc <__cvt+0xa4>
 80054b8:	f8cd 900c 	str.w	r9, [sp, #12]
 80054bc:	2230      	movs	r2, #48	; 0x30
 80054be:	9b03      	ldr	r3, [sp, #12]
 80054c0:	454b      	cmp	r3, r9
 80054c2:	d307      	bcc.n	80054d4 <__cvt+0xbc>
 80054c4:	9b03      	ldr	r3, [sp, #12]
 80054c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80054c8:	1bdb      	subs	r3, r3, r7
 80054ca:	4638      	mov	r0, r7
 80054cc:	6013      	str	r3, [r2, #0]
 80054ce:	b004      	add	sp, #16
 80054d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054d4:	1c59      	adds	r1, r3, #1
 80054d6:	9103      	str	r1, [sp, #12]
 80054d8:	701a      	strb	r2, [r3, #0]
 80054da:	e7f0      	b.n	80054be <__cvt+0xa6>

080054dc <__exponent>:
 80054dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80054de:	4603      	mov	r3, r0
 80054e0:	2900      	cmp	r1, #0
 80054e2:	bfb8      	it	lt
 80054e4:	4249      	neglt	r1, r1
 80054e6:	f803 2b02 	strb.w	r2, [r3], #2
 80054ea:	bfb4      	ite	lt
 80054ec:	222d      	movlt	r2, #45	; 0x2d
 80054ee:	222b      	movge	r2, #43	; 0x2b
 80054f0:	2909      	cmp	r1, #9
 80054f2:	7042      	strb	r2, [r0, #1]
 80054f4:	dd2a      	ble.n	800554c <__exponent+0x70>
 80054f6:	f10d 0207 	add.w	r2, sp, #7
 80054fa:	4617      	mov	r7, r2
 80054fc:	260a      	movs	r6, #10
 80054fe:	4694      	mov	ip, r2
 8005500:	fb91 f5f6 	sdiv	r5, r1, r6
 8005504:	fb06 1415 	mls	r4, r6, r5, r1
 8005508:	3430      	adds	r4, #48	; 0x30
 800550a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800550e:	460c      	mov	r4, r1
 8005510:	2c63      	cmp	r4, #99	; 0x63
 8005512:	f102 32ff 	add.w	r2, r2, #4294967295
 8005516:	4629      	mov	r1, r5
 8005518:	dcf1      	bgt.n	80054fe <__exponent+0x22>
 800551a:	3130      	adds	r1, #48	; 0x30
 800551c:	f1ac 0402 	sub.w	r4, ip, #2
 8005520:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005524:	1c41      	adds	r1, r0, #1
 8005526:	4622      	mov	r2, r4
 8005528:	42ba      	cmp	r2, r7
 800552a:	d30a      	bcc.n	8005542 <__exponent+0x66>
 800552c:	f10d 0209 	add.w	r2, sp, #9
 8005530:	eba2 020c 	sub.w	r2, r2, ip
 8005534:	42bc      	cmp	r4, r7
 8005536:	bf88      	it	hi
 8005538:	2200      	movhi	r2, #0
 800553a:	4413      	add	r3, r2
 800553c:	1a18      	subs	r0, r3, r0
 800553e:	b003      	add	sp, #12
 8005540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005542:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005546:	f801 5f01 	strb.w	r5, [r1, #1]!
 800554a:	e7ed      	b.n	8005528 <__exponent+0x4c>
 800554c:	2330      	movs	r3, #48	; 0x30
 800554e:	3130      	adds	r1, #48	; 0x30
 8005550:	7083      	strb	r3, [r0, #2]
 8005552:	70c1      	strb	r1, [r0, #3]
 8005554:	1d03      	adds	r3, r0, #4
 8005556:	e7f1      	b.n	800553c <__exponent+0x60>

08005558 <_printf_float>:
 8005558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800555c:	ed2d 8b02 	vpush	{d8}
 8005560:	b08d      	sub	sp, #52	; 0x34
 8005562:	460c      	mov	r4, r1
 8005564:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005568:	4616      	mov	r6, r2
 800556a:	461f      	mov	r7, r3
 800556c:	4605      	mov	r5, r0
 800556e:	f000 fff9 	bl	8006564 <_localeconv_r>
 8005572:	f8d0 a000 	ldr.w	sl, [r0]
 8005576:	4650      	mov	r0, sl
 8005578:	f7fa fe82 	bl	8000280 <strlen>
 800557c:	2300      	movs	r3, #0
 800557e:	930a      	str	r3, [sp, #40]	; 0x28
 8005580:	6823      	ldr	r3, [r4, #0]
 8005582:	9305      	str	r3, [sp, #20]
 8005584:	f8d8 3000 	ldr.w	r3, [r8]
 8005588:	f894 b018 	ldrb.w	fp, [r4, #24]
 800558c:	3307      	adds	r3, #7
 800558e:	f023 0307 	bic.w	r3, r3, #7
 8005592:	f103 0208 	add.w	r2, r3, #8
 8005596:	f8c8 2000 	str.w	r2, [r8]
 800559a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800559e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80055a2:	9307      	str	r3, [sp, #28]
 80055a4:	f8cd 8018 	str.w	r8, [sp, #24]
 80055a8:	ee08 0a10 	vmov	s16, r0
 80055ac:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80055b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80055b4:	4b9e      	ldr	r3, [pc, #632]	; (8005830 <_printf_float+0x2d8>)
 80055b6:	f04f 32ff 	mov.w	r2, #4294967295
 80055ba:	f7fb fabf 	bl	8000b3c <__aeabi_dcmpun>
 80055be:	bb88      	cbnz	r0, 8005624 <_printf_float+0xcc>
 80055c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80055c4:	4b9a      	ldr	r3, [pc, #616]	; (8005830 <_printf_float+0x2d8>)
 80055c6:	f04f 32ff 	mov.w	r2, #4294967295
 80055ca:	f7fb fa99 	bl	8000b00 <__aeabi_dcmple>
 80055ce:	bb48      	cbnz	r0, 8005624 <_printf_float+0xcc>
 80055d0:	2200      	movs	r2, #0
 80055d2:	2300      	movs	r3, #0
 80055d4:	4640      	mov	r0, r8
 80055d6:	4649      	mov	r1, r9
 80055d8:	f7fb fa88 	bl	8000aec <__aeabi_dcmplt>
 80055dc:	b110      	cbz	r0, 80055e4 <_printf_float+0x8c>
 80055de:	232d      	movs	r3, #45	; 0x2d
 80055e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055e4:	4a93      	ldr	r2, [pc, #588]	; (8005834 <_printf_float+0x2dc>)
 80055e6:	4b94      	ldr	r3, [pc, #592]	; (8005838 <_printf_float+0x2e0>)
 80055e8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80055ec:	bf94      	ite	ls
 80055ee:	4690      	movls	r8, r2
 80055f0:	4698      	movhi	r8, r3
 80055f2:	2303      	movs	r3, #3
 80055f4:	6123      	str	r3, [r4, #16]
 80055f6:	9b05      	ldr	r3, [sp, #20]
 80055f8:	f023 0304 	bic.w	r3, r3, #4
 80055fc:	6023      	str	r3, [r4, #0]
 80055fe:	f04f 0900 	mov.w	r9, #0
 8005602:	9700      	str	r7, [sp, #0]
 8005604:	4633      	mov	r3, r6
 8005606:	aa0b      	add	r2, sp, #44	; 0x2c
 8005608:	4621      	mov	r1, r4
 800560a:	4628      	mov	r0, r5
 800560c:	f000 f9da 	bl	80059c4 <_printf_common>
 8005610:	3001      	adds	r0, #1
 8005612:	f040 8090 	bne.w	8005736 <_printf_float+0x1de>
 8005616:	f04f 30ff 	mov.w	r0, #4294967295
 800561a:	b00d      	add	sp, #52	; 0x34
 800561c:	ecbd 8b02 	vpop	{d8}
 8005620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005624:	4642      	mov	r2, r8
 8005626:	464b      	mov	r3, r9
 8005628:	4640      	mov	r0, r8
 800562a:	4649      	mov	r1, r9
 800562c:	f7fb fa86 	bl	8000b3c <__aeabi_dcmpun>
 8005630:	b140      	cbz	r0, 8005644 <_printf_float+0xec>
 8005632:	464b      	mov	r3, r9
 8005634:	2b00      	cmp	r3, #0
 8005636:	bfbc      	itt	lt
 8005638:	232d      	movlt	r3, #45	; 0x2d
 800563a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800563e:	4a7f      	ldr	r2, [pc, #508]	; (800583c <_printf_float+0x2e4>)
 8005640:	4b7f      	ldr	r3, [pc, #508]	; (8005840 <_printf_float+0x2e8>)
 8005642:	e7d1      	b.n	80055e8 <_printf_float+0x90>
 8005644:	6863      	ldr	r3, [r4, #4]
 8005646:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800564a:	9206      	str	r2, [sp, #24]
 800564c:	1c5a      	adds	r2, r3, #1
 800564e:	d13f      	bne.n	80056d0 <_printf_float+0x178>
 8005650:	2306      	movs	r3, #6
 8005652:	6063      	str	r3, [r4, #4]
 8005654:	9b05      	ldr	r3, [sp, #20]
 8005656:	6861      	ldr	r1, [r4, #4]
 8005658:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800565c:	2300      	movs	r3, #0
 800565e:	9303      	str	r3, [sp, #12]
 8005660:	ab0a      	add	r3, sp, #40	; 0x28
 8005662:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005666:	ab09      	add	r3, sp, #36	; 0x24
 8005668:	ec49 8b10 	vmov	d0, r8, r9
 800566c:	9300      	str	r3, [sp, #0]
 800566e:	6022      	str	r2, [r4, #0]
 8005670:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005674:	4628      	mov	r0, r5
 8005676:	f7ff fecf 	bl	8005418 <__cvt>
 800567a:	9b06      	ldr	r3, [sp, #24]
 800567c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800567e:	2b47      	cmp	r3, #71	; 0x47
 8005680:	4680      	mov	r8, r0
 8005682:	d108      	bne.n	8005696 <_printf_float+0x13e>
 8005684:	1cc8      	adds	r0, r1, #3
 8005686:	db02      	blt.n	800568e <_printf_float+0x136>
 8005688:	6863      	ldr	r3, [r4, #4]
 800568a:	4299      	cmp	r1, r3
 800568c:	dd41      	ble.n	8005712 <_printf_float+0x1ba>
 800568e:	f1ab 0302 	sub.w	r3, fp, #2
 8005692:	fa5f fb83 	uxtb.w	fp, r3
 8005696:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800569a:	d820      	bhi.n	80056de <_printf_float+0x186>
 800569c:	3901      	subs	r1, #1
 800569e:	465a      	mov	r2, fp
 80056a0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80056a4:	9109      	str	r1, [sp, #36]	; 0x24
 80056a6:	f7ff ff19 	bl	80054dc <__exponent>
 80056aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80056ac:	1813      	adds	r3, r2, r0
 80056ae:	2a01      	cmp	r2, #1
 80056b0:	4681      	mov	r9, r0
 80056b2:	6123      	str	r3, [r4, #16]
 80056b4:	dc02      	bgt.n	80056bc <_printf_float+0x164>
 80056b6:	6822      	ldr	r2, [r4, #0]
 80056b8:	07d2      	lsls	r2, r2, #31
 80056ba:	d501      	bpl.n	80056c0 <_printf_float+0x168>
 80056bc:	3301      	adds	r3, #1
 80056be:	6123      	str	r3, [r4, #16]
 80056c0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d09c      	beq.n	8005602 <_printf_float+0xaa>
 80056c8:	232d      	movs	r3, #45	; 0x2d
 80056ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056ce:	e798      	b.n	8005602 <_printf_float+0xaa>
 80056d0:	9a06      	ldr	r2, [sp, #24]
 80056d2:	2a47      	cmp	r2, #71	; 0x47
 80056d4:	d1be      	bne.n	8005654 <_printf_float+0xfc>
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d1bc      	bne.n	8005654 <_printf_float+0xfc>
 80056da:	2301      	movs	r3, #1
 80056dc:	e7b9      	b.n	8005652 <_printf_float+0xfa>
 80056de:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80056e2:	d118      	bne.n	8005716 <_printf_float+0x1be>
 80056e4:	2900      	cmp	r1, #0
 80056e6:	6863      	ldr	r3, [r4, #4]
 80056e8:	dd0b      	ble.n	8005702 <_printf_float+0x1aa>
 80056ea:	6121      	str	r1, [r4, #16]
 80056ec:	b913      	cbnz	r3, 80056f4 <_printf_float+0x19c>
 80056ee:	6822      	ldr	r2, [r4, #0]
 80056f0:	07d0      	lsls	r0, r2, #31
 80056f2:	d502      	bpl.n	80056fa <_printf_float+0x1a2>
 80056f4:	3301      	adds	r3, #1
 80056f6:	440b      	add	r3, r1
 80056f8:	6123      	str	r3, [r4, #16]
 80056fa:	65a1      	str	r1, [r4, #88]	; 0x58
 80056fc:	f04f 0900 	mov.w	r9, #0
 8005700:	e7de      	b.n	80056c0 <_printf_float+0x168>
 8005702:	b913      	cbnz	r3, 800570a <_printf_float+0x1b2>
 8005704:	6822      	ldr	r2, [r4, #0]
 8005706:	07d2      	lsls	r2, r2, #31
 8005708:	d501      	bpl.n	800570e <_printf_float+0x1b6>
 800570a:	3302      	adds	r3, #2
 800570c:	e7f4      	b.n	80056f8 <_printf_float+0x1a0>
 800570e:	2301      	movs	r3, #1
 8005710:	e7f2      	b.n	80056f8 <_printf_float+0x1a0>
 8005712:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005716:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005718:	4299      	cmp	r1, r3
 800571a:	db05      	blt.n	8005728 <_printf_float+0x1d0>
 800571c:	6823      	ldr	r3, [r4, #0]
 800571e:	6121      	str	r1, [r4, #16]
 8005720:	07d8      	lsls	r0, r3, #31
 8005722:	d5ea      	bpl.n	80056fa <_printf_float+0x1a2>
 8005724:	1c4b      	adds	r3, r1, #1
 8005726:	e7e7      	b.n	80056f8 <_printf_float+0x1a0>
 8005728:	2900      	cmp	r1, #0
 800572a:	bfd4      	ite	le
 800572c:	f1c1 0202 	rsble	r2, r1, #2
 8005730:	2201      	movgt	r2, #1
 8005732:	4413      	add	r3, r2
 8005734:	e7e0      	b.n	80056f8 <_printf_float+0x1a0>
 8005736:	6823      	ldr	r3, [r4, #0]
 8005738:	055a      	lsls	r2, r3, #21
 800573a:	d407      	bmi.n	800574c <_printf_float+0x1f4>
 800573c:	6923      	ldr	r3, [r4, #16]
 800573e:	4642      	mov	r2, r8
 8005740:	4631      	mov	r1, r6
 8005742:	4628      	mov	r0, r5
 8005744:	47b8      	blx	r7
 8005746:	3001      	adds	r0, #1
 8005748:	d12c      	bne.n	80057a4 <_printf_float+0x24c>
 800574a:	e764      	b.n	8005616 <_printf_float+0xbe>
 800574c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005750:	f240 80e0 	bls.w	8005914 <_printf_float+0x3bc>
 8005754:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005758:	2200      	movs	r2, #0
 800575a:	2300      	movs	r3, #0
 800575c:	f7fb f9bc 	bl	8000ad8 <__aeabi_dcmpeq>
 8005760:	2800      	cmp	r0, #0
 8005762:	d034      	beq.n	80057ce <_printf_float+0x276>
 8005764:	4a37      	ldr	r2, [pc, #220]	; (8005844 <_printf_float+0x2ec>)
 8005766:	2301      	movs	r3, #1
 8005768:	4631      	mov	r1, r6
 800576a:	4628      	mov	r0, r5
 800576c:	47b8      	blx	r7
 800576e:	3001      	adds	r0, #1
 8005770:	f43f af51 	beq.w	8005616 <_printf_float+0xbe>
 8005774:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005778:	429a      	cmp	r2, r3
 800577a:	db02      	blt.n	8005782 <_printf_float+0x22a>
 800577c:	6823      	ldr	r3, [r4, #0]
 800577e:	07d8      	lsls	r0, r3, #31
 8005780:	d510      	bpl.n	80057a4 <_printf_float+0x24c>
 8005782:	ee18 3a10 	vmov	r3, s16
 8005786:	4652      	mov	r2, sl
 8005788:	4631      	mov	r1, r6
 800578a:	4628      	mov	r0, r5
 800578c:	47b8      	blx	r7
 800578e:	3001      	adds	r0, #1
 8005790:	f43f af41 	beq.w	8005616 <_printf_float+0xbe>
 8005794:	f04f 0800 	mov.w	r8, #0
 8005798:	f104 091a 	add.w	r9, r4, #26
 800579c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800579e:	3b01      	subs	r3, #1
 80057a0:	4543      	cmp	r3, r8
 80057a2:	dc09      	bgt.n	80057b8 <_printf_float+0x260>
 80057a4:	6823      	ldr	r3, [r4, #0]
 80057a6:	079b      	lsls	r3, r3, #30
 80057a8:	f100 8107 	bmi.w	80059ba <_printf_float+0x462>
 80057ac:	68e0      	ldr	r0, [r4, #12]
 80057ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80057b0:	4298      	cmp	r0, r3
 80057b2:	bfb8      	it	lt
 80057b4:	4618      	movlt	r0, r3
 80057b6:	e730      	b.n	800561a <_printf_float+0xc2>
 80057b8:	2301      	movs	r3, #1
 80057ba:	464a      	mov	r2, r9
 80057bc:	4631      	mov	r1, r6
 80057be:	4628      	mov	r0, r5
 80057c0:	47b8      	blx	r7
 80057c2:	3001      	adds	r0, #1
 80057c4:	f43f af27 	beq.w	8005616 <_printf_float+0xbe>
 80057c8:	f108 0801 	add.w	r8, r8, #1
 80057cc:	e7e6      	b.n	800579c <_printf_float+0x244>
 80057ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	dc39      	bgt.n	8005848 <_printf_float+0x2f0>
 80057d4:	4a1b      	ldr	r2, [pc, #108]	; (8005844 <_printf_float+0x2ec>)
 80057d6:	2301      	movs	r3, #1
 80057d8:	4631      	mov	r1, r6
 80057da:	4628      	mov	r0, r5
 80057dc:	47b8      	blx	r7
 80057de:	3001      	adds	r0, #1
 80057e0:	f43f af19 	beq.w	8005616 <_printf_float+0xbe>
 80057e4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80057e8:	4313      	orrs	r3, r2
 80057ea:	d102      	bne.n	80057f2 <_printf_float+0x29a>
 80057ec:	6823      	ldr	r3, [r4, #0]
 80057ee:	07d9      	lsls	r1, r3, #31
 80057f0:	d5d8      	bpl.n	80057a4 <_printf_float+0x24c>
 80057f2:	ee18 3a10 	vmov	r3, s16
 80057f6:	4652      	mov	r2, sl
 80057f8:	4631      	mov	r1, r6
 80057fa:	4628      	mov	r0, r5
 80057fc:	47b8      	blx	r7
 80057fe:	3001      	adds	r0, #1
 8005800:	f43f af09 	beq.w	8005616 <_printf_float+0xbe>
 8005804:	f04f 0900 	mov.w	r9, #0
 8005808:	f104 0a1a 	add.w	sl, r4, #26
 800580c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800580e:	425b      	negs	r3, r3
 8005810:	454b      	cmp	r3, r9
 8005812:	dc01      	bgt.n	8005818 <_printf_float+0x2c0>
 8005814:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005816:	e792      	b.n	800573e <_printf_float+0x1e6>
 8005818:	2301      	movs	r3, #1
 800581a:	4652      	mov	r2, sl
 800581c:	4631      	mov	r1, r6
 800581e:	4628      	mov	r0, r5
 8005820:	47b8      	blx	r7
 8005822:	3001      	adds	r0, #1
 8005824:	f43f aef7 	beq.w	8005616 <_printf_float+0xbe>
 8005828:	f109 0901 	add.w	r9, r9, #1
 800582c:	e7ee      	b.n	800580c <_printf_float+0x2b4>
 800582e:	bf00      	nop
 8005830:	7fefffff 	.word	0x7fefffff
 8005834:	0800a7d0 	.word	0x0800a7d0
 8005838:	0800a7d4 	.word	0x0800a7d4
 800583c:	0800a7d8 	.word	0x0800a7d8
 8005840:	0800a7dc 	.word	0x0800a7dc
 8005844:	0800a7e0 	.word	0x0800a7e0
 8005848:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800584a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800584c:	429a      	cmp	r2, r3
 800584e:	bfa8      	it	ge
 8005850:	461a      	movge	r2, r3
 8005852:	2a00      	cmp	r2, #0
 8005854:	4691      	mov	r9, r2
 8005856:	dc37      	bgt.n	80058c8 <_printf_float+0x370>
 8005858:	f04f 0b00 	mov.w	fp, #0
 800585c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005860:	f104 021a 	add.w	r2, r4, #26
 8005864:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005866:	9305      	str	r3, [sp, #20]
 8005868:	eba3 0309 	sub.w	r3, r3, r9
 800586c:	455b      	cmp	r3, fp
 800586e:	dc33      	bgt.n	80058d8 <_printf_float+0x380>
 8005870:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005874:	429a      	cmp	r2, r3
 8005876:	db3b      	blt.n	80058f0 <_printf_float+0x398>
 8005878:	6823      	ldr	r3, [r4, #0]
 800587a:	07da      	lsls	r2, r3, #31
 800587c:	d438      	bmi.n	80058f0 <_printf_float+0x398>
 800587e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005882:	eba2 0903 	sub.w	r9, r2, r3
 8005886:	9b05      	ldr	r3, [sp, #20]
 8005888:	1ad2      	subs	r2, r2, r3
 800588a:	4591      	cmp	r9, r2
 800588c:	bfa8      	it	ge
 800588e:	4691      	movge	r9, r2
 8005890:	f1b9 0f00 	cmp.w	r9, #0
 8005894:	dc35      	bgt.n	8005902 <_printf_float+0x3aa>
 8005896:	f04f 0800 	mov.w	r8, #0
 800589a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800589e:	f104 0a1a 	add.w	sl, r4, #26
 80058a2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80058a6:	1a9b      	subs	r3, r3, r2
 80058a8:	eba3 0309 	sub.w	r3, r3, r9
 80058ac:	4543      	cmp	r3, r8
 80058ae:	f77f af79 	ble.w	80057a4 <_printf_float+0x24c>
 80058b2:	2301      	movs	r3, #1
 80058b4:	4652      	mov	r2, sl
 80058b6:	4631      	mov	r1, r6
 80058b8:	4628      	mov	r0, r5
 80058ba:	47b8      	blx	r7
 80058bc:	3001      	adds	r0, #1
 80058be:	f43f aeaa 	beq.w	8005616 <_printf_float+0xbe>
 80058c2:	f108 0801 	add.w	r8, r8, #1
 80058c6:	e7ec      	b.n	80058a2 <_printf_float+0x34a>
 80058c8:	4613      	mov	r3, r2
 80058ca:	4631      	mov	r1, r6
 80058cc:	4642      	mov	r2, r8
 80058ce:	4628      	mov	r0, r5
 80058d0:	47b8      	blx	r7
 80058d2:	3001      	adds	r0, #1
 80058d4:	d1c0      	bne.n	8005858 <_printf_float+0x300>
 80058d6:	e69e      	b.n	8005616 <_printf_float+0xbe>
 80058d8:	2301      	movs	r3, #1
 80058da:	4631      	mov	r1, r6
 80058dc:	4628      	mov	r0, r5
 80058de:	9205      	str	r2, [sp, #20]
 80058e0:	47b8      	blx	r7
 80058e2:	3001      	adds	r0, #1
 80058e4:	f43f ae97 	beq.w	8005616 <_printf_float+0xbe>
 80058e8:	9a05      	ldr	r2, [sp, #20]
 80058ea:	f10b 0b01 	add.w	fp, fp, #1
 80058ee:	e7b9      	b.n	8005864 <_printf_float+0x30c>
 80058f0:	ee18 3a10 	vmov	r3, s16
 80058f4:	4652      	mov	r2, sl
 80058f6:	4631      	mov	r1, r6
 80058f8:	4628      	mov	r0, r5
 80058fa:	47b8      	blx	r7
 80058fc:	3001      	adds	r0, #1
 80058fe:	d1be      	bne.n	800587e <_printf_float+0x326>
 8005900:	e689      	b.n	8005616 <_printf_float+0xbe>
 8005902:	9a05      	ldr	r2, [sp, #20]
 8005904:	464b      	mov	r3, r9
 8005906:	4442      	add	r2, r8
 8005908:	4631      	mov	r1, r6
 800590a:	4628      	mov	r0, r5
 800590c:	47b8      	blx	r7
 800590e:	3001      	adds	r0, #1
 8005910:	d1c1      	bne.n	8005896 <_printf_float+0x33e>
 8005912:	e680      	b.n	8005616 <_printf_float+0xbe>
 8005914:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005916:	2a01      	cmp	r2, #1
 8005918:	dc01      	bgt.n	800591e <_printf_float+0x3c6>
 800591a:	07db      	lsls	r3, r3, #31
 800591c:	d53a      	bpl.n	8005994 <_printf_float+0x43c>
 800591e:	2301      	movs	r3, #1
 8005920:	4642      	mov	r2, r8
 8005922:	4631      	mov	r1, r6
 8005924:	4628      	mov	r0, r5
 8005926:	47b8      	blx	r7
 8005928:	3001      	adds	r0, #1
 800592a:	f43f ae74 	beq.w	8005616 <_printf_float+0xbe>
 800592e:	ee18 3a10 	vmov	r3, s16
 8005932:	4652      	mov	r2, sl
 8005934:	4631      	mov	r1, r6
 8005936:	4628      	mov	r0, r5
 8005938:	47b8      	blx	r7
 800593a:	3001      	adds	r0, #1
 800593c:	f43f ae6b 	beq.w	8005616 <_printf_float+0xbe>
 8005940:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005944:	2200      	movs	r2, #0
 8005946:	2300      	movs	r3, #0
 8005948:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800594c:	f7fb f8c4 	bl	8000ad8 <__aeabi_dcmpeq>
 8005950:	b9d8      	cbnz	r0, 800598a <_printf_float+0x432>
 8005952:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005956:	f108 0201 	add.w	r2, r8, #1
 800595a:	4631      	mov	r1, r6
 800595c:	4628      	mov	r0, r5
 800595e:	47b8      	blx	r7
 8005960:	3001      	adds	r0, #1
 8005962:	d10e      	bne.n	8005982 <_printf_float+0x42a>
 8005964:	e657      	b.n	8005616 <_printf_float+0xbe>
 8005966:	2301      	movs	r3, #1
 8005968:	4652      	mov	r2, sl
 800596a:	4631      	mov	r1, r6
 800596c:	4628      	mov	r0, r5
 800596e:	47b8      	blx	r7
 8005970:	3001      	adds	r0, #1
 8005972:	f43f ae50 	beq.w	8005616 <_printf_float+0xbe>
 8005976:	f108 0801 	add.w	r8, r8, #1
 800597a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800597c:	3b01      	subs	r3, #1
 800597e:	4543      	cmp	r3, r8
 8005980:	dcf1      	bgt.n	8005966 <_printf_float+0x40e>
 8005982:	464b      	mov	r3, r9
 8005984:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005988:	e6da      	b.n	8005740 <_printf_float+0x1e8>
 800598a:	f04f 0800 	mov.w	r8, #0
 800598e:	f104 0a1a 	add.w	sl, r4, #26
 8005992:	e7f2      	b.n	800597a <_printf_float+0x422>
 8005994:	2301      	movs	r3, #1
 8005996:	4642      	mov	r2, r8
 8005998:	e7df      	b.n	800595a <_printf_float+0x402>
 800599a:	2301      	movs	r3, #1
 800599c:	464a      	mov	r2, r9
 800599e:	4631      	mov	r1, r6
 80059a0:	4628      	mov	r0, r5
 80059a2:	47b8      	blx	r7
 80059a4:	3001      	adds	r0, #1
 80059a6:	f43f ae36 	beq.w	8005616 <_printf_float+0xbe>
 80059aa:	f108 0801 	add.w	r8, r8, #1
 80059ae:	68e3      	ldr	r3, [r4, #12]
 80059b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80059b2:	1a5b      	subs	r3, r3, r1
 80059b4:	4543      	cmp	r3, r8
 80059b6:	dcf0      	bgt.n	800599a <_printf_float+0x442>
 80059b8:	e6f8      	b.n	80057ac <_printf_float+0x254>
 80059ba:	f04f 0800 	mov.w	r8, #0
 80059be:	f104 0919 	add.w	r9, r4, #25
 80059c2:	e7f4      	b.n	80059ae <_printf_float+0x456>

080059c4 <_printf_common>:
 80059c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059c8:	4616      	mov	r6, r2
 80059ca:	4699      	mov	r9, r3
 80059cc:	688a      	ldr	r2, [r1, #8]
 80059ce:	690b      	ldr	r3, [r1, #16]
 80059d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80059d4:	4293      	cmp	r3, r2
 80059d6:	bfb8      	it	lt
 80059d8:	4613      	movlt	r3, r2
 80059da:	6033      	str	r3, [r6, #0]
 80059dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80059e0:	4607      	mov	r7, r0
 80059e2:	460c      	mov	r4, r1
 80059e4:	b10a      	cbz	r2, 80059ea <_printf_common+0x26>
 80059e6:	3301      	adds	r3, #1
 80059e8:	6033      	str	r3, [r6, #0]
 80059ea:	6823      	ldr	r3, [r4, #0]
 80059ec:	0699      	lsls	r1, r3, #26
 80059ee:	bf42      	ittt	mi
 80059f0:	6833      	ldrmi	r3, [r6, #0]
 80059f2:	3302      	addmi	r3, #2
 80059f4:	6033      	strmi	r3, [r6, #0]
 80059f6:	6825      	ldr	r5, [r4, #0]
 80059f8:	f015 0506 	ands.w	r5, r5, #6
 80059fc:	d106      	bne.n	8005a0c <_printf_common+0x48>
 80059fe:	f104 0a19 	add.w	sl, r4, #25
 8005a02:	68e3      	ldr	r3, [r4, #12]
 8005a04:	6832      	ldr	r2, [r6, #0]
 8005a06:	1a9b      	subs	r3, r3, r2
 8005a08:	42ab      	cmp	r3, r5
 8005a0a:	dc26      	bgt.n	8005a5a <_printf_common+0x96>
 8005a0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005a10:	1e13      	subs	r3, r2, #0
 8005a12:	6822      	ldr	r2, [r4, #0]
 8005a14:	bf18      	it	ne
 8005a16:	2301      	movne	r3, #1
 8005a18:	0692      	lsls	r2, r2, #26
 8005a1a:	d42b      	bmi.n	8005a74 <_printf_common+0xb0>
 8005a1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a20:	4649      	mov	r1, r9
 8005a22:	4638      	mov	r0, r7
 8005a24:	47c0      	blx	r8
 8005a26:	3001      	adds	r0, #1
 8005a28:	d01e      	beq.n	8005a68 <_printf_common+0xa4>
 8005a2a:	6823      	ldr	r3, [r4, #0]
 8005a2c:	6922      	ldr	r2, [r4, #16]
 8005a2e:	f003 0306 	and.w	r3, r3, #6
 8005a32:	2b04      	cmp	r3, #4
 8005a34:	bf02      	ittt	eq
 8005a36:	68e5      	ldreq	r5, [r4, #12]
 8005a38:	6833      	ldreq	r3, [r6, #0]
 8005a3a:	1aed      	subeq	r5, r5, r3
 8005a3c:	68a3      	ldr	r3, [r4, #8]
 8005a3e:	bf0c      	ite	eq
 8005a40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a44:	2500      	movne	r5, #0
 8005a46:	4293      	cmp	r3, r2
 8005a48:	bfc4      	itt	gt
 8005a4a:	1a9b      	subgt	r3, r3, r2
 8005a4c:	18ed      	addgt	r5, r5, r3
 8005a4e:	2600      	movs	r6, #0
 8005a50:	341a      	adds	r4, #26
 8005a52:	42b5      	cmp	r5, r6
 8005a54:	d11a      	bne.n	8005a8c <_printf_common+0xc8>
 8005a56:	2000      	movs	r0, #0
 8005a58:	e008      	b.n	8005a6c <_printf_common+0xa8>
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	4652      	mov	r2, sl
 8005a5e:	4649      	mov	r1, r9
 8005a60:	4638      	mov	r0, r7
 8005a62:	47c0      	blx	r8
 8005a64:	3001      	adds	r0, #1
 8005a66:	d103      	bne.n	8005a70 <_printf_common+0xac>
 8005a68:	f04f 30ff 	mov.w	r0, #4294967295
 8005a6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a70:	3501      	adds	r5, #1
 8005a72:	e7c6      	b.n	8005a02 <_printf_common+0x3e>
 8005a74:	18e1      	adds	r1, r4, r3
 8005a76:	1c5a      	adds	r2, r3, #1
 8005a78:	2030      	movs	r0, #48	; 0x30
 8005a7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005a7e:	4422      	add	r2, r4
 8005a80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005a84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005a88:	3302      	adds	r3, #2
 8005a8a:	e7c7      	b.n	8005a1c <_printf_common+0x58>
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	4622      	mov	r2, r4
 8005a90:	4649      	mov	r1, r9
 8005a92:	4638      	mov	r0, r7
 8005a94:	47c0      	blx	r8
 8005a96:	3001      	adds	r0, #1
 8005a98:	d0e6      	beq.n	8005a68 <_printf_common+0xa4>
 8005a9a:	3601      	adds	r6, #1
 8005a9c:	e7d9      	b.n	8005a52 <_printf_common+0x8e>
	...

08005aa0 <_printf_i>:
 8005aa0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005aa4:	7e0f      	ldrb	r7, [r1, #24]
 8005aa6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005aa8:	2f78      	cmp	r7, #120	; 0x78
 8005aaa:	4691      	mov	r9, r2
 8005aac:	4680      	mov	r8, r0
 8005aae:	460c      	mov	r4, r1
 8005ab0:	469a      	mov	sl, r3
 8005ab2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005ab6:	d807      	bhi.n	8005ac8 <_printf_i+0x28>
 8005ab8:	2f62      	cmp	r7, #98	; 0x62
 8005aba:	d80a      	bhi.n	8005ad2 <_printf_i+0x32>
 8005abc:	2f00      	cmp	r7, #0
 8005abe:	f000 80d4 	beq.w	8005c6a <_printf_i+0x1ca>
 8005ac2:	2f58      	cmp	r7, #88	; 0x58
 8005ac4:	f000 80c0 	beq.w	8005c48 <_printf_i+0x1a8>
 8005ac8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005acc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005ad0:	e03a      	b.n	8005b48 <_printf_i+0xa8>
 8005ad2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005ad6:	2b15      	cmp	r3, #21
 8005ad8:	d8f6      	bhi.n	8005ac8 <_printf_i+0x28>
 8005ada:	a101      	add	r1, pc, #4	; (adr r1, 8005ae0 <_printf_i+0x40>)
 8005adc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ae0:	08005b39 	.word	0x08005b39
 8005ae4:	08005b4d 	.word	0x08005b4d
 8005ae8:	08005ac9 	.word	0x08005ac9
 8005aec:	08005ac9 	.word	0x08005ac9
 8005af0:	08005ac9 	.word	0x08005ac9
 8005af4:	08005ac9 	.word	0x08005ac9
 8005af8:	08005b4d 	.word	0x08005b4d
 8005afc:	08005ac9 	.word	0x08005ac9
 8005b00:	08005ac9 	.word	0x08005ac9
 8005b04:	08005ac9 	.word	0x08005ac9
 8005b08:	08005ac9 	.word	0x08005ac9
 8005b0c:	08005c51 	.word	0x08005c51
 8005b10:	08005b79 	.word	0x08005b79
 8005b14:	08005c0b 	.word	0x08005c0b
 8005b18:	08005ac9 	.word	0x08005ac9
 8005b1c:	08005ac9 	.word	0x08005ac9
 8005b20:	08005c73 	.word	0x08005c73
 8005b24:	08005ac9 	.word	0x08005ac9
 8005b28:	08005b79 	.word	0x08005b79
 8005b2c:	08005ac9 	.word	0x08005ac9
 8005b30:	08005ac9 	.word	0x08005ac9
 8005b34:	08005c13 	.word	0x08005c13
 8005b38:	682b      	ldr	r3, [r5, #0]
 8005b3a:	1d1a      	adds	r2, r3, #4
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	602a      	str	r2, [r5, #0]
 8005b40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b48:	2301      	movs	r3, #1
 8005b4a:	e09f      	b.n	8005c8c <_printf_i+0x1ec>
 8005b4c:	6820      	ldr	r0, [r4, #0]
 8005b4e:	682b      	ldr	r3, [r5, #0]
 8005b50:	0607      	lsls	r7, r0, #24
 8005b52:	f103 0104 	add.w	r1, r3, #4
 8005b56:	6029      	str	r1, [r5, #0]
 8005b58:	d501      	bpl.n	8005b5e <_printf_i+0xbe>
 8005b5a:	681e      	ldr	r6, [r3, #0]
 8005b5c:	e003      	b.n	8005b66 <_printf_i+0xc6>
 8005b5e:	0646      	lsls	r6, r0, #25
 8005b60:	d5fb      	bpl.n	8005b5a <_printf_i+0xba>
 8005b62:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005b66:	2e00      	cmp	r6, #0
 8005b68:	da03      	bge.n	8005b72 <_printf_i+0xd2>
 8005b6a:	232d      	movs	r3, #45	; 0x2d
 8005b6c:	4276      	negs	r6, r6
 8005b6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b72:	485a      	ldr	r0, [pc, #360]	; (8005cdc <_printf_i+0x23c>)
 8005b74:	230a      	movs	r3, #10
 8005b76:	e012      	b.n	8005b9e <_printf_i+0xfe>
 8005b78:	682b      	ldr	r3, [r5, #0]
 8005b7a:	6820      	ldr	r0, [r4, #0]
 8005b7c:	1d19      	adds	r1, r3, #4
 8005b7e:	6029      	str	r1, [r5, #0]
 8005b80:	0605      	lsls	r5, r0, #24
 8005b82:	d501      	bpl.n	8005b88 <_printf_i+0xe8>
 8005b84:	681e      	ldr	r6, [r3, #0]
 8005b86:	e002      	b.n	8005b8e <_printf_i+0xee>
 8005b88:	0641      	lsls	r1, r0, #25
 8005b8a:	d5fb      	bpl.n	8005b84 <_printf_i+0xe4>
 8005b8c:	881e      	ldrh	r6, [r3, #0]
 8005b8e:	4853      	ldr	r0, [pc, #332]	; (8005cdc <_printf_i+0x23c>)
 8005b90:	2f6f      	cmp	r7, #111	; 0x6f
 8005b92:	bf0c      	ite	eq
 8005b94:	2308      	moveq	r3, #8
 8005b96:	230a      	movne	r3, #10
 8005b98:	2100      	movs	r1, #0
 8005b9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005b9e:	6865      	ldr	r5, [r4, #4]
 8005ba0:	60a5      	str	r5, [r4, #8]
 8005ba2:	2d00      	cmp	r5, #0
 8005ba4:	bfa2      	ittt	ge
 8005ba6:	6821      	ldrge	r1, [r4, #0]
 8005ba8:	f021 0104 	bicge.w	r1, r1, #4
 8005bac:	6021      	strge	r1, [r4, #0]
 8005bae:	b90e      	cbnz	r6, 8005bb4 <_printf_i+0x114>
 8005bb0:	2d00      	cmp	r5, #0
 8005bb2:	d04b      	beq.n	8005c4c <_printf_i+0x1ac>
 8005bb4:	4615      	mov	r5, r2
 8005bb6:	fbb6 f1f3 	udiv	r1, r6, r3
 8005bba:	fb03 6711 	mls	r7, r3, r1, r6
 8005bbe:	5dc7      	ldrb	r7, [r0, r7]
 8005bc0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005bc4:	4637      	mov	r7, r6
 8005bc6:	42bb      	cmp	r3, r7
 8005bc8:	460e      	mov	r6, r1
 8005bca:	d9f4      	bls.n	8005bb6 <_printf_i+0x116>
 8005bcc:	2b08      	cmp	r3, #8
 8005bce:	d10b      	bne.n	8005be8 <_printf_i+0x148>
 8005bd0:	6823      	ldr	r3, [r4, #0]
 8005bd2:	07de      	lsls	r6, r3, #31
 8005bd4:	d508      	bpl.n	8005be8 <_printf_i+0x148>
 8005bd6:	6923      	ldr	r3, [r4, #16]
 8005bd8:	6861      	ldr	r1, [r4, #4]
 8005bda:	4299      	cmp	r1, r3
 8005bdc:	bfde      	ittt	le
 8005bde:	2330      	movle	r3, #48	; 0x30
 8005be0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005be4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005be8:	1b52      	subs	r2, r2, r5
 8005bea:	6122      	str	r2, [r4, #16]
 8005bec:	f8cd a000 	str.w	sl, [sp]
 8005bf0:	464b      	mov	r3, r9
 8005bf2:	aa03      	add	r2, sp, #12
 8005bf4:	4621      	mov	r1, r4
 8005bf6:	4640      	mov	r0, r8
 8005bf8:	f7ff fee4 	bl	80059c4 <_printf_common>
 8005bfc:	3001      	adds	r0, #1
 8005bfe:	d14a      	bne.n	8005c96 <_printf_i+0x1f6>
 8005c00:	f04f 30ff 	mov.w	r0, #4294967295
 8005c04:	b004      	add	sp, #16
 8005c06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c0a:	6823      	ldr	r3, [r4, #0]
 8005c0c:	f043 0320 	orr.w	r3, r3, #32
 8005c10:	6023      	str	r3, [r4, #0]
 8005c12:	4833      	ldr	r0, [pc, #204]	; (8005ce0 <_printf_i+0x240>)
 8005c14:	2778      	movs	r7, #120	; 0x78
 8005c16:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005c1a:	6823      	ldr	r3, [r4, #0]
 8005c1c:	6829      	ldr	r1, [r5, #0]
 8005c1e:	061f      	lsls	r7, r3, #24
 8005c20:	f851 6b04 	ldr.w	r6, [r1], #4
 8005c24:	d402      	bmi.n	8005c2c <_printf_i+0x18c>
 8005c26:	065f      	lsls	r7, r3, #25
 8005c28:	bf48      	it	mi
 8005c2a:	b2b6      	uxthmi	r6, r6
 8005c2c:	07df      	lsls	r7, r3, #31
 8005c2e:	bf48      	it	mi
 8005c30:	f043 0320 	orrmi.w	r3, r3, #32
 8005c34:	6029      	str	r1, [r5, #0]
 8005c36:	bf48      	it	mi
 8005c38:	6023      	strmi	r3, [r4, #0]
 8005c3a:	b91e      	cbnz	r6, 8005c44 <_printf_i+0x1a4>
 8005c3c:	6823      	ldr	r3, [r4, #0]
 8005c3e:	f023 0320 	bic.w	r3, r3, #32
 8005c42:	6023      	str	r3, [r4, #0]
 8005c44:	2310      	movs	r3, #16
 8005c46:	e7a7      	b.n	8005b98 <_printf_i+0xf8>
 8005c48:	4824      	ldr	r0, [pc, #144]	; (8005cdc <_printf_i+0x23c>)
 8005c4a:	e7e4      	b.n	8005c16 <_printf_i+0x176>
 8005c4c:	4615      	mov	r5, r2
 8005c4e:	e7bd      	b.n	8005bcc <_printf_i+0x12c>
 8005c50:	682b      	ldr	r3, [r5, #0]
 8005c52:	6826      	ldr	r6, [r4, #0]
 8005c54:	6961      	ldr	r1, [r4, #20]
 8005c56:	1d18      	adds	r0, r3, #4
 8005c58:	6028      	str	r0, [r5, #0]
 8005c5a:	0635      	lsls	r5, r6, #24
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	d501      	bpl.n	8005c64 <_printf_i+0x1c4>
 8005c60:	6019      	str	r1, [r3, #0]
 8005c62:	e002      	b.n	8005c6a <_printf_i+0x1ca>
 8005c64:	0670      	lsls	r0, r6, #25
 8005c66:	d5fb      	bpl.n	8005c60 <_printf_i+0x1c0>
 8005c68:	8019      	strh	r1, [r3, #0]
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	6123      	str	r3, [r4, #16]
 8005c6e:	4615      	mov	r5, r2
 8005c70:	e7bc      	b.n	8005bec <_printf_i+0x14c>
 8005c72:	682b      	ldr	r3, [r5, #0]
 8005c74:	1d1a      	adds	r2, r3, #4
 8005c76:	602a      	str	r2, [r5, #0]
 8005c78:	681d      	ldr	r5, [r3, #0]
 8005c7a:	6862      	ldr	r2, [r4, #4]
 8005c7c:	2100      	movs	r1, #0
 8005c7e:	4628      	mov	r0, r5
 8005c80:	f7fa faae 	bl	80001e0 <memchr>
 8005c84:	b108      	cbz	r0, 8005c8a <_printf_i+0x1ea>
 8005c86:	1b40      	subs	r0, r0, r5
 8005c88:	6060      	str	r0, [r4, #4]
 8005c8a:	6863      	ldr	r3, [r4, #4]
 8005c8c:	6123      	str	r3, [r4, #16]
 8005c8e:	2300      	movs	r3, #0
 8005c90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c94:	e7aa      	b.n	8005bec <_printf_i+0x14c>
 8005c96:	6923      	ldr	r3, [r4, #16]
 8005c98:	462a      	mov	r2, r5
 8005c9a:	4649      	mov	r1, r9
 8005c9c:	4640      	mov	r0, r8
 8005c9e:	47d0      	blx	sl
 8005ca0:	3001      	adds	r0, #1
 8005ca2:	d0ad      	beq.n	8005c00 <_printf_i+0x160>
 8005ca4:	6823      	ldr	r3, [r4, #0]
 8005ca6:	079b      	lsls	r3, r3, #30
 8005ca8:	d413      	bmi.n	8005cd2 <_printf_i+0x232>
 8005caa:	68e0      	ldr	r0, [r4, #12]
 8005cac:	9b03      	ldr	r3, [sp, #12]
 8005cae:	4298      	cmp	r0, r3
 8005cb0:	bfb8      	it	lt
 8005cb2:	4618      	movlt	r0, r3
 8005cb4:	e7a6      	b.n	8005c04 <_printf_i+0x164>
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	4632      	mov	r2, r6
 8005cba:	4649      	mov	r1, r9
 8005cbc:	4640      	mov	r0, r8
 8005cbe:	47d0      	blx	sl
 8005cc0:	3001      	adds	r0, #1
 8005cc2:	d09d      	beq.n	8005c00 <_printf_i+0x160>
 8005cc4:	3501      	adds	r5, #1
 8005cc6:	68e3      	ldr	r3, [r4, #12]
 8005cc8:	9903      	ldr	r1, [sp, #12]
 8005cca:	1a5b      	subs	r3, r3, r1
 8005ccc:	42ab      	cmp	r3, r5
 8005cce:	dcf2      	bgt.n	8005cb6 <_printf_i+0x216>
 8005cd0:	e7eb      	b.n	8005caa <_printf_i+0x20a>
 8005cd2:	2500      	movs	r5, #0
 8005cd4:	f104 0619 	add.w	r6, r4, #25
 8005cd8:	e7f5      	b.n	8005cc6 <_printf_i+0x226>
 8005cda:	bf00      	nop
 8005cdc:	0800a7e2 	.word	0x0800a7e2
 8005ce0:	0800a7f3 	.word	0x0800a7f3

08005ce4 <_scanf_float>:
 8005ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ce8:	b087      	sub	sp, #28
 8005cea:	4617      	mov	r7, r2
 8005cec:	9303      	str	r3, [sp, #12]
 8005cee:	688b      	ldr	r3, [r1, #8]
 8005cf0:	1e5a      	subs	r2, r3, #1
 8005cf2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005cf6:	bf83      	ittte	hi
 8005cf8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005cfc:	195b      	addhi	r3, r3, r5
 8005cfe:	9302      	strhi	r3, [sp, #8]
 8005d00:	2300      	movls	r3, #0
 8005d02:	bf86      	itte	hi
 8005d04:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005d08:	608b      	strhi	r3, [r1, #8]
 8005d0a:	9302      	strls	r3, [sp, #8]
 8005d0c:	680b      	ldr	r3, [r1, #0]
 8005d0e:	468b      	mov	fp, r1
 8005d10:	2500      	movs	r5, #0
 8005d12:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005d16:	f84b 3b1c 	str.w	r3, [fp], #28
 8005d1a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005d1e:	4680      	mov	r8, r0
 8005d20:	460c      	mov	r4, r1
 8005d22:	465e      	mov	r6, fp
 8005d24:	46aa      	mov	sl, r5
 8005d26:	46a9      	mov	r9, r5
 8005d28:	9501      	str	r5, [sp, #4]
 8005d2a:	68a2      	ldr	r2, [r4, #8]
 8005d2c:	b152      	cbz	r2, 8005d44 <_scanf_float+0x60>
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	781b      	ldrb	r3, [r3, #0]
 8005d32:	2b4e      	cmp	r3, #78	; 0x4e
 8005d34:	d864      	bhi.n	8005e00 <_scanf_float+0x11c>
 8005d36:	2b40      	cmp	r3, #64	; 0x40
 8005d38:	d83c      	bhi.n	8005db4 <_scanf_float+0xd0>
 8005d3a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8005d3e:	b2c8      	uxtb	r0, r1
 8005d40:	280e      	cmp	r0, #14
 8005d42:	d93a      	bls.n	8005dba <_scanf_float+0xd6>
 8005d44:	f1b9 0f00 	cmp.w	r9, #0
 8005d48:	d003      	beq.n	8005d52 <_scanf_float+0x6e>
 8005d4a:	6823      	ldr	r3, [r4, #0]
 8005d4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d50:	6023      	str	r3, [r4, #0]
 8005d52:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005d56:	f1ba 0f01 	cmp.w	sl, #1
 8005d5a:	f200 8113 	bhi.w	8005f84 <_scanf_float+0x2a0>
 8005d5e:	455e      	cmp	r6, fp
 8005d60:	f200 8105 	bhi.w	8005f6e <_scanf_float+0x28a>
 8005d64:	2501      	movs	r5, #1
 8005d66:	4628      	mov	r0, r5
 8005d68:	b007      	add	sp, #28
 8005d6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d6e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8005d72:	2a0d      	cmp	r2, #13
 8005d74:	d8e6      	bhi.n	8005d44 <_scanf_float+0x60>
 8005d76:	a101      	add	r1, pc, #4	; (adr r1, 8005d7c <_scanf_float+0x98>)
 8005d78:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005d7c:	08005ebb 	.word	0x08005ebb
 8005d80:	08005d45 	.word	0x08005d45
 8005d84:	08005d45 	.word	0x08005d45
 8005d88:	08005d45 	.word	0x08005d45
 8005d8c:	08005f1b 	.word	0x08005f1b
 8005d90:	08005ef3 	.word	0x08005ef3
 8005d94:	08005d45 	.word	0x08005d45
 8005d98:	08005d45 	.word	0x08005d45
 8005d9c:	08005ec9 	.word	0x08005ec9
 8005da0:	08005d45 	.word	0x08005d45
 8005da4:	08005d45 	.word	0x08005d45
 8005da8:	08005d45 	.word	0x08005d45
 8005dac:	08005d45 	.word	0x08005d45
 8005db0:	08005e81 	.word	0x08005e81
 8005db4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005db8:	e7db      	b.n	8005d72 <_scanf_float+0x8e>
 8005dba:	290e      	cmp	r1, #14
 8005dbc:	d8c2      	bhi.n	8005d44 <_scanf_float+0x60>
 8005dbe:	a001      	add	r0, pc, #4	; (adr r0, 8005dc4 <_scanf_float+0xe0>)
 8005dc0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005dc4:	08005e73 	.word	0x08005e73
 8005dc8:	08005d45 	.word	0x08005d45
 8005dcc:	08005e73 	.word	0x08005e73
 8005dd0:	08005f07 	.word	0x08005f07
 8005dd4:	08005d45 	.word	0x08005d45
 8005dd8:	08005e21 	.word	0x08005e21
 8005ddc:	08005e5d 	.word	0x08005e5d
 8005de0:	08005e5d 	.word	0x08005e5d
 8005de4:	08005e5d 	.word	0x08005e5d
 8005de8:	08005e5d 	.word	0x08005e5d
 8005dec:	08005e5d 	.word	0x08005e5d
 8005df0:	08005e5d 	.word	0x08005e5d
 8005df4:	08005e5d 	.word	0x08005e5d
 8005df8:	08005e5d 	.word	0x08005e5d
 8005dfc:	08005e5d 	.word	0x08005e5d
 8005e00:	2b6e      	cmp	r3, #110	; 0x6e
 8005e02:	d809      	bhi.n	8005e18 <_scanf_float+0x134>
 8005e04:	2b60      	cmp	r3, #96	; 0x60
 8005e06:	d8b2      	bhi.n	8005d6e <_scanf_float+0x8a>
 8005e08:	2b54      	cmp	r3, #84	; 0x54
 8005e0a:	d077      	beq.n	8005efc <_scanf_float+0x218>
 8005e0c:	2b59      	cmp	r3, #89	; 0x59
 8005e0e:	d199      	bne.n	8005d44 <_scanf_float+0x60>
 8005e10:	2d07      	cmp	r5, #7
 8005e12:	d197      	bne.n	8005d44 <_scanf_float+0x60>
 8005e14:	2508      	movs	r5, #8
 8005e16:	e029      	b.n	8005e6c <_scanf_float+0x188>
 8005e18:	2b74      	cmp	r3, #116	; 0x74
 8005e1a:	d06f      	beq.n	8005efc <_scanf_float+0x218>
 8005e1c:	2b79      	cmp	r3, #121	; 0x79
 8005e1e:	e7f6      	b.n	8005e0e <_scanf_float+0x12a>
 8005e20:	6821      	ldr	r1, [r4, #0]
 8005e22:	05c8      	lsls	r0, r1, #23
 8005e24:	d51a      	bpl.n	8005e5c <_scanf_float+0x178>
 8005e26:	9b02      	ldr	r3, [sp, #8]
 8005e28:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005e2c:	6021      	str	r1, [r4, #0]
 8005e2e:	f109 0901 	add.w	r9, r9, #1
 8005e32:	b11b      	cbz	r3, 8005e3c <_scanf_float+0x158>
 8005e34:	3b01      	subs	r3, #1
 8005e36:	3201      	adds	r2, #1
 8005e38:	9302      	str	r3, [sp, #8]
 8005e3a:	60a2      	str	r2, [r4, #8]
 8005e3c:	68a3      	ldr	r3, [r4, #8]
 8005e3e:	3b01      	subs	r3, #1
 8005e40:	60a3      	str	r3, [r4, #8]
 8005e42:	6923      	ldr	r3, [r4, #16]
 8005e44:	3301      	adds	r3, #1
 8005e46:	6123      	str	r3, [r4, #16]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	3b01      	subs	r3, #1
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	607b      	str	r3, [r7, #4]
 8005e50:	f340 8084 	ble.w	8005f5c <_scanf_float+0x278>
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	3301      	adds	r3, #1
 8005e58:	603b      	str	r3, [r7, #0]
 8005e5a:	e766      	b.n	8005d2a <_scanf_float+0x46>
 8005e5c:	eb1a 0f05 	cmn.w	sl, r5
 8005e60:	f47f af70 	bne.w	8005d44 <_scanf_float+0x60>
 8005e64:	6822      	ldr	r2, [r4, #0]
 8005e66:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005e6a:	6022      	str	r2, [r4, #0]
 8005e6c:	f806 3b01 	strb.w	r3, [r6], #1
 8005e70:	e7e4      	b.n	8005e3c <_scanf_float+0x158>
 8005e72:	6822      	ldr	r2, [r4, #0]
 8005e74:	0610      	lsls	r0, r2, #24
 8005e76:	f57f af65 	bpl.w	8005d44 <_scanf_float+0x60>
 8005e7a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e7e:	e7f4      	b.n	8005e6a <_scanf_float+0x186>
 8005e80:	f1ba 0f00 	cmp.w	sl, #0
 8005e84:	d10e      	bne.n	8005ea4 <_scanf_float+0x1c0>
 8005e86:	f1b9 0f00 	cmp.w	r9, #0
 8005e8a:	d10e      	bne.n	8005eaa <_scanf_float+0x1c6>
 8005e8c:	6822      	ldr	r2, [r4, #0]
 8005e8e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005e92:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005e96:	d108      	bne.n	8005eaa <_scanf_float+0x1c6>
 8005e98:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005e9c:	6022      	str	r2, [r4, #0]
 8005e9e:	f04f 0a01 	mov.w	sl, #1
 8005ea2:	e7e3      	b.n	8005e6c <_scanf_float+0x188>
 8005ea4:	f1ba 0f02 	cmp.w	sl, #2
 8005ea8:	d055      	beq.n	8005f56 <_scanf_float+0x272>
 8005eaa:	2d01      	cmp	r5, #1
 8005eac:	d002      	beq.n	8005eb4 <_scanf_float+0x1d0>
 8005eae:	2d04      	cmp	r5, #4
 8005eb0:	f47f af48 	bne.w	8005d44 <_scanf_float+0x60>
 8005eb4:	3501      	adds	r5, #1
 8005eb6:	b2ed      	uxtb	r5, r5
 8005eb8:	e7d8      	b.n	8005e6c <_scanf_float+0x188>
 8005eba:	f1ba 0f01 	cmp.w	sl, #1
 8005ebe:	f47f af41 	bne.w	8005d44 <_scanf_float+0x60>
 8005ec2:	f04f 0a02 	mov.w	sl, #2
 8005ec6:	e7d1      	b.n	8005e6c <_scanf_float+0x188>
 8005ec8:	b97d      	cbnz	r5, 8005eea <_scanf_float+0x206>
 8005eca:	f1b9 0f00 	cmp.w	r9, #0
 8005ece:	f47f af3c 	bne.w	8005d4a <_scanf_float+0x66>
 8005ed2:	6822      	ldr	r2, [r4, #0]
 8005ed4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005ed8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005edc:	f47f af39 	bne.w	8005d52 <_scanf_float+0x6e>
 8005ee0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005ee4:	6022      	str	r2, [r4, #0]
 8005ee6:	2501      	movs	r5, #1
 8005ee8:	e7c0      	b.n	8005e6c <_scanf_float+0x188>
 8005eea:	2d03      	cmp	r5, #3
 8005eec:	d0e2      	beq.n	8005eb4 <_scanf_float+0x1d0>
 8005eee:	2d05      	cmp	r5, #5
 8005ef0:	e7de      	b.n	8005eb0 <_scanf_float+0x1cc>
 8005ef2:	2d02      	cmp	r5, #2
 8005ef4:	f47f af26 	bne.w	8005d44 <_scanf_float+0x60>
 8005ef8:	2503      	movs	r5, #3
 8005efa:	e7b7      	b.n	8005e6c <_scanf_float+0x188>
 8005efc:	2d06      	cmp	r5, #6
 8005efe:	f47f af21 	bne.w	8005d44 <_scanf_float+0x60>
 8005f02:	2507      	movs	r5, #7
 8005f04:	e7b2      	b.n	8005e6c <_scanf_float+0x188>
 8005f06:	6822      	ldr	r2, [r4, #0]
 8005f08:	0591      	lsls	r1, r2, #22
 8005f0a:	f57f af1b 	bpl.w	8005d44 <_scanf_float+0x60>
 8005f0e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8005f12:	6022      	str	r2, [r4, #0]
 8005f14:	f8cd 9004 	str.w	r9, [sp, #4]
 8005f18:	e7a8      	b.n	8005e6c <_scanf_float+0x188>
 8005f1a:	6822      	ldr	r2, [r4, #0]
 8005f1c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005f20:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005f24:	d006      	beq.n	8005f34 <_scanf_float+0x250>
 8005f26:	0550      	lsls	r0, r2, #21
 8005f28:	f57f af0c 	bpl.w	8005d44 <_scanf_float+0x60>
 8005f2c:	f1b9 0f00 	cmp.w	r9, #0
 8005f30:	f43f af0f 	beq.w	8005d52 <_scanf_float+0x6e>
 8005f34:	0591      	lsls	r1, r2, #22
 8005f36:	bf58      	it	pl
 8005f38:	9901      	ldrpl	r1, [sp, #4]
 8005f3a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005f3e:	bf58      	it	pl
 8005f40:	eba9 0101 	subpl.w	r1, r9, r1
 8005f44:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005f48:	bf58      	it	pl
 8005f4a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005f4e:	6022      	str	r2, [r4, #0]
 8005f50:	f04f 0900 	mov.w	r9, #0
 8005f54:	e78a      	b.n	8005e6c <_scanf_float+0x188>
 8005f56:	f04f 0a03 	mov.w	sl, #3
 8005f5a:	e787      	b.n	8005e6c <_scanf_float+0x188>
 8005f5c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005f60:	4639      	mov	r1, r7
 8005f62:	4640      	mov	r0, r8
 8005f64:	4798      	blx	r3
 8005f66:	2800      	cmp	r0, #0
 8005f68:	f43f aedf 	beq.w	8005d2a <_scanf_float+0x46>
 8005f6c:	e6ea      	b.n	8005d44 <_scanf_float+0x60>
 8005f6e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005f72:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005f76:	463a      	mov	r2, r7
 8005f78:	4640      	mov	r0, r8
 8005f7a:	4798      	blx	r3
 8005f7c:	6923      	ldr	r3, [r4, #16]
 8005f7e:	3b01      	subs	r3, #1
 8005f80:	6123      	str	r3, [r4, #16]
 8005f82:	e6ec      	b.n	8005d5e <_scanf_float+0x7a>
 8005f84:	1e6b      	subs	r3, r5, #1
 8005f86:	2b06      	cmp	r3, #6
 8005f88:	d825      	bhi.n	8005fd6 <_scanf_float+0x2f2>
 8005f8a:	2d02      	cmp	r5, #2
 8005f8c:	d836      	bhi.n	8005ffc <_scanf_float+0x318>
 8005f8e:	455e      	cmp	r6, fp
 8005f90:	f67f aee8 	bls.w	8005d64 <_scanf_float+0x80>
 8005f94:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005f98:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005f9c:	463a      	mov	r2, r7
 8005f9e:	4640      	mov	r0, r8
 8005fa0:	4798      	blx	r3
 8005fa2:	6923      	ldr	r3, [r4, #16]
 8005fa4:	3b01      	subs	r3, #1
 8005fa6:	6123      	str	r3, [r4, #16]
 8005fa8:	e7f1      	b.n	8005f8e <_scanf_float+0x2aa>
 8005faa:	9802      	ldr	r0, [sp, #8]
 8005fac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005fb0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005fb4:	9002      	str	r0, [sp, #8]
 8005fb6:	463a      	mov	r2, r7
 8005fb8:	4640      	mov	r0, r8
 8005fba:	4798      	blx	r3
 8005fbc:	6923      	ldr	r3, [r4, #16]
 8005fbe:	3b01      	subs	r3, #1
 8005fc0:	6123      	str	r3, [r4, #16]
 8005fc2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005fc6:	fa5f fa8a 	uxtb.w	sl, sl
 8005fca:	f1ba 0f02 	cmp.w	sl, #2
 8005fce:	d1ec      	bne.n	8005faa <_scanf_float+0x2c6>
 8005fd0:	3d03      	subs	r5, #3
 8005fd2:	b2ed      	uxtb	r5, r5
 8005fd4:	1b76      	subs	r6, r6, r5
 8005fd6:	6823      	ldr	r3, [r4, #0]
 8005fd8:	05da      	lsls	r2, r3, #23
 8005fda:	d52f      	bpl.n	800603c <_scanf_float+0x358>
 8005fdc:	055b      	lsls	r3, r3, #21
 8005fde:	d510      	bpl.n	8006002 <_scanf_float+0x31e>
 8005fe0:	455e      	cmp	r6, fp
 8005fe2:	f67f aebf 	bls.w	8005d64 <_scanf_float+0x80>
 8005fe6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005fea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005fee:	463a      	mov	r2, r7
 8005ff0:	4640      	mov	r0, r8
 8005ff2:	4798      	blx	r3
 8005ff4:	6923      	ldr	r3, [r4, #16]
 8005ff6:	3b01      	subs	r3, #1
 8005ff8:	6123      	str	r3, [r4, #16]
 8005ffa:	e7f1      	b.n	8005fe0 <_scanf_float+0x2fc>
 8005ffc:	46aa      	mov	sl, r5
 8005ffe:	9602      	str	r6, [sp, #8]
 8006000:	e7df      	b.n	8005fc2 <_scanf_float+0x2de>
 8006002:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006006:	6923      	ldr	r3, [r4, #16]
 8006008:	2965      	cmp	r1, #101	; 0x65
 800600a:	f103 33ff 	add.w	r3, r3, #4294967295
 800600e:	f106 35ff 	add.w	r5, r6, #4294967295
 8006012:	6123      	str	r3, [r4, #16]
 8006014:	d00c      	beq.n	8006030 <_scanf_float+0x34c>
 8006016:	2945      	cmp	r1, #69	; 0x45
 8006018:	d00a      	beq.n	8006030 <_scanf_float+0x34c>
 800601a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800601e:	463a      	mov	r2, r7
 8006020:	4640      	mov	r0, r8
 8006022:	4798      	blx	r3
 8006024:	6923      	ldr	r3, [r4, #16]
 8006026:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800602a:	3b01      	subs	r3, #1
 800602c:	1eb5      	subs	r5, r6, #2
 800602e:	6123      	str	r3, [r4, #16]
 8006030:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006034:	463a      	mov	r2, r7
 8006036:	4640      	mov	r0, r8
 8006038:	4798      	blx	r3
 800603a:	462e      	mov	r6, r5
 800603c:	6825      	ldr	r5, [r4, #0]
 800603e:	f015 0510 	ands.w	r5, r5, #16
 8006042:	d158      	bne.n	80060f6 <_scanf_float+0x412>
 8006044:	7035      	strb	r5, [r6, #0]
 8006046:	6823      	ldr	r3, [r4, #0]
 8006048:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800604c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006050:	d11c      	bne.n	800608c <_scanf_float+0x3a8>
 8006052:	9b01      	ldr	r3, [sp, #4]
 8006054:	454b      	cmp	r3, r9
 8006056:	eba3 0209 	sub.w	r2, r3, r9
 800605a:	d124      	bne.n	80060a6 <_scanf_float+0x3c2>
 800605c:	2200      	movs	r2, #0
 800605e:	4659      	mov	r1, fp
 8006060:	4640      	mov	r0, r8
 8006062:	f002 fd31 	bl	8008ac8 <_strtod_r>
 8006066:	9b03      	ldr	r3, [sp, #12]
 8006068:	6821      	ldr	r1, [r4, #0]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f011 0f02 	tst.w	r1, #2
 8006070:	ec57 6b10 	vmov	r6, r7, d0
 8006074:	f103 0204 	add.w	r2, r3, #4
 8006078:	d020      	beq.n	80060bc <_scanf_float+0x3d8>
 800607a:	9903      	ldr	r1, [sp, #12]
 800607c:	600a      	str	r2, [r1, #0]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	e9c3 6700 	strd	r6, r7, [r3]
 8006084:	68e3      	ldr	r3, [r4, #12]
 8006086:	3301      	adds	r3, #1
 8006088:	60e3      	str	r3, [r4, #12]
 800608a:	e66c      	b.n	8005d66 <_scanf_float+0x82>
 800608c:	9b04      	ldr	r3, [sp, #16]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d0e4      	beq.n	800605c <_scanf_float+0x378>
 8006092:	9905      	ldr	r1, [sp, #20]
 8006094:	230a      	movs	r3, #10
 8006096:	462a      	mov	r2, r5
 8006098:	3101      	adds	r1, #1
 800609a:	4640      	mov	r0, r8
 800609c:	f002 fd9c 	bl	8008bd8 <_strtol_r>
 80060a0:	9b04      	ldr	r3, [sp, #16]
 80060a2:	9e05      	ldr	r6, [sp, #20]
 80060a4:	1ac2      	subs	r2, r0, r3
 80060a6:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80060aa:	429e      	cmp	r6, r3
 80060ac:	bf28      	it	cs
 80060ae:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80060b2:	4912      	ldr	r1, [pc, #72]	; (80060fc <_scanf_float+0x418>)
 80060b4:	4630      	mov	r0, r6
 80060b6:	f000 f955 	bl	8006364 <siprintf>
 80060ba:	e7cf      	b.n	800605c <_scanf_float+0x378>
 80060bc:	f011 0f04 	tst.w	r1, #4
 80060c0:	9903      	ldr	r1, [sp, #12]
 80060c2:	600a      	str	r2, [r1, #0]
 80060c4:	d1db      	bne.n	800607e <_scanf_float+0x39a>
 80060c6:	f8d3 8000 	ldr.w	r8, [r3]
 80060ca:	ee10 2a10 	vmov	r2, s0
 80060ce:	ee10 0a10 	vmov	r0, s0
 80060d2:	463b      	mov	r3, r7
 80060d4:	4639      	mov	r1, r7
 80060d6:	f7fa fd31 	bl	8000b3c <__aeabi_dcmpun>
 80060da:	b128      	cbz	r0, 80060e8 <_scanf_float+0x404>
 80060dc:	4808      	ldr	r0, [pc, #32]	; (8006100 <_scanf_float+0x41c>)
 80060de:	f000 fab9 	bl	8006654 <nanf>
 80060e2:	ed88 0a00 	vstr	s0, [r8]
 80060e6:	e7cd      	b.n	8006084 <_scanf_float+0x3a0>
 80060e8:	4630      	mov	r0, r6
 80060ea:	4639      	mov	r1, r7
 80060ec:	f7fa fd84 	bl	8000bf8 <__aeabi_d2f>
 80060f0:	f8c8 0000 	str.w	r0, [r8]
 80060f4:	e7c6      	b.n	8006084 <_scanf_float+0x3a0>
 80060f6:	2500      	movs	r5, #0
 80060f8:	e635      	b.n	8005d66 <_scanf_float+0x82>
 80060fa:	bf00      	nop
 80060fc:	0800a804 	.word	0x0800a804
 8006100:	0800ab95 	.word	0x0800ab95

08006104 <std>:
 8006104:	2300      	movs	r3, #0
 8006106:	b510      	push	{r4, lr}
 8006108:	4604      	mov	r4, r0
 800610a:	e9c0 3300 	strd	r3, r3, [r0]
 800610e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006112:	6083      	str	r3, [r0, #8]
 8006114:	8181      	strh	r1, [r0, #12]
 8006116:	6643      	str	r3, [r0, #100]	; 0x64
 8006118:	81c2      	strh	r2, [r0, #14]
 800611a:	6183      	str	r3, [r0, #24]
 800611c:	4619      	mov	r1, r3
 800611e:	2208      	movs	r2, #8
 8006120:	305c      	adds	r0, #92	; 0x5c
 8006122:	f000 fa17 	bl	8006554 <memset>
 8006126:	4b0d      	ldr	r3, [pc, #52]	; (800615c <std+0x58>)
 8006128:	6263      	str	r3, [r4, #36]	; 0x24
 800612a:	4b0d      	ldr	r3, [pc, #52]	; (8006160 <std+0x5c>)
 800612c:	62a3      	str	r3, [r4, #40]	; 0x28
 800612e:	4b0d      	ldr	r3, [pc, #52]	; (8006164 <std+0x60>)
 8006130:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006132:	4b0d      	ldr	r3, [pc, #52]	; (8006168 <std+0x64>)
 8006134:	6323      	str	r3, [r4, #48]	; 0x30
 8006136:	4b0d      	ldr	r3, [pc, #52]	; (800616c <std+0x68>)
 8006138:	6224      	str	r4, [r4, #32]
 800613a:	429c      	cmp	r4, r3
 800613c:	d006      	beq.n	800614c <std+0x48>
 800613e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006142:	4294      	cmp	r4, r2
 8006144:	d002      	beq.n	800614c <std+0x48>
 8006146:	33d0      	adds	r3, #208	; 0xd0
 8006148:	429c      	cmp	r4, r3
 800614a:	d105      	bne.n	8006158 <std+0x54>
 800614c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006150:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006154:	f000 ba7a 	b.w	800664c <__retarget_lock_init_recursive>
 8006158:	bd10      	pop	{r4, pc}
 800615a:	bf00      	nop
 800615c:	080063a5 	.word	0x080063a5
 8006160:	080063c7 	.word	0x080063c7
 8006164:	080063ff 	.word	0x080063ff
 8006168:	08006423 	.word	0x08006423
 800616c:	20000388 	.word	0x20000388

08006170 <stdio_exit_handler>:
 8006170:	4a02      	ldr	r2, [pc, #8]	; (800617c <stdio_exit_handler+0xc>)
 8006172:	4903      	ldr	r1, [pc, #12]	; (8006180 <stdio_exit_handler+0x10>)
 8006174:	4803      	ldr	r0, [pc, #12]	; (8006184 <stdio_exit_handler+0x14>)
 8006176:	f000 b869 	b.w	800624c <_fwalk_sglue>
 800617a:	bf00      	nop
 800617c:	2000000c 	.word	0x2000000c
 8006180:	08009221 	.word	0x08009221
 8006184:	20000018 	.word	0x20000018

08006188 <cleanup_stdio>:
 8006188:	6841      	ldr	r1, [r0, #4]
 800618a:	4b0c      	ldr	r3, [pc, #48]	; (80061bc <cleanup_stdio+0x34>)
 800618c:	4299      	cmp	r1, r3
 800618e:	b510      	push	{r4, lr}
 8006190:	4604      	mov	r4, r0
 8006192:	d001      	beq.n	8006198 <cleanup_stdio+0x10>
 8006194:	f003 f844 	bl	8009220 <_fflush_r>
 8006198:	68a1      	ldr	r1, [r4, #8]
 800619a:	4b09      	ldr	r3, [pc, #36]	; (80061c0 <cleanup_stdio+0x38>)
 800619c:	4299      	cmp	r1, r3
 800619e:	d002      	beq.n	80061a6 <cleanup_stdio+0x1e>
 80061a0:	4620      	mov	r0, r4
 80061a2:	f003 f83d 	bl	8009220 <_fflush_r>
 80061a6:	68e1      	ldr	r1, [r4, #12]
 80061a8:	4b06      	ldr	r3, [pc, #24]	; (80061c4 <cleanup_stdio+0x3c>)
 80061aa:	4299      	cmp	r1, r3
 80061ac:	d004      	beq.n	80061b8 <cleanup_stdio+0x30>
 80061ae:	4620      	mov	r0, r4
 80061b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061b4:	f003 b834 	b.w	8009220 <_fflush_r>
 80061b8:	bd10      	pop	{r4, pc}
 80061ba:	bf00      	nop
 80061bc:	20000388 	.word	0x20000388
 80061c0:	200003f0 	.word	0x200003f0
 80061c4:	20000458 	.word	0x20000458

080061c8 <global_stdio_init.part.0>:
 80061c8:	b510      	push	{r4, lr}
 80061ca:	4b0b      	ldr	r3, [pc, #44]	; (80061f8 <global_stdio_init.part.0+0x30>)
 80061cc:	4c0b      	ldr	r4, [pc, #44]	; (80061fc <global_stdio_init.part.0+0x34>)
 80061ce:	4a0c      	ldr	r2, [pc, #48]	; (8006200 <global_stdio_init.part.0+0x38>)
 80061d0:	601a      	str	r2, [r3, #0]
 80061d2:	4620      	mov	r0, r4
 80061d4:	2200      	movs	r2, #0
 80061d6:	2104      	movs	r1, #4
 80061d8:	f7ff ff94 	bl	8006104 <std>
 80061dc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80061e0:	2201      	movs	r2, #1
 80061e2:	2109      	movs	r1, #9
 80061e4:	f7ff ff8e 	bl	8006104 <std>
 80061e8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80061ec:	2202      	movs	r2, #2
 80061ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061f2:	2112      	movs	r1, #18
 80061f4:	f7ff bf86 	b.w	8006104 <std>
 80061f8:	200004c0 	.word	0x200004c0
 80061fc:	20000388 	.word	0x20000388
 8006200:	08006171 	.word	0x08006171

08006204 <__sfp_lock_acquire>:
 8006204:	4801      	ldr	r0, [pc, #4]	; (800620c <__sfp_lock_acquire+0x8>)
 8006206:	f000 ba22 	b.w	800664e <__retarget_lock_acquire_recursive>
 800620a:	bf00      	nop
 800620c:	200004c9 	.word	0x200004c9

08006210 <__sfp_lock_release>:
 8006210:	4801      	ldr	r0, [pc, #4]	; (8006218 <__sfp_lock_release+0x8>)
 8006212:	f000 ba1d 	b.w	8006650 <__retarget_lock_release_recursive>
 8006216:	bf00      	nop
 8006218:	200004c9 	.word	0x200004c9

0800621c <__sinit>:
 800621c:	b510      	push	{r4, lr}
 800621e:	4604      	mov	r4, r0
 8006220:	f7ff fff0 	bl	8006204 <__sfp_lock_acquire>
 8006224:	6a23      	ldr	r3, [r4, #32]
 8006226:	b11b      	cbz	r3, 8006230 <__sinit+0x14>
 8006228:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800622c:	f7ff bff0 	b.w	8006210 <__sfp_lock_release>
 8006230:	4b04      	ldr	r3, [pc, #16]	; (8006244 <__sinit+0x28>)
 8006232:	6223      	str	r3, [r4, #32]
 8006234:	4b04      	ldr	r3, [pc, #16]	; (8006248 <__sinit+0x2c>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d1f5      	bne.n	8006228 <__sinit+0xc>
 800623c:	f7ff ffc4 	bl	80061c8 <global_stdio_init.part.0>
 8006240:	e7f2      	b.n	8006228 <__sinit+0xc>
 8006242:	bf00      	nop
 8006244:	08006189 	.word	0x08006189
 8006248:	200004c0 	.word	0x200004c0

0800624c <_fwalk_sglue>:
 800624c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006250:	4607      	mov	r7, r0
 8006252:	4688      	mov	r8, r1
 8006254:	4614      	mov	r4, r2
 8006256:	2600      	movs	r6, #0
 8006258:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800625c:	f1b9 0901 	subs.w	r9, r9, #1
 8006260:	d505      	bpl.n	800626e <_fwalk_sglue+0x22>
 8006262:	6824      	ldr	r4, [r4, #0]
 8006264:	2c00      	cmp	r4, #0
 8006266:	d1f7      	bne.n	8006258 <_fwalk_sglue+0xc>
 8006268:	4630      	mov	r0, r6
 800626a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800626e:	89ab      	ldrh	r3, [r5, #12]
 8006270:	2b01      	cmp	r3, #1
 8006272:	d907      	bls.n	8006284 <_fwalk_sglue+0x38>
 8006274:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006278:	3301      	adds	r3, #1
 800627a:	d003      	beq.n	8006284 <_fwalk_sglue+0x38>
 800627c:	4629      	mov	r1, r5
 800627e:	4638      	mov	r0, r7
 8006280:	47c0      	blx	r8
 8006282:	4306      	orrs	r6, r0
 8006284:	3568      	adds	r5, #104	; 0x68
 8006286:	e7e9      	b.n	800625c <_fwalk_sglue+0x10>

08006288 <iprintf>:
 8006288:	b40f      	push	{r0, r1, r2, r3}
 800628a:	b507      	push	{r0, r1, r2, lr}
 800628c:	4906      	ldr	r1, [pc, #24]	; (80062a8 <iprintf+0x20>)
 800628e:	ab04      	add	r3, sp, #16
 8006290:	6808      	ldr	r0, [r1, #0]
 8006292:	f853 2b04 	ldr.w	r2, [r3], #4
 8006296:	6881      	ldr	r1, [r0, #8]
 8006298:	9301      	str	r3, [sp, #4]
 800629a:	f002 fe21 	bl	8008ee0 <_vfiprintf_r>
 800629e:	b003      	add	sp, #12
 80062a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80062a4:	b004      	add	sp, #16
 80062a6:	4770      	bx	lr
 80062a8:	20000064 	.word	0x20000064

080062ac <_puts_r>:
 80062ac:	6a03      	ldr	r3, [r0, #32]
 80062ae:	b570      	push	{r4, r5, r6, lr}
 80062b0:	6884      	ldr	r4, [r0, #8]
 80062b2:	4605      	mov	r5, r0
 80062b4:	460e      	mov	r6, r1
 80062b6:	b90b      	cbnz	r3, 80062bc <_puts_r+0x10>
 80062b8:	f7ff ffb0 	bl	800621c <__sinit>
 80062bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80062be:	07db      	lsls	r3, r3, #31
 80062c0:	d405      	bmi.n	80062ce <_puts_r+0x22>
 80062c2:	89a3      	ldrh	r3, [r4, #12]
 80062c4:	0598      	lsls	r0, r3, #22
 80062c6:	d402      	bmi.n	80062ce <_puts_r+0x22>
 80062c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80062ca:	f000 f9c0 	bl	800664e <__retarget_lock_acquire_recursive>
 80062ce:	89a3      	ldrh	r3, [r4, #12]
 80062d0:	0719      	lsls	r1, r3, #28
 80062d2:	d513      	bpl.n	80062fc <_puts_r+0x50>
 80062d4:	6923      	ldr	r3, [r4, #16]
 80062d6:	b18b      	cbz	r3, 80062fc <_puts_r+0x50>
 80062d8:	3e01      	subs	r6, #1
 80062da:	68a3      	ldr	r3, [r4, #8]
 80062dc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80062e0:	3b01      	subs	r3, #1
 80062e2:	60a3      	str	r3, [r4, #8]
 80062e4:	b9e9      	cbnz	r1, 8006322 <_puts_r+0x76>
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	da2e      	bge.n	8006348 <_puts_r+0x9c>
 80062ea:	4622      	mov	r2, r4
 80062ec:	210a      	movs	r1, #10
 80062ee:	4628      	mov	r0, r5
 80062f0:	f000 f89b 	bl	800642a <__swbuf_r>
 80062f4:	3001      	adds	r0, #1
 80062f6:	d007      	beq.n	8006308 <_puts_r+0x5c>
 80062f8:	250a      	movs	r5, #10
 80062fa:	e007      	b.n	800630c <_puts_r+0x60>
 80062fc:	4621      	mov	r1, r4
 80062fe:	4628      	mov	r0, r5
 8006300:	f000 f8d0 	bl	80064a4 <__swsetup_r>
 8006304:	2800      	cmp	r0, #0
 8006306:	d0e7      	beq.n	80062d8 <_puts_r+0x2c>
 8006308:	f04f 35ff 	mov.w	r5, #4294967295
 800630c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800630e:	07da      	lsls	r2, r3, #31
 8006310:	d405      	bmi.n	800631e <_puts_r+0x72>
 8006312:	89a3      	ldrh	r3, [r4, #12]
 8006314:	059b      	lsls	r3, r3, #22
 8006316:	d402      	bmi.n	800631e <_puts_r+0x72>
 8006318:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800631a:	f000 f999 	bl	8006650 <__retarget_lock_release_recursive>
 800631e:	4628      	mov	r0, r5
 8006320:	bd70      	pop	{r4, r5, r6, pc}
 8006322:	2b00      	cmp	r3, #0
 8006324:	da04      	bge.n	8006330 <_puts_r+0x84>
 8006326:	69a2      	ldr	r2, [r4, #24]
 8006328:	429a      	cmp	r2, r3
 800632a:	dc06      	bgt.n	800633a <_puts_r+0x8e>
 800632c:	290a      	cmp	r1, #10
 800632e:	d004      	beq.n	800633a <_puts_r+0x8e>
 8006330:	6823      	ldr	r3, [r4, #0]
 8006332:	1c5a      	adds	r2, r3, #1
 8006334:	6022      	str	r2, [r4, #0]
 8006336:	7019      	strb	r1, [r3, #0]
 8006338:	e7cf      	b.n	80062da <_puts_r+0x2e>
 800633a:	4622      	mov	r2, r4
 800633c:	4628      	mov	r0, r5
 800633e:	f000 f874 	bl	800642a <__swbuf_r>
 8006342:	3001      	adds	r0, #1
 8006344:	d1c9      	bne.n	80062da <_puts_r+0x2e>
 8006346:	e7df      	b.n	8006308 <_puts_r+0x5c>
 8006348:	6823      	ldr	r3, [r4, #0]
 800634a:	250a      	movs	r5, #10
 800634c:	1c5a      	adds	r2, r3, #1
 800634e:	6022      	str	r2, [r4, #0]
 8006350:	701d      	strb	r5, [r3, #0]
 8006352:	e7db      	b.n	800630c <_puts_r+0x60>

08006354 <puts>:
 8006354:	4b02      	ldr	r3, [pc, #8]	; (8006360 <puts+0xc>)
 8006356:	4601      	mov	r1, r0
 8006358:	6818      	ldr	r0, [r3, #0]
 800635a:	f7ff bfa7 	b.w	80062ac <_puts_r>
 800635e:	bf00      	nop
 8006360:	20000064 	.word	0x20000064

08006364 <siprintf>:
 8006364:	b40e      	push	{r1, r2, r3}
 8006366:	b500      	push	{lr}
 8006368:	b09c      	sub	sp, #112	; 0x70
 800636a:	ab1d      	add	r3, sp, #116	; 0x74
 800636c:	9002      	str	r0, [sp, #8]
 800636e:	9006      	str	r0, [sp, #24]
 8006370:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006374:	4809      	ldr	r0, [pc, #36]	; (800639c <siprintf+0x38>)
 8006376:	9107      	str	r1, [sp, #28]
 8006378:	9104      	str	r1, [sp, #16]
 800637a:	4909      	ldr	r1, [pc, #36]	; (80063a0 <siprintf+0x3c>)
 800637c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006380:	9105      	str	r1, [sp, #20]
 8006382:	6800      	ldr	r0, [r0, #0]
 8006384:	9301      	str	r3, [sp, #4]
 8006386:	a902      	add	r1, sp, #8
 8006388:	f002 fc82 	bl	8008c90 <_svfiprintf_r>
 800638c:	9b02      	ldr	r3, [sp, #8]
 800638e:	2200      	movs	r2, #0
 8006390:	701a      	strb	r2, [r3, #0]
 8006392:	b01c      	add	sp, #112	; 0x70
 8006394:	f85d eb04 	ldr.w	lr, [sp], #4
 8006398:	b003      	add	sp, #12
 800639a:	4770      	bx	lr
 800639c:	20000064 	.word	0x20000064
 80063a0:	ffff0208 	.word	0xffff0208

080063a4 <__sread>:
 80063a4:	b510      	push	{r4, lr}
 80063a6:	460c      	mov	r4, r1
 80063a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063ac:	f000 f900 	bl	80065b0 <_read_r>
 80063b0:	2800      	cmp	r0, #0
 80063b2:	bfab      	itete	ge
 80063b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80063b6:	89a3      	ldrhlt	r3, [r4, #12]
 80063b8:	181b      	addge	r3, r3, r0
 80063ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80063be:	bfac      	ite	ge
 80063c0:	6563      	strge	r3, [r4, #84]	; 0x54
 80063c2:	81a3      	strhlt	r3, [r4, #12]
 80063c4:	bd10      	pop	{r4, pc}

080063c6 <__swrite>:
 80063c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063ca:	461f      	mov	r7, r3
 80063cc:	898b      	ldrh	r3, [r1, #12]
 80063ce:	05db      	lsls	r3, r3, #23
 80063d0:	4605      	mov	r5, r0
 80063d2:	460c      	mov	r4, r1
 80063d4:	4616      	mov	r6, r2
 80063d6:	d505      	bpl.n	80063e4 <__swrite+0x1e>
 80063d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063dc:	2302      	movs	r3, #2
 80063de:	2200      	movs	r2, #0
 80063e0:	f000 f8d4 	bl	800658c <_lseek_r>
 80063e4:	89a3      	ldrh	r3, [r4, #12]
 80063e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80063ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80063ee:	81a3      	strh	r3, [r4, #12]
 80063f0:	4632      	mov	r2, r6
 80063f2:	463b      	mov	r3, r7
 80063f4:	4628      	mov	r0, r5
 80063f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80063fa:	f000 b8eb 	b.w	80065d4 <_write_r>

080063fe <__sseek>:
 80063fe:	b510      	push	{r4, lr}
 8006400:	460c      	mov	r4, r1
 8006402:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006406:	f000 f8c1 	bl	800658c <_lseek_r>
 800640a:	1c43      	adds	r3, r0, #1
 800640c:	89a3      	ldrh	r3, [r4, #12]
 800640e:	bf15      	itete	ne
 8006410:	6560      	strne	r0, [r4, #84]	; 0x54
 8006412:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006416:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800641a:	81a3      	strheq	r3, [r4, #12]
 800641c:	bf18      	it	ne
 800641e:	81a3      	strhne	r3, [r4, #12]
 8006420:	bd10      	pop	{r4, pc}

08006422 <__sclose>:
 8006422:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006426:	f000 b8a1 	b.w	800656c <_close_r>

0800642a <__swbuf_r>:
 800642a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800642c:	460e      	mov	r6, r1
 800642e:	4614      	mov	r4, r2
 8006430:	4605      	mov	r5, r0
 8006432:	b118      	cbz	r0, 800643c <__swbuf_r+0x12>
 8006434:	6a03      	ldr	r3, [r0, #32]
 8006436:	b90b      	cbnz	r3, 800643c <__swbuf_r+0x12>
 8006438:	f7ff fef0 	bl	800621c <__sinit>
 800643c:	69a3      	ldr	r3, [r4, #24]
 800643e:	60a3      	str	r3, [r4, #8]
 8006440:	89a3      	ldrh	r3, [r4, #12]
 8006442:	071a      	lsls	r2, r3, #28
 8006444:	d525      	bpl.n	8006492 <__swbuf_r+0x68>
 8006446:	6923      	ldr	r3, [r4, #16]
 8006448:	b31b      	cbz	r3, 8006492 <__swbuf_r+0x68>
 800644a:	6823      	ldr	r3, [r4, #0]
 800644c:	6922      	ldr	r2, [r4, #16]
 800644e:	1a98      	subs	r0, r3, r2
 8006450:	6963      	ldr	r3, [r4, #20]
 8006452:	b2f6      	uxtb	r6, r6
 8006454:	4283      	cmp	r3, r0
 8006456:	4637      	mov	r7, r6
 8006458:	dc04      	bgt.n	8006464 <__swbuf_r+0x3a>
 800645a:	4621      	mov	r1, r4
 800645c:	4628      	mov	r0, r5
 800645e:	f002 fedf 	bl	8009220 <_fflush_r>
 8006462:	b9e0      	cbnz	r0, 800649e <__swbuf_r+0x74>
 8006464:	68a3      	ldr	r3, [r4, #8]
 8006466:	3b01      	subs	r3, #1
 8006468:	60a3      	str	r3, [r4, #8]
 800646a:	6823      	ldr	r3, [r4, #0]
 800646c:	1c5a      	adds	r2, r3, #1
 800646e:	6022      	str	r2, [r4, #0]
 8006470:	701e      	strb	r6, [r3, #0]
 8006472:	6962      	ldr	r2, [r4, #20]
 8006474:	1c43      	adds	r3, r0, #1
 8006476:	429a      	cmp	r2, r3
 8006478:	d004      	beq.n	8006484 <__swbuf_r+0x5a>
 800647a:	89a3      	ldrh	r3, [r4, #12]
 800647c:	07db      	lsls	r3, r3, #31
 800647e:	d506      	bpl.n	800648e <__swbuf_r+0x64>
 8006480:	2e0a      	cmp	r6, #10
 8006482:	d104      	bne.n	800648e <__swbuf_r+0x64>
 8006484:	4621      	mov	r1, r4
 8006486:	4628      	mov	r0, r5
 8006488:	f002 feca 	bl	8009220 <_fflush_r>
 800648c:	b938      	cbnz	r0, 800649e <__swbuf_r+0x74>
 800648e:	4638      	mov	r0, r7
 8006490:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006492:	4621      	mov	r1, r4
 8006494:	4628      	mov	r0, r5
 8006496:	f000 f805 	bl	80064a4 <__swsetup_r>
 800649a:	2800      	cmp	r0, #0
 800649c:	d0d5      	beq.n	800644a <__swbuf_r+0x20>
 800649e:	f04f 37ff 	mov.w	r7, #4294967295
 80064a2:	e7f4      	b.n	800648e <__swbuf_r+0x64>

080064a4 <__swsetup_r>:
 80064a4:	b538      	push	{r3, r4, r5, lr}
 80064a6:	4b2a      	ldr	r3, [pc, #168]	; (8006550 <__swsetup_r+0xac>)
 80064a8:	4605      	mov	r5, r0
 80064aa:	6818      	ldr	r0, [r3, #0]
 80064ac:	460c      	mov	r4, r1
 80064ae:	b118      	cbz	r0, 80064b8 <__swsetup_r+0x14>
 80064b0:	6a03      	ldr	r3, [r0, #32]
 80064b2:	b90b      	cbnz	r3, 80064b8 <__swsetup_r+0x14>
 80064b4:	f7ff feb2 	bl	800621c <__sinit>
 80064b8:	89a3      	ldrh	r3, [r4, #12]
 80064ba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80064be:	0718      	lsls	r0, r3, #28
 80064c0:	d422      	bmi.n	8006508 <__swsetup_r+0x64>
 80064c2:	06d9      	lsls	r1, r3, #27
 80064c4:	d407      	bmi.n	80064d6 <__swsetup_r+0x32>
 80064c6:	2309      	movs	r3, #9
 80064c8:	602b      	str	r3, [r5, #0]
 80064ca:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80064ce:	81a3      	strh	r3, [r4, #12]
 80064d0:	f04f 30ff 	mov.w	r0, #4294967295
 80064d4:	e034      	b.n	8006540 <__swsetup_r+0x9c>
 80064d6:	0758      	lsls	r0, r3, #29
 80064d8:	d512      	bpl.n	8006500 <__swsetup_r+0x5c>
 80064da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80064dc:	b141      	cbz	r1, 80064f0 <__swsetup_r+0x4c>
 80064de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80064e2:	4299      	cmp	r1, r3
 80064e4:	d002      	beq.n	80064ec <__swsetup_r+0x48>
 80064e6:	4628      	mov	r0, r5
 80064e8:	f000 ff34 	bl	8007354 <_free_r>
 80064ec:	2300      	movs	r3, #0
 80064ee:	6363      	str	r3, [r4, #52]	; 0x34
 80064f0:	89a3      	ldrh	r3, [r4, #12]
 80064f2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80064f6:	81a3      	strh	r3, [r4, #12]
 80064f8:	2300      	movs	r3, #0
 80064fa:	6063      	str	r3, [r4, #4]
 80064fc:	6923      	ldr	r3, [r4, #16]
 80064fe:	6023      	str	r3, [r4, #0]
 8006500:	89a3      	ldrh	r3, [r4, #12]
 8006502:	f043 0308 	orr.w	r3, r3, #8
 8006506:	81a3      	strh	r3, [r4, #12]
 8006508:	6923      	ldr	r3, [r4, #16]
 800650a:	b94b      	cbnz	r3, 8006520 <__swsetup_r+0x7c>
 800650c:	89a3      	ldrh	r3, [r4, #12]
 800650e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006512:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006516:	d003      	beq.n	8006520 <__swsetup_r+0x7c>
 8006518:	4621      	mov	r1, r4
 800651a:	4628      	mov	r0, r5
 800651c:	f002 fece 	bl	80092bc <__smakebuf_r>
 8006520:	89a0      	ldrh	r0, [r4, #12]
 8006522:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006526:	f010 0301 	ands.w	r3, r0, #1
 800652a:	d00a      	beq.n	8006542 <__swsetup_r+0x9e>
 800652c:	2300      	movs	r3, #0
 800652e:	60a3      	str	r3, [r4, #8]
 8006530:	6963      	ldr	r3, [r4, #20]
 8006532:	425b      	negs	r3, r3
 8006534:	61a3      	str	r3, [r4, #24]
 8006536:	6923      	ldr	r3, [r4, #16]
 8006538:	b943      	cbnz	r3, 800654c <__swsetup_r+0xa8>
 800653a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800653e:	d1c4      	bne.n	80064ca <__swsetup_r+0x26>
 8006540:	bd38      	pop	{r3, r4, r5, pc}
 8006542:	0781      	lsls	r1, r0, #30
 8006544:	bf58      	it	pl
 8006546:	6963      	ldrpl	r3, [r4, #20]
 8006548:	60a3      	str	r3, [r4, #8]
 800654a:	e7f4      	b.n	8006536 <__swsetup_r+0x92>
 800654c:	2000      	movs	r0, #0
 800654e:	e7f7      	b.n	8006540 <__swsetup_r+0x9c>
 8006550:	20000064 	.word	0x20000064

08006554 <memset>:
 8006554:	4402      	add	r2, r0
 8006556:	4603      	mov	r3, r0
 8006558:	4293      	cmp	r3, r2
 800655a:	d100      	bne.n	800655e <memset+0xa>
 800655c:	4770      	bx	lr
 800655e:	f803 1b01 	strb.w	r1, [r3], #1
 8006562:	e7f9      	b.n	8006558 <memset+0x4>

08006564 <_localeconv_r>:
 8006564:	4800      	ldr	r0, [pc, #0]	; (8006568 <_localeconv_r+0x4>)
 8006566:	4770      	bx	lr
 8006568:	20000158 	.word	0x20000158

0800656c <_close_r>:
 800656c:	b538      	push	{r3, r4, r5, lr}
 800656e:	4d06      	ldr	r5, [pc, #24]	; (8006588 <_close_r+0x1c>)
 8006570:	2300      	movs	r3, #0
 8006572:	4604      	mov	r4, r0
 8006574:	4608      	mov	r0, r1
 8006576:	602b      	str	r3, [r5, #0]
 8006578:	f7fc fa9f 	bl	8002aba <_close>
 800657c:	1c43      	adds	r3, r0, #1
 800657e:	d102      	bne.n	8006586 <_close_r+0x1a>
 8006580:	682b      	ldr	r3, [r5, #0]
 8006582:	b103      	cbz	r3, 8006586 <_close_r+0x1a>
 8006584:	6023      	str	r3, [r4, #0]
 8006586:	bd38      	pop	{r3, r4, r5, pc}
 8006588:	200004c4 	.word	0x200004c4

0800658c <_lseek_r>:
 800658c:	b538      	push	{r3, r4, r5, lr}
 800658e:	4d07      	ldr	r5, [pc, #28]	; (80065ac <_lseek_r+0x20>)
 8006590:	4604      	mov	r4, r0
 8006592:	4608      	mov	r0, r1
 8006594:	4611      	mov	r1, r2
 8006596:	2200      	movs	r2, #0
 8006598:	602a      	str	r2, [r5, #0]
 800659a:	461a      	mov	r2, r3
 800659c:	f7fc fab4 	bl	8002b08 <_lseek>
 80065a0:	1c43      	adds	r3, r0, #1
 80065a2:	d102      	bne.n	80065aa <_lseek_r+0x1e>
 80065a4:	682b      	ldr	r3, [r5, #0]
 80065a6:	b103      	cbz	r3, 80065aa <_lseek_r+0x1e>
 80065a8:	6023      	str	r3, [r4, #0]
 80065aa:	bd38      	pop	{r3, r4, r5, pc}
 80065ac:	200004c4 	.word	0x200004c4

080065b0 <_read_r>:
 80065b0:	b538      	push	{r3, r4, r5, lr}
 80065b2:	4d07      	ldr	r5, [pc, #28]	; (80065d0 <_read_r+0x20>)
 80065b4:	4604      	mov	r4, r0
 80065b6:	4608      	mov	r0, r1
 80065b8:	4611      	mov	r1, r2
 80065ba:	2200      	movs	r2, #0
 80065bc:	602a      	str	r2, [r5, #0]
 80065be:	461a      	mov	r2, r3
 80065c0:	f7fc fa5e 	bl	8002a80 <_read>
 80065c4:	1c43      	adds	r3, r0, #1
 80065c6:	d102      	bne.n	80065ce <_read_r+0x1e>
 80065c8:	682b      	ldr	r3, [r5, #0]
 80065ca:	b103      	cbz	r3, 80065ce <_read_r+0x1e>
 80065cc:	6023      	str	r3, [r4, #0]
 80065ce:	bd38      	pop	{r3, r4, r5, pc}
 80065d0:	200004c4 	.word	0x200004c4

080065d4 <_write_r>:
 80065d4:	b538      	push	{r3, r4, r5, lr}
 80065d6:	4d07      	ldr	r5, [pc, #28]	; (80065f4 <_write_r+0x20>)
 80065d8:	4604      	mov	r4, r0
 80065da:	4608      	mov	r0, r1
 80065dc:	4611      	mov	r1, r2
 80065de:	2200      	movs	r2, #0
 80065e0:	602a      	str	r2, [r5, #0]
 80065e2:	461a      	mov	r2, r3
 80065e4:	f7fb fd21 	bl	800202a <_write>
 80065e8:	1c43      	adds	r3, r0, #1
 80065ea:	d102      	bne.n	80065f2 <_write_r+0x1e>
 80065ec:	682b      	ldr	r3, [r5, #0]
 80065ee:	b103      	cbz	r3, 80065f2 <_write_r+0x1e>
 80065f0:	6023      	str	r3, [r4, #0]
 80065f2:	bd38      	pop	{r3, r4, r5, pc}
 80065f4:	200004c4 	.word	0x200004c4

080065f8 <__errno>:
 80065f8:	4b01      	ldr	r3, [pc, #4]	; (8006600 <__errno+0x8>)
 80065fa:	6818      	ldr	r0, [r3, #0]
 80065fc:	4770      	bx	lr
 80065fe:	bf00      	nop
 8006600:	20000064 	.word	0x20000064

08006604 <__libc_init_array>:
 8006604:	b570      	push	{r4, r5, r6, lr}
 8006606:	4d0d      	ldr	r5, [pc, #52]	; (800663c <__libc_init_array+0x38>)
 8006608:	4c0d      	ldr	r4, [pc, #52]	; (8006640 <__libc_init_array+0x3c>)
 800660a:	1b64      	subs	r4, r4, r5
 800660c:	10a4      	asrs	r4, r4, #2
 800660e:	2600      	movs	r6, #0
 8006610:	42a6      	cmp	r6, r4
 8006612:	d109      	bne.n	8006628 <__libc_init_array+0x24>
 8006614:	4d0b      	ldr	r5, [pc, #44]	; (8006644 <__libc_init_array+0x40>)
 8006616:	4c0c      	ldr	r4, [pc, #48]	; (8006648 <__libc_init_array+0x44>)
 8006618:	f003 ff04 	bl	800a424 <_init>
 800661c:	1b64      	subs	r4, r4, r5
 800661e:	10a4      	asrs	r4, r4, #2
 8006620:	2600      	movs	r6, #0
 8006622:	42a6      	cmp	r6, r4
 8006624:	d105      	bne.n	8006632 <__libc_init_array+0x2e>
 8006626:	bd70      	pop	{r4, r5, r6, pc}
 8006628:	f855 3b04 	ldr.w	r3, [r5], #4
 800662c:	4798      	blx	r3
 800662e:	3601      	adds	r6, #1
 8006630:	e7ee      	b.n	8006610 <__libc_init_array+0xc>
 8006632:	f855 3b04 	ldr.w	r3, [r5], #4
 8006636:	4798      	blx	r3
 8006638:	3601      	adds	r6, #1
 800663a:	e7f2      	b.n	8006622 <__libc_init_array+0x1e>
 800663c:	0800ac18 	.word	0x0800ac18
 8006640:	0800ac18 	.word	0x0800ac18
 8006644:	0800ac18 	.word	0x0800ac18
 8006648:	0800ac1c 	.word	0x0800ac1c

0800664c <__retarget_lock_init_recursive>:
 800664c:	4770      	bx	lr

0800664e <__retarget_lock_acquire_recursive>:
 800664e:	4770      	bx	lr

08006650 <__retarget_lock_release_recursive>:
 8006650:	4770      	bx	lr
	...

08006654 <nanf>:
 8006654:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800665c <nanf+0x8>
 8006658:	4770      	bx	lr
 800665a:	bf00      	nop
 800665c:	7fc00000 	.word	0x7fc00000

08006660 <quorem>:
 8006660:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006664:	6903      	ldr	r3, [r0, #16]
 8006666:	690c      	ldr	r4, [r1, #16]
 8006668:	42a3      	cmp	r3, r4
 800666a:	4607      	mov	r7, r0
 800666c:	db7e      	blt.n	800676c <quorem+0x10c>
 800666e:	3c01      	subs	r4, #1
 8006670:	f101 0814 	add.w	r8, r1, #20
 8006674:	f100 0514 	add.w	r5, r0, #20
 8006678:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800667c:	9301      	str	r3, [sp, #4]
 800667e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006682:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006686:	3301      	adds	r3, #1
 8006688:	429a      	cmp	r2, r3
 800668a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800668e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006692:	fbb2 f6f3 	udiv	r6, r2, r3
 8006696:	d331      	bcc.n	80066fc <quorem+0x9c>
 8006698:	f04f 0e00 	mov.w	lr, #0
 800669c:	4640      	mov	r0, r8
 800669e:	46ac      	mov	ip, r5
 80066a0:	46f2      	mov	sl, lr
 80066a2:	f850 2b04 	ldr.w	r2, [r0], #4
 80066a6:	b293      	uxth	r3, r2
 80066a8:	fb06 e303 	mla	r3, r6, r3, lr
 80066ac:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80066b0:	0c1a      	lsrs	r2, r3, #16
 80066b2:	b29b      	uxth	r3, r3
 80066b4:	ebaa 0303 	sub.w	r3, sl, r3
 80066b8:	f8dc a000 	ldr.w	sl, [ip]
 80066bc:	fa13 f38a 	uxtah	r3, r3, sl
 80066c0:	fb06 220e 	mla	r2, r6, lr, r2
 80066c4:	9300      	str	r3, [sp, #0]
 80066c6:	9b00      	ldr	r3, [sp, #0]
 80066c8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80066cc:	b292      	uxth	r2, r2
 80066ce:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80066d2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80066d6:	f8bd 3000 	ldrh.w	r3, [sp]
 80066da:	4581      	cmp	r9, r0
 80066dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80066e0:	f84c 3b04 	str.w	r3, [ip], #4
 80066e4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80066e8:	d2db      	bcs.n	80066a2 <quorem+0x42>
 80066ea:	f855 300b 	ldr.w	r3, [r5, fp]
 80066ee:	b92b      	cbnz	r3, 80066fc <quorem+0x9c>
 80066f0:	9b01      	ldr	r3, [sp, #4]
 80066f2:	3b04      	subs	r3, #4
 80066f4:	429d      	cmp	r5, r3
 80066f6:	461a      	mov	r2, r3
 80066f8:	d32c      	bcc.n	8006754 <quorem+0xf4>
 80066fa:	613c      	str	r4, [r7, #16]
 80066fc:	4638      	mov	r0, r7
 80066fe:	f001 f9ef 	bl	8007ae0 <__mcmp>
 8006702:	2800      	cmp	r0, #0
 8006704:	db22      	blt.n	800674c <quorem+0xec>
 8006706:	3601      	adds	r6, #1
 8006708:	4629      	mov	r1, r5
 800670a:	2000      	movs	r0, #0
 800670c:	f858 2b04 	ldr.w	r2, [r8], #4
 8006710:	f8d1 c000 	ldr.w	ip, [r1]
 8006714:	b293      	uxth	r3, r2
 8006716:	1ac3      	subs	r3, r0, r3
 8006718:	0c12      	lsrs	r2, r2, #16
 800671a:	fa13 f38c 	uxtah	r3, r3, ip
 800671e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006722:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006726:	b29b      	uxth	r3, r3
 8006728:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800672c:	45c1      	cmp	r9, r8
 800672e:	f841 3b04 	str.w	r3, [r1], #4
 8006732:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006736:	d2e9      	bcs.n	800670c <quorem+0xac>
 8006738:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800673c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006740:	b922      	cbnz	r2, 800674c <quorem+0xec>
 8006742:	3b04      	subs	r3, #4
 8006744:	429d      	cmp	r5, r3
 8006746:	461a      	mov	r2, r3
 8006748:	d30a      	bcc.n	8006760 <quorem+0x100>
 800674a:	613c      	str	r4, [r7, #16]
 800674c:	4630      	mov	r0, r6
 800674e:	b003      	add	sp, #12
 8006750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006754:	6812      	ldr	r2, [r2, #0]
 8006756:	3b04      	subs	r3, #4
 8006758:	2a00      	cmp	r2, #0
 800675a:	d1ce      	bne.n	80066fa <quorem+0x9a>
 800675c:	3c01      	subs	r4, #1
 800675e:	e7c9      	b.n	80066f4 <quorem+0x94>
 8006760:	6812      	ldr	r2, [r2, #0]
 8006762:	3b04      	subs	r3, #4
 8006764:	2a00      	cmp	r2, #0
 8006766:	d1f0      	bne.n	800674a <quorem+0xea>
 8006768:	3c01      	subs	r4, #1
 800676a:	e7eb      	b.n	8006744 <quorem+0xe4>
 800676c:	2000      	movs	r0, #0
 800676e:	e7ee      	b.n	800674e <quorem+0xee>

08006770 <_dtoa_r>:
 8006770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006774:	ed2d 8b04 	vpush	{d8-d9}
 8006778:	69c5      	ldr	r5, [r0, #28]
 800677a:	b093      	sub	sp, #76	; 0x4c
 800677c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006780:	ec57 6b10 	vmov	r6, r7, d0
 8006784:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006788:	9107      	str	r1, [sp, #28]
 800678a:	4604      	mov	r4, r0
 800678c:	920a      	str	r2, [sp, #40]	; 0x28
 800678e:	930d      	str	r3, [sp, #52]	; 0x34
 8006790:	b975      	cbnz	r5, 80067b0 <_dtoa_r+0x40>
 8006792:	2010      	movs	r0, #16
 8006794:	f000 fe2a 	bl	80073ec <malloc>
 8006798:	4602      	mov	r2, r0
 800679a:	61e0      	str	r0, [r4, #28]
 800679c:	b920      	cbnz	r0, 80067a8 <_dtoa_r+0x38>
 800679e:	4bae      	ldr	r3, [pc, #696]	; (8006a58 <_dtoa_r+0x2e8>)
 80067a0:	21ef      	movs	r1, #239	; 0xef
 80067a2:	48ae      	ldr	r0, [pc, #696]	; (8006a5c <_dtoa_r+0x2ec>)
 80067a4:	f002 fe3c 	bl	8009420 <__assert_func>
 80067a8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80067ac:	6005      	str	r5, [r0, #0]
 80067ae:	60c5      	str	r5, [r0, #12]
 80067b0:	69e3      	ldr	r3, [r4, #28]
 80067b2:	6819      	ldr	r1, [r3, #0]
 80067b4:	b151      	cbz	r1, 80067cc <_dtoa_r+0x5c>
 80067b6:	685a      	ldr	r2, [r3, #4]
 80067b8:	604a      	str	r2, [r1, #4]
 80067ba:	2301      	movs	r3, #1
 80067bc:	4093      	lsls	r3, r2
 80067be:	608b      	str	r3, [r1, #8]
 80067c0:	4620      	mov	r0, r4
 80067c2:	f000 ff07 	bl	80075d4 <_Bfree>
 80067c6:	69e3      	ldr	r3, [r4, #28]
 80067c8:	2200      	movs	r2, #0
 80067ca:	601a      	str	r2, [r3, #0]
 80067cc:	1e3b      	subs	r3, r7, #0
 80067ce:	bfbb      	ittet	lt
 80067d0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80067d4:	9303      	strlt	r3, [sp, #12]
 80067d6:	2300      	movge	r3, #0
 80067d8:	2201      	movlt	r2, #1
 80067da:	bfac      	ite	ge
 80067dc:	f8c8 3000 	strge.w	r3, [r8]
 80067e0:	f8c8 2000 	strlt.w	r2, [r8]
 80067e4:	4b9e      	ldr	r3, [pc, #632]	; (8006a60 <_dtoa_r+0x2f0>)
 80067e6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80067ea:	ea33 0308 	bics.w	r3, r3, r8
 80067ee:	d11b      	bne.n	8006828 <_dtoa_r+0xb8>
 80067f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80067f2:	f242 730f 	movw	r3, #9999	; 0x270f
 80067f6:	6013      	str	r3, [r2, #0]
 80067f8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80067fc:	4333      	orrs	r3, r6
 80067fe:	f000 8593 	beq.w	8007328 <_dtoa_r+0xbb8>
 8006802:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006804:	b963      	cbnz	r3, 8006820 <_dtoa_r+0xb0>
 8006806:	4b97      	ldr	r3, [pc, #604]	; (8006a64 <_dtoa_r+0x2f4>)
 8006808:	e027      	b.n	800685a <_dtoa_r+0xea>
 800680a:	4b97      	ldr	r3, [pc, #604]	; (8006a68 <_dtoa_r+0x2f8>)
 800680c:	9300      	str	r3, [sp, #0]
 800680e:	3308      	adds	r3, #8
 8006810:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006812:	6013      	str	r3, [r2, #0]
 8006814:	9800      	ldr	r0, [sp, #0]
 8006816:	b013      	add	sp, #76	; 0x4c
 8006818:	ecbd 8b04 	vpop	{d8-d9}
 800681c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006820:	4b90      	ldr	r3, [pc, #576]	; (8006a64 <_dtoa_r+0x2f4>)
 8006822:	9300      	str	r3, [sp, #0]
 8006824:	3303      	adds	r3, #3
 8006826:	e7f3      	b.n	8006810 <_dtoa_r+0xa0>
 8006828:	ed9d 7b02 	vldr	d7, [sp, #8]
 800682c:	2200      	movs	r2, #0
 800682e:	ec51 0b17 	vmov	r0, r1, d7
 8006832:	eeb0 8a47 	vmov.f32	s16, s14
 8006836:	eef0 8a67 	vmov.f32	s17, s15
 800683a:	2300      	movs	r3, #0
 800683c:	f7fa f94c 	bl	8000ad8 <__aeabi_dcmpeq>
 8006840:	4681      	mov	r9, r0
 8006842:	b160      	cbz	r0, 800685e <_dtoa_r+0xee>
 8006844:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006846:	2301      	movs	r3, #1
 8006848:	6013      	str	r3, [r2, #0]
 800684a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800684c:	2b00      	cmp	r3, #0
 800684e:	f000 8568 	beq.w	8007322 <_dtoa_r+0xbb2>
 8006852:	4b86      	ldr	r3, [pc, #536]	; (8006a6c <_dtoa_r+0x2fc>)
 8006854:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006856:	6013      	str	r3, [r2, #0]
 8006858:	3b01      	subs	r3, #1
 800685a:	9300      	str	r3, [sp, #0]
 800685c:	e7da      	b.n	8006814 <_dtoa_r+0xa4>
 800685e:	aa10      	add	r2, sp, #64	; 0x40
 8006860:	a911      	add	r1, sp, #68	; 0x44
 8006862:	4620      	mov	r0, r4
 8006864:	eeb0 0a48 	vmov.f32	s0, s16
 8006868:	eef0 0a68 	vmov.f32	s1, s17
 800686c:	f001 fa4e 	bl	8007d0c <__d2b>
 8006870:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006874:	4682      	mov	sl, r0
 8006876:	2d00      	cmp	r5, #0
 8006878:	d07f      	beq.n	800697a <_dtoa_r+0x20a>
 800687a:	ee18 3a90 	vmov	r3, s17
 800687e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006882:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006886:	ec51 0b18 	vmov	r0, r1, d8
 800688a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800688e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006892:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006896:	4619      	mov	r1, r3
 8006898:	2200      	movs	r2, #0
 800689a:	4b75      	ldr	r3, [pc, #468]	; (8006a70 <_dtoa_r+0x300>)
 800689c:	f7f9 fcfc 	bl	8000298 <__aeabi_dsub>
 80068a0:	a367      	add	r3, pc, #412	; (adr r3, 8006a40 <_dtoa_r+0x2d0>)
 80068a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068a6:	f7f9 feaf 	bl	8000608 <__aeabi_dmul>
 80068aa:	a367      	add	r3, pc, #412	; (adr r3, 8006a48 <_dtoa_r+0x2d8>)
 80068ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b0:	f7f9 fcf4 	bl	800029c <__adddf3>
 80068b4:	4606      	mov	r6, r0
 80068b6:	4628      	mov	r0, r5
 80068b8:	460f      	mov	r7, r1
 80068ba:	f7f9 fe3b 	bl	8000534 <__aeabi_i2d>
 80068be:	a364      	add	r3, pc, #400	; (adr r3, 8006a50 <_dtoa_r+0x2e0>)
 80068c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068c4:	f7f9 fea0 	bl	8000608 <__aeabi_dmul>
 80068c8:	4602      	mov	r2, r0
 80068ca:	460b      	mov	r3, r1
 80068cc:	4630      	mov	r0, r6
 80068ce:	4639      	mov	r1, r7
 80068d0:	f7f9 fce4 	bl	800029c <__adddf3>
 80068d4:	4606      	mov	r6, r0
 80068d6:	460f      	mov	r7, r1
 80068d8:	f7fa f946 	bl	8000b68 <__aeabi_d2iz>
 80068dc:	2200      	movs	r2, #0
 80068de:	4683      	mov	fp, r0
 80068e0:	2300      	movs	r3, #0
 80068e2:	4630      	mov	r0, r6
 80068e4:	4639      	mov	r1, r7
 80068e6:	f7fa f901 	bl	8000aec <__aeabi_dcmplt>
 80068ea:	b148      	cbz	r0, 8006900 <_dtoa_r+0x190>
 80068ec:	4658      	mov	r0, fp
 80068ee:	f7f9 fe21 	bl	8000534 <__aeabi_i2d>
 80068f2:	4632      	mov	r2, r6
 80068f4:	463b      	mov	r3, r7
 80068f6:	f7fa f8ef 	bl	8000ad8 <__aeabi_dcmpeq>
 80068fa:	b908      	cbnz	r0, 8006900 <_dtoa_r+0x190>
 80068fc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006900:	f1bb 0f16 	cmp.w	fp, #22
 8006904:	d857      	bhi.n	80069b6 <_dtoa_r+0x246>
 8006906:	4b5b      	ldr	r3, [pc, #364]	; (8006a74 <_dtoa_r+0x304>)
 8006908:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800690c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006910:	ec51 0b18 	vmov	r0, r1, d8
 8006914:	f7fa f8ea 	bl	8000aec <__aeabi_dcmplt>
 8006918:	2800      	cmp	r0, #0
 800691a:	d04e      	beq.n	80069ba <_dtoa_r+0x24a>
 800691c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006920:	2300      	movs	r3, #0
 8006922:	930c      	str	r3, [sp, #48]	; 0x30
 8006924:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006926:	1b5b      	subs	r3, r3, r5
 8006928:	1e5a      	subs	r2, r3, #1
 800692a:	bf45      	ittet	mi
 800692c:	f1c3 0301 	rsbmi	r3, r3, #1
 8006930:	9305      	strmi	r3, [sp, #20]
 8006932:	2300      	movpl	r3, #0
 8006934:	2300      	movmi	r3, #0
 8006936:	9206      	str	r2, [sp, #24]
 8006938:	bf54      	ite	pl
 800693a:	9305      	strpl	r3, [sp, #20]
 800693c:	9306      	strmi	r3, [sp, #24]
 800693e:	f1bb 0f00 	cmp.w	fp, #0
 8006942:	db3c      	blt.n	80069be <_dtoa_r+0x24e>
 8006944:	9b06      	ldr	r3, [sp, #24]
 8006946:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800694a:	445b      	add	r3, fp
 800694c:	9306      	str	r3, [sp, #24]
 800694e:	2300      	movs	r3, #0
 8006950:	9308      	str	r3, [sp, #32]
 8006952:	9b07      	ldr	r3, [sp, #28]
 8006954:	2b09      	cmp	r3, #9
 8006956:	d868      	bhi.n	8006a2a <_dtoa_r+0x2ba>
 8006958:	2b05      	cmp	r3, #5
 800695a:	bfc4      	itt	gt
 800695c:	3b04      	subgt	r3, #4
 800695e:	9307      	strgt	r3, [sp, #28]
 8006960:	9b07      	ldr	r3, [sp, #28]
 8006962:	f1a3 0302 	sub.w	r3, r3, #2
 8006966:	bfcc      	ite	gt
 8006968:	2500      	movgt	r5, #0
 800696a:	2501      	movle	r5, #1
 800696c:	2b03      	cmp	r3, #3
 800696e:	f200 8085 	bhi.w	8006a7c <_dtoa_r+0x30c>
 8006972:	e8df f003 	tbb	[pc, r3]
 8006976:	3b2e      	.short	0x3b2e
 8006978:	5839      	.short	0x5839
 800697a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800697e:	441d      	add	r5, r3
 8006980:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006984:	2b20      	cmp	r3, #32
 8006986:	bfc1      	itttt	gt
 8006988:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800698c:	fa08 f803 	lslgt.w	r8, r8, r3
 8006990:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8006994:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006998:	bfd6      	itet	le
 800699a:	f1c3 0320 	rsble	r3, r3, #32
 800699e:	ea48 0003 	orrgt.w	r0, r8, r3
 80069a2:	fa06 f003 	lslle.w	r0, r6, r3
 80069a6:	f7f9 fdb5 	bl	8000514 <__aeabi_ui2d>
 80069aa:	2201      	movs	r2, #1
 80069ac:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80069b0:	3d01      	subs	r5, #1
 80069b2:	920e      	str	r2, [sp, #56]	; 0x38
 80069b4:	e76f      	b.n	8006896 <_dtoa_r+0x126>
 80069b6:	2301      	movs	r3, #1
 80069b8:	e7b3      	b.n	8006922 <_dtoa_r+0x1b2>
 80069ba:	900c      	str	r0, [sp, #48]	; 0x30
 80069bc:	e7b2      	b.n	8006924 <_dtoa_r+0x1b4>
 80069be:	9b05      	ldr	r3, [sp, #20]
 80069c0:	eba3 030b 	sub.w	r3, r3, fp
 80069c4:	9305      	str	r3, [sp, #20]
 80069c6:	f1cb 0300 	rsb	r3, fp, #0
 80069ca:	9308      	str	r3, [sp, #32]
 80069cc:	2300      	movs	r3, #0
 80069ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80069d0:	e7bf      	b.n	8006952 <_dtoa_r+0x1e2>
 80069d2:	2300      	movs	r3, #0
 80069d4:	9309      	str	r3, [sp, #36]	; 0x24
 80069d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069d8:	2b00      	cmp	r3, #0
 80069da:	dc52      	bgt.n	8006a82 <_dtoa_r+0x312>
 80069dc:	2301      	movs	r3, #1
 80069de:	9301      	str	r3, [sp, #4]
 80069e0:	9304      	str	r3, [sp, #16]
 80069e2:	461a      	mov	r2, r3
 80069e4:	920a      	str	r2, [sp, #40]	; 0x28
 80069e6:	e00b      	b.n	8006a00 <_dtoa_r+0x290>
 80069e8:	2301      	movs	r3, #1
 80069ea:	e7f3      	b.n	80069d4 <_dtoa_r+0x264>
 80069ec:	2300      	movs	r3, #0
 80069ee:	9309      	str	r3, [sp, #36]	; 0x24
 80069f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069f2:	445b      	add	r3, fp
 80069f4:	9301      	str	r3, [sp, #4]
 80069f6:	3301      	adds	r3, #1
 80069f8:	2b01      	cmp	r3, #1
 80069fa:	9304      	str	r3, [sp, #16]
 80069fc:	bfb8      	it	lt
 80069fe:	2301      	movlt	r3, #1
 8006a00:	69e0      	ldr	r0, [r4, #28]
 8006a02:	2100      	movs	r1, #0
 8006a04:	2204      	movs	r2, #4
 8006a06:	f102 0614 	add.w	r6, r2, #20
 8006a0a:	429e      	cmp	r6, r3
 8006a0c:	d93d      	bls.n	8006a8a <_dtoa_r+0x31a>
 8006a0e:	6041      	str	r1, [r0, #4]
 8006a10:	4620      	mov	r0, r4
 8006a12:	f000 fd9f 	bl	8007554 <_Balloc>
 8006a16:	9000      	str	r0, [sp, #0]
 8006a18:	2800      	cmp	r0, #0
 8006a1a:	d139      	bne.n	8006a90 <_dtoa_r+0x320>
 8006a1c:	4b16      	ldr	r3, [pc, #88]	; (8006a78 <_dtoa_r+0x308>)
 8006a1e:	4602      	mov	r2, r0
 8006a20:	f240 11af 	movw	r1, #431	; 0x1af
 8006a24:	e6bd      	b.n	80067a2 <_dtoa_r+0x32>
 8006a26:	2301      	movs	r3, #1
 8006a28:	e7e1      	b.n	80069ee <_dtoa_r+0x27e>
 8006a2a:	2501      	movs	r5, #1
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	9307      	str	r3, [sp, #28]
 8006a30:	9509      	str	r5, [sp, #36]	; 0x24
 8006a32:	f04f 33ff 	mov.w	r3, #4294967295
 8006a36:	9301      	str	r3, [sp, #4]
 8006a38:	9304      	str	r3, [sp, #16]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	2312      	movs	r3, #18
 8006a3e:	e7d1      	b.n	80069e4 <_dtoa_r+0x274>
 8006a40:	636f4361 	.word	0x636f4361
 8006a44:	3fd287a7 	.word	0x3fd287a7
 8006a48:	8b60c8b3 	.word	0x8b60c8b3
 8006a4c:	3fc68a28 	.word	0x3fc68a28
 8006a50:	509f79fb 	.word	0x509f79fb
 8006a54:	3fd34413 	.word	0x3fd34413
 8006a58:	0800a816 	.word	0x0800a816
 8006a5c:	0800a82d 	.word	0x0800a82d
 8006a60:	7ff00000 	.word	0x7ff00000
 8006a64:	0800a812 	.word	0x0800a812
 8006a68:	0800a809 	.word	0x0800a809
 8006a6c:	0800a7e1 	.word	0x0800a7e1
 8006a70:	3ff80000 	.word	0x3ff80000
 8006a74:	0800a918 	.word	0x0800a918
 8006a78:	0800a885 	.word	0x0800a885
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	9309      	str	r3, [sp, #36]	; 0x24
 8006a80:	e7d7      	b.n	8006a32 <_dtoa_r+0x2c2>
 8006a82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a84:	9301      	str	r3, [sp, #4]
 8006a86:	9304      	str	r3, [sp, #16]
 8006a88:	e7ba      	b.n	8006a00 <_dtoa_r+0x290>
 8006a8a:	3101      	adds	r1, #1
 8006a8c:	0052      	lsls	r2, r2, #1
 8006a8e:	e7ba      	b.n	8006a06 <_dtoa_r+0x296>
 8006a90:	69e3      	ldr	r3, [r4, #28]
 8006a92:	9a00      	ldr	r2, [sp, #0]
 8006a94:	601a      	str	r2, [r3, #0]
 8006a96:	9b04      	ldr	r3, [sp, #16]
 8006a98:	2b0e      	cmp	r3, #14
 8006a9a:	f200 80a8 	bhi.w	8006bee <_dtoa_r+0x47e>
 8006a9e:	2d00      	cmp	r5, #0
 8006aa0:	f000 80a5 	beq.w	8006bee <_dtoa_r+0x47e>
 8006aa4:	f1bb 0f00 	cmp.w	fp, #0
 8006aa8:	dd38      	ble.n	8006b1c <_dtoa_r+0x3ac>
 8006aaa:	4bc0      	ldr	r3, [pc, #768]	; (8006dac <_dtoa_r+0x63c>)
 8006aac:	f00b 020f 	and.w	r2, fp, #15
 8006ab0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006ab4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006ab8:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006abc:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006ac0:	d019      	beq.n	8006af6 <_dtoa_r+0x386>
 8006ac2:	4bbb      	ldr	r3, [pc, #748]	; (8006db0 <_dtoa_r+0x640>)
 8006ac4:	ec51 0b18 	vmov	r0, r1, d8
 8006ac8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006acc:	f7f9 fec6 	bl	800085c <__aeabi_ddiv>
 8006ad0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ad4:	f008 080f 	and.w	r8, r8, #15
 8006ad8:	2503      	movs	r5, #3
 8006ada:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8006db0 <_dtoa_r+0x640>
 8006ade:	f1b8 0f00 	cmp.w	r8, #0
 8006ae2:	d10a      	bne.n	8006afa <_dtoa_r+0x38a>
 8006ae4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ae8:	4632      	mov	r2, r6
 8006aea:	463b      	mov	r3, r7
 8006aec:	f7f9 feb6 	bl	800085c <__aeabi_ddiv>
 8006af0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006af4:	e02b      	b.n	8006b4e <_dtoa_r+0x3de>
 8006af6:	2502      	movs	r5, #2
 8006af8:	e7ef      	b.n	8006ada <_dtoa_r+0x36a>
 8006afa:	f018 0f01 	tst.w	r8, #1
 8006afe:	d008      	beq.n	8006b12 <_dtoa_r+0x3a2>
 8006b00:	4630      	mov	r0, r6
 8006b02:	4639      	mov	r1, r7
 8006b04:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006b08:	f7f9 fd7e 	bl	8000608 <__aeabi_dmul>
 8006b0c:	3501      	adds	r5, #1
 8006b0e:	4606      	mov	r6, r0
 8006b10:	460f      	mov	r7, r1
 8006b12:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006b16:	f109 0908 	add.w	r9, r9, #8
 8006b1a:	e7e0      	b.n	8006ade <_dtoa_r+0x36e>
 8006b1c:	f000 809f 	beq.w	8006c5e <_dtoa_r+0x4ee>
 8006b20:	f1cb 0600 	rsb	r6, fp, #0
 8006b24:	4ba1      	ldr	r3, [pc, #644]	; (8006dac <_dtoa_r+0x63c>)
 8006b26:	4fa2      	ldr	r7, [pc, #648]	; (8006db0 <_dtoa_r+0x640>)
 8006b28:	f006 020f 	and.w	r2, r6, #15
 8006b2c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b34:	ec51 0b18 	vmov	r0, r1, d8
 8006b38:	f7f9 fd66 	bl	8000608 <__aeabi_dmul>
 8006b3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b40:	1136      	asrs	r6, r6, #4
 8006b42:	2300      	movs	r3, #0
 8006b44:	2502      	movs	r5, #2
 8006b46:	2e00      	cmp	r6, #0
 8006b48:	d17e      	bne.n	8006c48 <_dtoa_r+0x4d8>
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d1d0      	bne.n	8006af0 <_dtoa_r+0x380>
 8006b4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006b50:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	f000 8084 	beq.w	8006c62 <_dtoa_r+0x4f2>
 8006b5a:	4b96      	ldr	r3, [pc, #600]	; (8006db4 <_dtoa_r+0x644>)
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	4640      	mov	r0, r8
 8006b60:	4649      	mov	r1, r9
 8006b62:	f7f9 ffc3 	bl	8000aec <__aeabi_dcmplt>
 8006b66:	2800      	cmp	r0, #0
 8006b68:	d07b      	beq.n	8006c62 <_dtoa_r+0x4f2>
 8006b6a:	9b04      	ldr	r3, [sp, #16]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d078      	beq.n	8006c62 <_dtoa_r+0x4f2>
 8006b70:	9b01      	ldr	r3, [sp, #4]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	dd39      	ble.n	8006bea <_dtoa_r+0x47a>
 8006b76:	4b90      	ldr	r3, [pc, #576]	; (8006db8 <_dtoa_r+0x648>)
 8006b78:	2200      	movs	r2, #0
 8006b7a:	4640      	mov	r0, r8
 8006b7c:	4649      	mov	r1, r9
 8006b7e:	f7f9 fd43 	bl	8000608 <__aeabi_dmul>
 8006b82:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b86:	9e01      	ldr	r6, [sp, #4]
 8006b88:	f10b 37ff 	add.w	r7, fp, #4294967295
 8006b8c:	3501      	adds	r5, #1
 8006b8e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006b92:	4628      	mov	r0, r5
 8006b94:	f7f9 fcce 	bl	8000534 <__aeabi_i2d>
 8006b98:	4642      	mov	r2, r8
 8006b9a:	464b      	mov	r3, r9
 8006b9c:	f7f9 fd34 	bl	8000608 <__aeabi_dmul>
 8006ba0:	4b86      	ldr	r3, [pc, #536]	; (8006dbc <_dtoa_r+0x64c>)
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	f7f9 fb7a 	bl	800029c <__adddf3>
 8006ba8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006bac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006bb0:	9303      	str	r3, [sp, #12]
 8006bb2:	2e00      	cmp	r6, #0
 8006bb4:	d158      	bne.n	8006c68 <_dtoa_r+0x4f8>
 8006bb6:	4b82      	ldr	r3, [pc, #520]	; (8006dc0 <_dtoa_r+0x650>)
 8006bb8:	2200      	movs	r2, #0
 8006bba:	4640      	mov	r0, r8
 8006bbc:	4649      	mov	r1, r9
 8006bbe:	f7f9 fb6b 	bl	8000298 <__aeabi_dsub>
 8006bc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006bc6:	4680      	mov	r8, r0
 8006bc8:	4689      	mov	r9, r1
 8006bca:	f7f9 ffad 	bl	8000b28 <__aeabi_dcmpgt>
 8006bce:	2800      	cmp	r0, #0
 8006bd0:	f040 8296 	bne.w	8007100 <_dtoa_r+0x990>
 8006bd4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006bd8:	4640      	mov	r0, r8
 8006bda:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006bde:	4649      	mov	r1, r9
 8006be0:	f7f9 ff84 	bl	8000aec <__aeabi_dcmplt>
 8006be4:	2800      	cmp	r0, #0
 8006be6:	f040 8289 	bne.w	80070fc <_dtoa_r+0x98c>
 8006bea:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006bee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	f2c0 814e 	blt.w	8006e92 <_dtoa_r+0x722>
 8006bf6:	f1bb 0f0e 	cmp.w	fp, #14
 8006bfa:	f300 814a 	bgt.w	8006e92 <_dtoa_r+0x722>
 8006bfe:	4b6b      	ldr	r3, [pc, #428]	; (8006dac <_dtoa_r+0x63c>)
 8006c00:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006c04:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006c08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	f280 80dc 	bge.w	8006dc8 <_dtoa_r+0x658>
 8006c10:	9b04      	ldr	r3, [sp, #16]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	f300 80d8 	bgt.w	8006dc8 <_dtoa_r+0x658>
 8006c18:	f040 826f 	bne.w	80070fa <_dtoa_r+0x98a>
 8006c1c:	4b68      	ldr	r3, [pc, #416]	; (8006dc0 <_dtoa_r+0x650>)
 8006c1e:	2200      	movs	r2, #0
 8006c20:	4640      	mov	r0, r8
 8006c22:	4649      	mov	r1, r9
 8006c24:	f7f9 fcf0 	bl	8000608 <__aeabi_dmul>
 8006c28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006c2c:	f7f9 ff72 	bl	8000b14 <__aeabi_dcmpge>
 8006c30:	9e04      	ldr	r6, [sp, #16]
 8006c32:	4637      	mov	r7, r6
 8006c34:	2800      	cmp	r0, #0
 8006c36:	f040 8245 	bne.w	80070c4 <_dtoa_r+0x954>
 8006c3a:	9d00      	ldr	r5, [sp, #0]
 8006c3c:	2331      	movs	r3, #49	; 0x31
 8006c3e:	f805 3b01 	strb.w	r3, [r5], #1
 8006c42:	f10b 0b01 	add.w	fp, fp, #1
 8006c46:	e241      	b.n	80070cc <_dtoa_r+0x95c>
 8006c48:	07f2      	lsls	r2, r6, #31
 8006c4a:	d505      	bpl.n	8006c58 <_dtoa_r+0x4e8>
 8006c4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c50:	f7f9 fcda 	bl	8000608 <__aeabi_dmul>
 8006c54:	3501      	adds	r5, #1
 8006c56:	2301      	movs	r3, #1
 8006c58:	1076      	asrs	r6, r6, #1
 8006c5a:	3708      	adds	r7, #8
 8006c5c:	e773      	b.n	8006b46 <_dtoa_r+0x3d6>
 8006c5e:	2502      	movs	r5, #2
 8006c60:	e775      	b.n	8006b4e <_dtoa_r+0x3de>
 8006c62:	9e04      	ldr	r6, [sp, #16]
 8006c64:	465f      	mov	r7, fp
 8006c66:	e792      	b.n	8006b8e <_dtoa_r+0x41e>
 8006c68:	9900      	ldr	r1, [sp, #0]
 8006c6a:	4b50      	ldr	r3, [pc, #320]	; (8006dac <_dtoa_r+0x63c>)
 8006c6c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006c70:	4431      	add	r1, r6
 8006c72:	9102      	str	r1, [sp, #8]
 8006c74:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c76:	eeb0 9a47 	vmov.f32	s18, s14
 8006c7a:	eef0 9a67 	vmov.f32	s19, s15
 8006c7e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006c82:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006c86:	2900      	cmp	r1, #0
 8006c88:	d044      	beq.n	8006d14 <_dtoa_r+0x5a4>
 8006c8a:	494e      	ldr	r1, [pc, #312]	; (8006dc4 <_dtoa_r+0x654>)
 8006c8c:	2000      	movs	r0, #0
 8006c8e:	f7f9 fde5 	bl	800085c <__aeabi_ddiv>
 8006c92:	ec53 2b19 	vmov	r2, r3, d9
 8006c96:	f7f9 faff 	bl	8000298 <__aeabi_dsub>
 8006c9a:	9d00      	ldr	r5, [sp, #0]
 8006c9c:	ec41 0b19 	vmov	d9, r0, r1
 8006ca0:	4649      	mov	r1, r9
 8006ca2:	4640      	mov	r0, r8
 8006ca4:	f7f9 ff60 	bl	8000b68 <__aeabi_d2iz>
 8006ca8:	4606      	mov	r6, r0
 8006caa:	f7f9 fc43 	bl	8000534 <__aeabi_i2d>
 8006cae:	4602      	mov	r2, r0
 8006cb0:	460b      	mov	r3, r1
 8006cb2:	4640      	mov	r0, r8
 8006cb4:	4649      	mov	r1, r9
 8006cb6:	f7f9 faef 	bl	8000298 <__aeabi_dsub>
 8006cba:	3630      	adds	r6, #48	; 0x30
 8006cbc:	f805 6b01 	strb.w	r6, [r5], #1
 8006cc0:	ec53 2b19 	vmov	r2, r3, d9
 8006cc4:	4680      	mov	r8, r0
 8006cc6:	4689      	mov	r9, r1
 8006cc8:	f7f9 ff10 	bl	8000aec <__aeabi_dcmplt>
 8006ccc:	2800      	cmp	r0, #0
 8006cce:	d164      	bne.n	8006d9a <_dtoa_r+0x62a>
 8006cd0:	4642      	mov	r2, r8
 8006cd2:	464b      	mov	r3, r9
 8006cd4:	4937      	ldr	r1, [pc, #220]	; (8006db4 <_dtoa_r+0x644>)
 8006cd6:	2000      	movs	r0, #0
 8006cd8:	f7f9 fade 	bl	8000298 <__aeabi_dsub>
 8006cdc:	ec53 2b19 	vmov	r2, r3, d9
 8006ce0:	f7f9 ff04 	bl	8000aec <__aeabi_dcmplt>
 8006ce4:	2800      	cmp	r0, #0
 8006ce6:	f040 80b6 	bne.w	8006e56 <_dtoa_r+0x6e6>
 8006cea:	9b02      	ldr	r3, [sp, #8]
 8006cec:	429d      	cmp	r5, r3
 8006cee:	f43f af7c 	beq.w	8006bea <_dtoa_r+0x47a>
 8006cf2:	4b31      	ldr	r3, [pc, #196]	; (8006db8 <_dtoa_r+0x648>)
 8006cf4:	ec51 0b19 	vmov	r0, r1, d9
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	f7f9 fc85 	bl	8000608 <__aeabi_dmul>
 8006cfe:	4b2e      	ldr	r3, [pc, #184]	; (8006db8 <_dtoa_r+0x648>)
 8006d00:	ec41 0b19 	vmov	d9, r0, r1
 8006d04:	2200      	movs	r2, #0
 8006d06:	4640      	mov	r0, r8
 8006d08:	4649      	mov	r1, r9
 8006d0a:	f7f9 fc7d 	bl	8000608 <__aeabi_dmul>
 8006d0e:	4680      	mov	r8, r0
 8006d10:	4689      	mov	r9, r1
 8006d12:	e7c5      	b.n	8006ca0 <_dtoa_r+0x530>
 8006d14:	ec51 0b17 	vmov	r0, r1, d7
 8006d18:	f7f9 fc76 	bl	8000608 <__aeabi_dmul>
 8006d1c:	9b02      	ldr	r3, [sp, #8]
 8006d1e:	9d00      	ldr	r5, [sp, #0]
 8006d20:	930f      	str	r3, [sp, #60]	; 0x3c
 8006d22:	ec41 0b19 	vmov	d9, r0, r1
 8006d26:	4649      	mov	r1, r9
 8006d28:	4640      	mov	r0, r8
 8006d2a:	f7f9 ff1d 	bl	8000b68 <__aeabi_d2iz>
 8006d2e:	4606      	mov	r6, r0
 8006d30:	f7f9 fc00 	bl	8000534 <__aeabi_i2d>
 8006d34:	3630      	adds	r6, #48	; 0x30
 8006d36:	4602      	mov	r2, r0
 8006d38:	460b      	mov	r3, r1
 8006d3a:	4640      	mov	r0, r8
 8006d3c:	4649      	mov	r1, r9
 8006d3e:	f7f9 faab 	bl	8000298 <__aeabi_dsub>
 8006d42:	f805 6b01 	strb.w	r6, [r5], #1
 8006d46:	9b02      	ldr	r3, [sp, #8]
 8006d48:	429d      	cmp	r5, r3
 8006d4a:	4680      	mov	r8, r0
 8006d4c:	4689      	mov	r9, r1
 8006d4e:	f04f 0200 	mov.w	r2, #0
 8006d52:	d124      	bne.n	8006d9e <_dtoa_r+0x62e>
 8006d54:	4b1b      	ldr	r3, [pc, #108]	; (8006dc4 <_dtoa_r+0x654>)
 8006d56:	ec51 0b19 	vmov	r0, r1, d9
 8006d5a:	f7f9 fa9f 	bl	800029c <__adddf3>
 8006d5e:	4602      	mov	r2, r0
 8006d60:	460b      	mov	r3, r1
 8006d62:	4640      	mov	r0, r8
 8006d64:	4649      	mov	r1, r9
 8006d66:	f7f9 fedf 	bl	8000b28 <__aeabi_dcmpgt>
 8006d6a:	2800      	cmp	r0, #0
 8006d6c:	d173      	bne.n	8006e56 <_dtoa_r+0x6e6>
 8006d6e:	ec53 2b19 	vmov	r2, r3, d9
 8006d72:	4914      	ldr	r1, [pc, #80]	; (8006dc4 <_dtoa_r+0x654>)
 8006d74:	2000      	movs	r0, #0
 8006d76:	f7f9 fa8f 	bl	8000298 <__aeabi_dsub>
 8006d7a:	4602      	mov	r2, r0
 8006d7c:	460b      	mov	r3, r1
 8006d7e:	4640      	mov	r0, r8
 8006d80:	4649      	mov	r1, r9
 8006d82:	f7f9 feb3 	bl	8000aec <__aeabi_dcmplt>
 8006d86:	2800      	cmp	r0, #0
 8006d88:	f43f af2f 	beq.w	8006bea <_dtoa_r+0x47a>
 8006d8c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006d8e:	1e6b      	subs	r3, r5, #1
 8006d90:	930f      	str	r3, [sp, #60]	; 0x3c
 8006d92:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006d96:	2b30      	cmp	r3, #48	; 0x30
 8006d98:	d0f8      	beq.n	8006d8c <_dtoa_r+0x61c>
 8006d9a:	46bb      	mov	fp, r7
 8006d9c:	e04a      	b.n	8006e34 <_dtoa_r+0x6c4>
 8006d9e:	4b06      	ldr	r3, [pc, #24]	; (8006db8 <_dtoa_r+0x648>)
 8006da0:	f7f9 fc32 	bl	8000608 <__aeabi_dmul>
 8006da4:	4680      	mov	r8, r0
 8006da6:	4689      	mov	r9, r1
 8006da8:	e7bd      	b.n	8006d26 <_dtoa_r+0x5b6>
 8006daa:	bf00      	nop
 8006dac:	0800a918 	.word	0x0800a918
 8006db0:	0800a8f0 	.word	0x0800a8f0
 8006db4:	3ff00000 	.word	0x3ff00000
 8006db8:	40240000 	.word	0x40240000
 8006dbc:	401c0000 	.word	0x401c0000
 8006dc0:	40140000 	.word	0x40140000
 8006dc4:	3fe00000 	.word	0x3fe00000
 8006dc8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006dcc:	9d00      	ldr	r5, [sp, #0]
 8006dce:	4642      	mov	r2, r8
 8006dd0:	464b      	mov	r3, r9
 8006dd2:	4630      	mov	r0, r6
 8006dd4:	4639      	mov	r1, r7
 8006dd6:	f7f9 fd41 	bl	800085c <__aeabi_ddiv>
 8006dda:	f7f9 fec5 	bl	8000b68 <__aeabi_d2iz>
 8006dde:	9001      	str	r0, [sp, #4]
 8006de0:	f7f9 fba8 	bl	8000534 <__aeabi_i2d>
 8006de4:	4642      	mov	r2, r8
 8006de6:	464b      	mov	r3, r9
 8006de8:	f7f9 fc0e 	bl	8000608 <__aeabi_dmul>
 8006dec:	4602      	mov	r2, r0
 8006dee:	460b      	mov	r3, r1
 8006df0:	4630      	mov	r0, r6
 8006df2:	4639      	mov	r1, r7
 8006df4:	f7f9 fa50 	bl	8000298 <__aeabi_dsub>
 8006df8:	9e01      	ldr	r6, [sp, #4]
 8006dfa:	9f04      	ldr	r7, [sp, #16]
 8006dfc:	3630      	adds	r6, #48	; 0x30
 8006dfe:	f805 6b01 	strb.w	r6, [r5], #1
 8006e02:	9e00      	ldr	r6, [sp, #0]
 8006e04:	1bae      	subs	r6, r5, r6
 8006e06:	42b7      	cmp	r7, r6
 8006e08:	4602      	mov	r2, r0
 8006e0a:	460b      	mov	r3, r1
 8006e0c:	d134      	bne.n	8006e78 <_dtoa_r+0x708>
 8006e0e:	f7f9 fa45 	bl	800029c <__adddf3>
 8006e12:	4642      	mov	r2, r8
 8006e14:	464b      	mov	r3, r9
 8006e16:	4606      	mov	r6, r0
 8006e18:	460f      	mov	r7, r1
 8006e1a:	f7f9 fe85 	bl	8000b28 <__aeabi_dcmpgt>
 8006e1e:	b9c8      	cbnz	r0, 8006e54 <_dtoa_r+0x6e4>
 8006e20:	4642      	mov	r2, r8
 8006e22:	464b      	mov	r3, r9
 8006e24:	4630      	mov	r0, r6
 8006e26:	4639      	mov	r1, r7
 8006e28:	f7f9 fe56 	bl	8000ad8 <__aeabi_dcmpeq>
 8006e2c:	b110      	cbz	r0, 8006e34 <_dtoa_r+0x6c4>
 8006e2e:	9b01      	ldr	r3, [sp, #4]
 8006e30:	07db      	lsls	r3, r3, #31
 8006e32:	d40f      	bmi.n	8006e54 <_dtoa_r+0x6e4>
 8006e34:	4651      	mov	r1, sl
 8006e36:	4620      	mov	r0, r4
 8006e38:	f000 fbcc 	bl	80075d4 <_Bfree>
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006e40:	702b      	strb	r3, [r5, #0]
 8006e42:	f10b 0301 	add.w	r3, fp, #1
 8006e46:	6013      	str	r3, [r2, #0]
 8006e48:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	f43f ace2 	beq.w	8006814 <_dtoa_r+0xa4>
 8006e50:	601d      	str	r5, [r3, #0]
 8006e52:	e4df      	b.n	8006814 <_dtoa_r+0xa4>
 8006e54:	465f      	mov	r7, fp
 8006e56:	462b      	mov	r3, r5
 8006e58:	461d      	mov	r5, r3
 8006e5a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006e5e:	2a39      	cmp	r2, #57	; 0x39
 8006e60:	d106      	bne.n	8006e70 <_dtoa_r+0x700>
 8006e62:	9a00      	ldr	r2, [sp, #0]
 8006e64:	429a      	cmp	r2, r3
 8006e66:	d1f7      	bne.n	8006e58 <_dtoa_r+0x6e8>
 8006e68:	9900      	ldr	r1, [sp, #0]
 8006e6a:	2230      	movs	r2, #48	; 0x30
 8006e6c:	3701      	adds	r7, #1
 8006e6e:	700a      	strb	r2, [r1, #0]
 8006e70:	781a      	ldrb	r2, [r3, #0]
 8006e72:	3201      	adds	r2, #1
 8006e74:	701a      	strb	r2, [r3, #0]
 8006e76:	e790      	b.n	8006d9a <_dtoa_r+0x62a>
 8006e78:	4ba3      	ldr	r3, [pc, #652]	; (8007108 <_dtoa_r+0x998>)
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	f7f9 fbc4 	bl	8000608 <__aeabi_dmul>
 8006e80:	2200      	movs	r2, #0
 8006e82:	2300      	movs	r3, #0
 8006e84:	4606      	mov	r6, r0
 8006e86:	460f      	mov	r7, r1
 8006e88:	f7f9 fe26 	bl	8000ad8 <__aeabi_dcmpeq>
 8006e8c:	2800      	cmp	r0, #0
 8006e8e:	d09e      	beq.n	8006dce <_dtoa_r+0x65e>
 8006e90:	e7d0      	b.n	8006e34 <_dtoa_r+0x6c4>
 8006e92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e94:	2a00      	cmp	r2, #0
 8006e96:	f000 80ca 	beq.w	800702e <_dtoa_r+0x8be>
 8006e9a:	9a07      	ldr	r2, [sp, #28]
 8006e9c:	2a01      	cmp	r2, #1
 8006e9e:	f300 80ad 	bgt.w	8006ffc <_dtoa_r+0x88c>
 8006ea2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006ea4:	2a00      	cmp	r2, #0
 8006ea6:	f000 80a5 	beq.w	8006ff4 <_dtoa_r+0x884>
 8006eaa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006eae:	9e08      	ldr	r6, [sp, #32]
 8006eb0:	9d05      	ldr	r5, [sp, #20]
 8006eb2:	9a05      	ldr	r2, [sp, #20]
 8006eb4:	441a      	add	r2, r3
 8006eb6:	9205      	str	r2, [sp, #20]
 8006eb8:	9a06      	ldr	r2, [sp, #24]
 8006eba:	2101      	movs	r1, #1
 8006ebc:	441a      	add	r2, r3
 8006ebe:	4620      	mov	r0, r4
 8006ec0:	9206      	str	r2, [sp, #24]
 8006ec2:	f000 fc87 	bl	80077d4 <__i2b>
 8006ec6:	4607      	mov	r7, r0
 8006ec8:	b165      	cbz	r5, 8006ee4 <_dtoa_r+0x774>
 8006eca:	9b06      	ldr	r3, [sp, #24]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	dd09      	ble.n	8006ee4 <_dtoa_r+0x774>
 8006ed0:	42ab      	cmp	r3, r5
 8006ed2:	9a05      	ldr	r2, [sp, #20]
 8006ed4:	bfa8      	it	ge
 8006ed6:	462b      	movge	r3, r5
 8006ed8:	1ad2      	subs	r2, r2, r3
 8006eda:	9205      	str	r2, [sp, #20]
 8006edc:	9a06      	ldr	r2, [sp, #24]
 8006ede:	1aed      	subs	r5, r5, r3
 8006ee0:	1ad3      	subs	r3, r2, r3
 8006ee2:	9306      	str	r3, [sp, #24]
 8006ee4:	9b08      	ldr	r3, [sp, #32]
 8006ee6:	b1f3      	cbz	r3, 8006f26 <_dtoa_r+0x7b6>
 8006ee8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	f000 80a3 	beq.w	8007036 <_dtoa_r+0x8c6>
 8006ef0:	2e00      	cmp	r6, #0
 8006ef2:	dd10      	ble.n	8006f16 <_dtoa_r+0x7a6>
 8006ef4:	4639      	mov	r1, r7
 8006ef6:	4632      	mov	r2, r6
 8006ef8:	4620      	mov	r0, r4
 8006efa:	f000 fd2b 	bl	8007954 <__pow5mult>
 8006efe:	4652      	mov	r2, sl
 8006f00:	4601      	mov	r1, r0
 8006f02:	4607      	mov	r7, r0
 8006f04:	4620      	mov	r0, r4
 8006f06:	f000 fc7b 	bl	8007800 <__multiply>
 8006f0a:	4651      	mov	r1, sl
 8006f0c:	4680      	mov	r8, r0
 8006f0e:	4620      	mov	r0, r4
 8006f10:	f000 fb60 	bl	80075d4 <_Bfree>
 8006f14:	46c2      	mov	sl, r8
 8006f16:	9b08      	ldr	r3, [sp, #32]
 8006f18:	1b9a      	subs	r2, r3, r6
 8006f1a:	d004      	beq.n	8006f26 <_dtoa_r+0x7b6>
 8006f1c:	4651      	mov	r1, sl
 8006f1e:	4620      	mov	r0, r4
 8006f20:	f000 fd18 	bl	8007954 <__pow5mult>
 8006f24:	4682      	mov	sl, r0
 8006f26:	2101      	movs	r1, #1
 8006f28:	4620      	mov	r0, r4
 8006f2a:	f000 fc53 	bl	80077d4 <__i2b>
 8006f2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	4606      	mov	r6, r0
 8006f34:	f340 8081 	ble.w	800703a <_dtoa_r+0x8ca>
 8006f38:	461a      	mov	r2, r3
 8006f3a:	4601      	mov	r1, r0
 8006f3c:	4620      	mov	r0, r4
 8006f3e:	f000 fd09 	bl	8007954 <__pow5mult>
 8006f42:	9b07      	ldr	r3, [sp, #28]
 8006f44:	2b01      	cmp	r3, #1
 8006f46:	4606      	mov	r6, r0
 8006f48:	dd7a      	ble.n	8007040 <_dtoa_r+0x8d0>
 8006f4a:	f04f 0800 	mov.w	r8, #0
 8006f4e:	6933      	ldr	r3, [r6, #16]
 8006f50:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006f54:	6918      	ldr	r0, [r3, #16]
 8006f56:	f000 fbef 	bl	8007738 <__hi0bits>
 8006f5a:	f1c0 0020 	rsb	r0, r0, #32
 8006f5e:	9b06      	ldr	r3, [sp, #24]
 8006f60:	4418      	add	r0, r3
 8006f62:	f010 001f 	ands.w	r0, r0, #31
 8006f66:	f000 8094 	beq.w	8007092 <_dtoa_r+0x922>
 8006f6a:	f1c0 0320 	rsb	r3, r0, #32
 8006f6e:	2b04      	cmp	r3, #4
 8006f70:	f340 8085 	ble.w	800707e <_dtoa_r+0x90e>
 8006f74:	9b05      	ldr	r3, [sp, #20]
 8006f76:	f1c0 001c 	rsb	r0, r0, #28
 8006f7a:	4403      	add	r3, r0
 8006f7c:	9305      	str	r3, [sp, #20]
 8006f7e:	9b06      	ldr	r3, [sp, #24]
 8006f80:	4403      	add	r3, r0
 8006f82:	4405      	add	r5, r0
 8006f84:	9306      	str	r3, [sp, #24]
 8006f86:	9b05      	ldr	r3, [sp, #20]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	dd05      	ble.n	8006f98 <_dtoa_r+0x828>
 8006f8c:	4651      	mov	r1, sl
 8006f8e:	461a      	mov	r2, r3
 8006f90:	4620      	mov	r0, r4
 8006f92:	f000 fd39 	bl	8007a08 <__lshift>
 8006f96:	4682      	mov	sl, r0
 8006f98:	9b06      	ldr	r3, [sp, #24]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	dd05      	ble.n	8006faa <_dtoa_r+0x83a>
 8006f9e:	4631      	mov	r1, r6
 8006fa0:	461a      	mov	r2, r3
 8006fa2:	4620      	mov	r0, r4
 8006fa4:	f000 fd30 	bl	8007a08 <__lshift>
 8006fa8:	4606      	mov	r6, r0
 8006faa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d072      	beq.n	8007096 <_dtoa_r+0x926>
 8006fb0:	4631      	mov	r1, r6
 8006fb2:	4650      	mov	r0, sl
 8006fb4:	f000 fd94 	bl	8007ae0 <__mcmp>
 8006fb8:	2800      	cmp	r0, #0
 8006fba:	da6c      	bge.n	8007096 <_dtoa_r+0x926>
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	4651      	mov	r1, sl
 8006fc0:	220a      	movs	r2, #10
 8006fc2:	4620      	mov	r0, r4
 8006fc4:	f000 fb28 	bl	8007618 <__multadd>
 8006fc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fca:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006fce:	4682      	mov	sl, r0
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	f000 81b0 	beq.w	8007336 <_dtoa_r+0xbc6>
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	4639      	mov	r1, r7
 8006fda:	220a      	movs	r2, #10
 8006fdc:	4620      	mov	r0, r4
 8006fde:	f000 fb1b 	bl	8007618 <__multadd>
 8006fe2:	9b01      	ldr	r3, [sp, #4]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	4607      	mov	r7, r0
 8006fe8:	f300 8096 	bgt.w	8007118 <_dtoa_r+0x9a8>
 8006fec:	9b07      	ldr	r3, [sp, #28]
 8006fee:	2b02      	cmp	r3, #2
 8006ff0:	dc59      	bgt.n	80070a6 <_dtoa_r+0x936>
 8006ff2:	e091      	b.n	8007118 <_dtoa_r+0x9a8>
 8006ff4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006ff6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006ffa:	e758      	b.n	8006eae <_dtoa_r+0x73e>
 8006ffc:	9b04      	ldr	r3, [sp, #16]
 8006ffe:	1e5e      	subs	r6, r3, #1
 8007000:	9b08      	ldr	r3, [sp, #32]
 8007002:	42b3      	cmp	r3, r6
 8007004:	bfbf      	itttt	lt
 8007006:	9b08      	ldrlt	r3, [sp, #32]
 8007008:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800700a:	9608      	strlt	r6, [sp, #32]
 800700c:	1af3      	sublt	r3, r6, r3
 800700e:	bfb4      	ite	lt
 8007010:	18d2      	addlt	r2, r2, r3
 8007012:	1b9e      	subge	r6, r3, r6
 8007014:	9b04      	ldr	r3, [sp, #16]
 8007016:	bfbc      	itt	lt
 8007018:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800701a:	2600      	movlt	r6, #0
 800701c:	2b00      	cmp	r3, #0
 800701e:	bfb7      	itett	lt
 8007020:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8007024:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8007028:	1a9d      	sublt	r5, r3, r2
 800702a:	2300      	movlt	r3, #0
 800702c:	e741      	b.n	8006eb2 <_dtoa_r+0x742>
 800702e:	9e08      	ldr	r6, [sp, #32]
 8007030:	9d05      	ldr	r5, [sp, #20]
 8007032:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007034:	e748      	b.n	8006ec8 <_dtoa_r+0x758>
 8007036:	9a08      	ldr	r2, [sp, #32]
 8007038:	e770      	b.n	8006f1c <_dtoa_r+0x7ac>
 800703a:	9b07      	ldr	r3, [sp, #28]
 800703c:	2b01      	cmp	r3, #1
 800703e:	dc19      	bgt.n	8007074 <_dtoa_r+0x904>
 8007040:	9b02      	ldr	r3, [sp, #8]
 8007042:	b9bb      	cbnz	r3, 8007074 <_dtoa_r+0x904>
 8007044:	9b03      	ldr	r3, [sp, #12]
 8007046:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800704a:	b99b      	cbnz	r3, 8007074 <_dtoa_r+0x904>
 800704c:	9b03      	ldr	r3, [sp, #12]
 800704e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007052:	0d1b      	lsrs	r3, r3, #20
 8007054:	051b      	lsls	r3, r3, #20
 8007056:	b183      	cbz	r3, 800707a <_dtoa_r+0x90a>
 8007058:	9b05      	ldr	r3, [sp, #20]
 800705a:	3301      	adds	r3, #1
 800705c:	9305      	str	r3, [sp, #20]
 800705e:	9b06      	ldr	r3, [sp, #24]
 8007060:	3301      	adds	r3, #1
 8007062:	9306      	str	r3, [sp, #24]
 8007064:	f04f 0801 	mov.w	r8, #1
 8007068:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800706a:	2b00      	cmp	r3, #0
 800706c:	f47f af6f 	bne.w	8006f4e <_dtoa_r+0x7de>
 8007070:	2001      	movs	r0, #1
 8007072:	e774      	b.n	8006f5e <_dtoa_r+0x7ee>
 8007074:	f04f 0800 	mov.w	r8, #0
 8007078:	e7f6      	b.n	8007068 <_dtoa_r+0x8f8>
 800707a:	4698      	mov	r8, r3
 800707c:	e7f4      	b.n	8007068 <_dtoa_r+0x8f8>
 800707e:	d082      	beq.n	8006f86 <_dtoa_r+0x816>
 8007080:	9a05      	ldr	r2, [sp, #20]
 8007082:	331c      	adds	r3, #28
 8007084:	441a      	add	r2, r3
 8007086:	9205      	str	r2, [sp, #20]
 8007088:	9a06      	ldr	r2, [sp, #24]
 800708a:	441a      	add	r2, r3
 800708c:	441d      	add	r5, r3
 800708e:	9206      	str	r2, [sp, #24]
 8007090:	e779      	b.n	8006f86 <_dtoa_r+0x816>
 8007092:	4603      	mov	r3, r0
 8007094:	e7f4      	b.n	8007080 <_dtoa_r+0x910>
 8007096:	9b04      	ldr	r3, [sp, #16]
 8007098:	2b00      	cmp	r3, #0
 800709a:	dc37      	bgt.n	800710c <_dtoa_r+0x99c>
 800709c:	9b07      	ldr	r3, [sp, #28]
 800709e:	2b02      	cmp	r3, #2
 80070a0:	dd34      	ble.n	800710c <_dtoa_r+0x99c>
 80070a2:	9b04      	ldr	r3, [sp, #16]
 80070a4:	9301      	str	r3, [sp, #4]
 80070a6:	9b01      	ldr	r3, [sp, #4]
 80070a8:	b963      	cbnz	r3, 80070c4 <_dtoa_r+0x954>
 80070aa:	4631      	mov	r1, r6
 80070ac:	2205      	movs	r2, #5
 80070ae:	4620      	mov	r0, r4
 80070b0:	f000 fab2 	bl	8007618 <__multadd>
 80070b4:	4601      	mov	r1, r0
 80070b6:	4606      	mov	r6, r0
 80070b8:	4650      	mov	r0, sl
 80070ba:	f000 fd11 	bl	8007ae0 <__mcmp>
 80070be:	2800      	cmp	r0, #0
 80070c0:	f73f adbb 	bgt.w	8006c3a <_dtoa_r+0x4ca>
 80070c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070c6:	9d00      	ldr	r5, [sp, #0]
 80070c8:	ea6f 0b03 	mvn.w	fp, r3
 80070cc:	f04f 0800 	mov.w	r8, #0
 80070d0:	4631      	mov	r1, r6
 80070d2:	4620      	mov	r0, r4
 80070d4:	f000 fa7e 	bl	80075d4 <_Bfree>
 80070d8:	2f00      	cmp	r7, #0
 80070da:	f43f aeab 	beq.w	8006e34 <_dtoa_r+0x6c4>
 80070de:	f1b8 0f00 	cmp.w	r8, #0
 80070e2:	d005      	beq.n	80070f0 <_dtoa_r+0x980>
 80070e4:	45b8      	cmp	r8, r7
 80070e6:	d003      	beq.n	80070f0 <_dtoa_r+0x980>
 80070e8:	4641      	mov	r1, r8
 80070ea:	4620      	mov	r0, r4
 80070ec:	f000 fa72 	bl	80075d4 <_Bfree>
 80070f0:	4639      	mov	r1, r7
 80070f2:	4620      	mov	r0, r4
 80070f4:	f000 fa6e 	bl	80075d4 <_Bfree>
 80070f8:	e69c      	b.n	8006e34 <_dtoa_r+0x6c4>
 80070fa:	2600      	movs	r6, #0
 80070fc:	4637      	mov	r7, r6
 80070fe:	e7e1      	b.n	80070c4 <_dtoa_r+0x954>
 8007100:	46bb      	mov	fp, r7
 8007102:	4637      	mov	r7, r6
 8007104:	e599      	b.n	8006c3a <_dtoa_r+0x4ca>
 8007106:	bf00      	nop
 8007108:	40240000 	.word	0x40240000
 800710c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800710e:	2b00      	cmp	r3, #0
 8007110:	f000 80c8 	beq.w	80072a4 <_dtoa_r+0xb34>
 8007114:	9b04      	ldr	r3, [sp, #16]
 8007116:	9301      	str	r3, [sp, #4]
 8007118:	2d00      	cmp	r5, #0
 800711a:	dd05      	ble.n	8007128 <_dtoa_r+0x9b8>
 800711c:	4639      	mov	r1, r7
 800711e:	462a      	mov	r2, r5
 8007120:	4620      	mov	r0, r4
 8007122:	f000 fc71 	bl	8007a08 <__lshift>
 8007126:	4607      	mov	r7, r0
 8007128:	f1b8 0f00 	cmp.w	r8, #0
 800712c:	d05b      	beq.n	80071e6 <_dtoa_r+0xa76>
 800712e:	6879      	ldr	r1, [r7, #4]
 8007130:	4620      	mov	r0, r4
 8007132:	f000 fa0f 	bl	8007554 <_Balloc>
 8007136:	4605      	mov	r5, r0
 8007138:	b928      	cbnz	r0, 8007146 <_dtoa_r+0x9d6>
 800713a:	4b83      	ldr	r3, [pc, #524]	; (8007348 <_dtoa_r+0xbd8>)
 800713c:	4602      	mov	r2, r0
 800713e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007142:	f7ff bb2e 	b.w	80067a2 <_dtoa_r+0x32>
 8007146:	693a      	ldr	r2, [r7, #16]
 8007148:	3202      	adds	r2, #2
 800714a:	0092      	lsls	r2, r2, #2
 800714c:	f107 010c 	add.w	r1, r7, #12
 8007150:	300c      	adds	r0, #12
 8007152:	f002 f94d 	bl	80093f0 <memcpy>
 8007156:	2201      	movs	r2, #1
 8007158:	4629      	mov	r1, r5
 800715a:	4620      	mov	r0, r4
 800715c:	f000 fc54 	bl	8007a08 <__lshift>
 8007160:	9b00      	ldr	r3, [sp, #0]
 8007162:	3301      	adds	r3, #1
 8007164:	9304      	str	r3, [sp, #16]
 8007166:	e9dd 2300 	ldrd	r2, r3, [sp]
 800716a:	4413      	add	r3, r2
 800716c:	9308      	str	r3, [sp, #32]
 800716e:	9b02      	ldr	r3, [sp, #8]
 8007170:	f003 0301 	and.w	r3, r3, #1
 8007174:	46b8      	mov	r8, r7
 8007176:	9306      	str	r3, [sp, #24]
 8007178:	4607      	mov	r7, r0
 800717a:	9b04      	ldr	r3, [sp, #16]
 800717c:	4631      	mov	r1, r6
 800717e:	3b01      	subs	r3, #1
 8007180:	4650      	mov	r0, sl
 8007182:	9301      	str	r3, [sp, #4]
 8007184:	f7ff fa6c 	bl	8006660 <quorem>
 8007188:	4641      	mov	r1, r8
 800718a:	9002      	str	r0, [sp, #8]
 800718c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007190:	4650      	mov	r0, sl
 8007192:	f000 fca5 	bl	8007ae0 <__mcmp>
 8007196:	463a      	mov	r2, r7
 8007198:	9005      	str	r0, [sp, #20]
 800719a:	4631      	mov	r1, r6
 800719c:	4620      	mov	r0, r4
 800719e:	f000 fcbb 	bl	8007b18 <__mdiff>
 80071a2:	68c2      	ldr	r2, [r0, #12]
 80071a4:	4605      	mov	r5, r0
 80071a6:	bb02      	cbnz	r2, 80071ea <_dtoa_r+0xa7a>
 80071a8:	4601      	mov	r1, r0
 80071aa:	4650      	mov	r0, sl
 80071ac:	f000 fc98 	bl	8007ae0 <__mcmp>
 80071b0:	4602      	mov	r2, r0
 80071b2:	4629      	mov	r1, r5
 80071b4:	4620      	mov	r0, r4
 80071b6:	9209      	str	r2, [sp, #36]	; 0x24
 80071b8:	f000 fa0c 	bl	80075d4 <_Bfree>
 80071bc:	9b07      	ldr	r3, [sp, #28]
 80071be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80071c0:	9d04      	ldr	r5, [sp, #16]
 80071c2:	ea43 0102 	orr.w	r1, r3, r2
 80071c6:	9b06      	ldr	r3, [sp, #24]
 80071c8:	4319      	orrs	r1, r3
 80071ca:	d110      	bne.n	80071ee <_dtoa_r+0xa7e>
 80071cc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80071d0:	d029      	beq.n	8007226 <_dtoa_r+0xab6>
 80071d2:	9b05      	ldr	r3, [sp, #20]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	dd02      	ble.n	80071de <_dtoa_r+0xa6e>
 80071d8:	9b02      	ldr	r3, [sp, #8]
 80071da:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80071de:	9b01      	ldr	r3, [sp, #4]
 80071e0:	f883 9000 	strb.w	r9, [r3]
 80071e4:	e774      	b.n	80070d0 <_dtoa_r+0x960>
 80071e6:	4638      	mov	r0, r7
 80071e8:	e7ba      	b.n	8007160 <_dtoa_r+0x9f0>
 80071ea:	2201      	movs	r2, #1
 80071ec:	e7e1      	b.n	80071b2 <_dtoa_r+0xa42>
 80071ee:	9b05      	ldr	r3, [sp, #20]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	db04      	blt.n	80071fe <_dtoa_r+0xa8e>
 80071f4:	9907      	ldr	r1, [sp, #28]
 80071f6:	430b      	orrs	r3, r1
 80071f8:	9906      	ldr	r1, [sp, #24]
 80071fa:	430b      	orrs	r3, r1
 80071fc:	d120      	bne.n	8007240 <_dtoa_r+0xad0>
 80071fe:	2a00      	cmp	r2, #0
 8007200:	dded      	ble.n	80071de <_dtoa_r+0xa6e>
 8007202:	4651      	mov	r1, sl
 8007204:	2201      	movs	r2, #1
 8007206:	4620      	mov	r0, r4
 8007208:	f000 fbfe 	bl	8007a08 <__lshift>
 800720c:	4631      	mov	r1, r6
 800720e:	4682      	mov	sl, r0
 8007210:	f000 fc66 	bl	8007ae0 <__mcmp>
 8007214:	2800      	cmp	r0, #0
 8007216:	dc03      	bgt.n	8007220 <_dtoa_r+0xab0>
 8007218:	d1e1      	bne.n	80071de <_dtoa_r+0xa6e>
 800721a:	f019 0f01 	tst.w	r9, #1
 800721e:	d0de      	beq.n	80071de <_dtoa_r+0xa6e>
 8007220:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007224:	d1d8      	bne.n	80071d8 <_dtoa_r+0xa68>
 8007226:	9a01      	ldr	r2, [sp, #4]
 8007228:	2339      	movs	r3, #57	; 0x39
 800722a:	7013      	strb	r3, [r2, #0]
 800722c:	462b      	mov	r3, r5
 800722e:	461d      	mov	r5, r3
 8007230:	3b01      	subs	r3, #1
 8007232:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007236:	2a39      	cmp	r2, #57	; 0x39
 8007238:	d06c      	beq.n	8007314 <_dtoa_r+0xba4>
 800723a:	3201      	adds	r2, #1
 800723c:	701a      	strb	r2, [r3, #0]
 800723e:	e747      	b.n	80070d0 <_dtoa_r+0x960>
 8007240:	2a00      	cmp	r2, #0
 8007242:	dd07      	ble.n	8007254 <_dtoa_r+0xae4>
 8007244:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007248:	d0ed      	beq.n	8007226 <_dtoa_r+0xab6>
 800724a:	9a01      	ldr	r2, [sp, #4]
 800724c:	f109 0301 	add.w	r3, r9, #1
 8007250:	7013      	strb	r3, [r2, #0]
 8007252:	e73d      	b.n	80070d0 <_dtoa_r+0x960>
 8007254:	9b04      	ldr	r3, [sp, #16]
 8007256:	9a08      	ldr	r2, [sp, #32]
 8007258:	f803 9c01 	strb.w	r9, [r3, #-1]
 800725c:	4293      	cmp	r3, r2
 800725e:	d043      	beq.n	80072e8 <_dtoa_r+0xb78>
 8007260:	4651      	mov	r1, sl
 8007262:	2300      	movs	r3, #0
 8007264:	220a      	movs	r2, #10
 8007266:	4620      	mov	r0, r4
 8007268:	f000 f9d6 	bl	8007618 <__multadd>
 800726c:	45b8      	cmp	r8, r7
 800726e:	4682      	mov	sl, r0
 8007270:	f04f 0300 	mov.w	r3, #0
 8007274:	f04f 020a 	mov.w	r2, #10
 8007278:	4641      	mov	r1, r8
 800727a:	4620      	mov	r0, r4
 800727c:	d107      	bne.n	800728e <_dtoa_r+0xb1e>
 800727e:	f000 f9cb 	bl	8007618 <__multadd>
 8007282:	4680      	mov	r8, r0
 8007284:	4607      	mov	r7, r0
 8007286:	9b04      	ldr	r3, [sp, #16]
 8007288:	3301      	adds	r3, #1
 800728a:	9304      	str	r3, [sp, #16]
 800728c:	e775      	b.n	800717a <_dtoa_r+0xa0a>
 800728e:	f000 f9c3 	bl	8007618 <__multadd>
 8007292:	4639      	mov	r1, r7
 8007294:	4680      	mov	r8, r0
 8007296:	2300      	movs	r3, #0
 8007298:	220a      	movs	r2, #10
 800729a:	4620      	mov	r0, r4
 800729c:	f000 f9bc 	bl	8007618 <__multadd>
 80072a0:	4607      	mov	r7, r0
 80072a2:	e7f0      	b.n	8007286 <_dtoa_r+0xb16>
 80072a4:	9b04      	ldr	r3, [sp, #16]
 80072a6:	9301      	str	r3, [sp, #4]
 80072a8:	9d00      	ldr	r5, [sp, #0]
 80072aa:	4631      	mov	r1, r6
 80072ac:	4650      	mov	r0, sl
 80072ae:	f7ff f9d7 	bl	8006660 <quorem>
 80072b2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80072b6:	9b00      	ldr	r3, [sp, #0]
 80072b8:	f805 9b01 	strb.w	r9, [r5], #1
 80072bc:	1aea      	subs	r2, r5, r3
 80072be:	9b01      	ldr	r3, [sp, #4]
 80072c0:	4293      	cmp	r3, r2
 80072c2:	dd07      	ble.n	80072d4 <_dtoa_r+0xb64>
 80072c4:	4651      	mov	r1, sl
 80072c6:	2300      	movs	r3, #0
 80072c8:	220a      	movs	r2, #10
 80072ca:	4620      	mov	r0, r4
 80072cc:	f000 f9a4 	bl	8007618 <__multadd>
 80072d0:	4682      	mov	sl, r0
 80072d2:	e7ea      	b.n	80072aa <_dtoa_r+0xb3a>
 80072d4:	9b01      	ldr	r3, [sp, #4]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	bfc8      	it	gt
 80072da:	461d      	movgt	r5, r3
 80072dc:	9b00      	ldr	r3, [sp, #0]
 80072de:	bfd8      	it	le
 80072e0:	2501      	movle	r5, #1
 80072e2:	441d      	add	r5, r3
 80072e4:	f04f 0800 	mov.w	r8, #0
 80072e8:	4651      	mov	r1, sl
 80072ea:	2201      	movs	r2, #1
 80072ec:	4620      	mov	r0, r4
 80072ee:	f000 fb8b 	bl	8007a08 <__lshift>
 80072f2:	4631      	mov	r1, r6
 80072f4:	4682      	mov	sl, r0
 80072f6:	f000 fbf3 	bl	8007ae0 <__mcmp>
 80072fa:	2800      	cmp	r0, #0
 80072fc:	dc96      	bgt.n	800722c <_dtoa_r+0xabc>
 80072fe:	d102      	bne.n	8007306 <_dtoa_r+0xb96>
 8007300:	f019 0f01 	tst.w	r9, #1
 8007304:	d192      	bne.n	800722c <_dtoa_r+0xabc>
 8007306:	462b      	mov	r3, r5
 8007308:	461d      	mov	r5, r3
 800730a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800730e:	2a30      	cmp	r2, #48	; 0x30
 8007310:	d0fa      	beq.n	8007308 <_dtoa_r+0xb98>
 8007312:	e6dd      	b.n	80070d0 <_dtoa_r+0x960>
 8007314:	9a00      	ldr	r2, [sp, #0]
 8007316:	429a      	cmp	r2, r3
 8007318:	d189      	bne.n	800722e <_dtoa_r+0xabe>
 800731a:	f10b 0b01 	add.w	fp, fp, #1
 800731e:	2331      	movs	r3, #49	; 0x31
 8007320:	e796      	b.n	8007250 <_dtoa_r+0xae0>
 8007322:	4b0a      	ldr	r3, [pc, #40]	; (800734c <_dtoa_r+0xbdc>)
 8007324:	f7ff ba99 	b.w	800685a <_dtoa_r+0xea>
 8007328:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800732a:	2b00      	cmp	r3, #0
 800732c:	f47f aa6d 	bne.w	800680a <_dtoa_r+0x9a>
 8007330:	4b07      	ldr	r3, [pc, #28]	; (8007350 <_dtoa_r+0xbe0>)
 8007332:	f7ff ba92 	b.w	800685a <_dtoa_r+0xea>
 8007336:	9b01      	ldr	r3, [sp, #4]
 8007338:	2b00      	cmp	r3, #0
 800733a:	dcb5      	bgt.n	80072a8 <_dtoa_r+0xb38>
 800733c:	9b07      	ldr	r3, [sp, #28]
 800733e:	2b02      	cmp	r3, #2
 8007340:	f73f aeb1 	bgt.w	80070a6 <_dtoa_r+0x936>
 8007344:	e7b0      	b.n	80072a8 <_dtoa_r+0xb38>
 8007346:	bf00      	nop
 8007348:	0800a885 	.word	0x0800a885
 800734c:	0800a7e0 	.word	0x0800a7e0
 8007350:	0800a809 	.word	0x0800a809

08007354 <_free_r>:
 8007354:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007356:	2900      	cmp	r1, #0
 8007358:	d044      	beq.n	80073e4 <_free_r+0x90>
 800735a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800735e:	9001      	str	r0, [sp, #4]
 8007360:	2b00      	cmp	r3, #0
 8007362:	f1a1 0404 	sub.w	r4, r1, #4
 8007366:	bfb8      	it	lt
 8007368:	18e4      	addlt	r4, r4, r3
 800736a:	f000 f8e7 	bl	800753c <__malloc_lock>
 800736e:	4a1e      	ldr	r2, [pc, #120]	; (80073e8 <_free_r+0x94>)
 8007370:	9801      	ldr	r0, [sp, #4]
 8007372:	6813      	ldr	r3, [r2, #0]
 8007374:	b933      	cbnz	r3, 8007384 <_free_r+0x30>
 8007376:	6063      	str	r3, [r4, #4]
 8007378:	6014      	str	r4, [r2, #0]
 800737a:	b003      	add	sp, #12
 800737c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007380:	f000 b8e2 	b.w	8007548 <__malloc_unlock>
 8007384:	42a3      	cmp	r3, r4
 8007386:	d908      	bls.n	800739a <_free_r+0x46>
 8007388:	6825      	ldr	r5, [r4, #0]
 800738a:	1961      	adds	r1, r4, r5
 800738c:	428b      	cmp	r3, r1
 800738e:	bf01      	itttt	eq
 8007390:	6819      	ldreq	r1, [r3, #0]
 8007392:	685b      	ldreq	r3, [r3, #4]
 8007394:	1949      	addeq	r1, r1, r5
 8007396:	6021      	streq	r1, [r4, #0]
 8007398:	e7ed      	b.n	8007376 <_free_r+0x22>
 800739a:	461a      	mov	r2, r3
 800739c:	685b      	ldr	r3, [r3, #4]
 800739e:	b10b      	cbz	r3, 80073a4 <_free_r+0x50>
 80073a0:	42a3      	cmp	r3, r4
 80073a2:	d9fa      	bls.n	800739a <_free_r+0x46>
 80073a4:	6811      	ldr	r1, [r2, #0]
 80073a6:	1855      	adds	r5, r2, r1
 80073a8:	42a5      	cmp	r5, r4
 80073aa:	d10b      	bne.n	80073c4 <_free_r+0x70>
 80073ac:	6824      	ldr	r4, [r4, #0]
 80073ae:	4421      	add	r1, r4
 80073b0:	1854      	adds	r4, r2, r1
 80073b2:	42a3      	cmp	r3, r4
 80073b4:	6011      	str	r1, [r2, #0]
 80073b6:	d1e0      	bne.n	800737a <_free_r+0x26>
 80073b8:	681c      	ldr	r4, [r3, #0]
 80073ba:	685b      	ldr	r3, [r3, #4]
 80073bc:	6053      	str	r3, [r2, #4]
 80073be:	440c      	add	r4, r1
 80073c0:	6014      	str	r4, [r2, #0]
 80073c2:	e7da      	b.n	800737a <_free_r+0x26>
 80073c4:	d902      	bls.n	80073cc <_free_r+0x78>
 80073c6:	230c      	movs	r3, #12
 80073c8:	6003      	str	r3, [r0, #0]
 80073ca:	e7d6      	b.n	800737a <_free_r+0x26>
 80073cc:	6825      	ldr	r5, [r4, #0]
 80073ce:	1961      	adds	r1, r4, r5
 80073d0:	428b      	cmp	r3, r1
 80073d2:	bf04      	itt	eq
 80073d4:	6819      	ldreq	r1, [r3, #0]
 80073d6:	685b      	ldreq	r3, [r3, #4]
 80073d8:	6063      	str	r3, [r4, #4]
 80073da:	bf04      	itt	eq
 80073dc:	1949      	addeq	r1, r1, r5
 80073de:	6021      	streq	r1, [r4, #0]
 80073e0:	6054      	str	r4, [r2, #4]
 80073e2:	e7ca      	b.n	800737a <_free_r+0x26>
 80073e4:	b003      	add	sp, #12
 80073e6:	bd30      	pop	{r4, r5, pc}
 80073e8:	200004cc 	.word	0x200004cc

080073ec <malloc>:
 80073ec:	4b02      	ldr	r3, [pc, #8]	; (80073f8 <malloc+0xc>)
 80073ee:	4601      	mov	r1, r0
 80073f0:	6818      	ldr	r0, [r3, #0]
 80073f2:	f000 b823 	b.w	800743c <_malloc_r>
 80073f6:	bf00      	nop
 80073f8:	20000064 	.word	0x20000064

080073fc <sbrk_aligned>:
 80073fc:	b570      	push	{r4, r5, r6, lr}
 80073fe:	4e0e      	ldr	r6, [pc, #56]	; (8007438 <sbrk_aligned+0x3c>)
 8007400:	460c      	mov	r4, r1
 8007402:	6831      	ldr	r1, [r6, #0]
 8007404:	4605      	mov	r5, r0
 8007406:	b911      	cbnz	r1, 800740e <sbrk_aligned+0x12>
 8007408:	f001 ffe2 	bl	80093d0 <_sbrk_r>
 800740c:	6030      	str	r0, [r6, #0]
 800740e:	4621      	mov	r1, r4
 8007410:	4628      	mov	r0, r5
 8007412:	f001 ffdd 	bl	80093d0 <_sbrk_r>
 8007416:	1c43      	adds	r3, r0, #1
 8007418:	d00a      	beq.n	8007430 <sbrk_aligned+0x34>
 800741a:	1cc4      	adds	r4, r0, #3
 800741c:	f024 0403 	bic.w	r4, r4, #3
 8007420:	42a0      	cmp	r0, r4
 8007422:	d007      	beq.n	8007434 <sbrk_aligned+0x38>
 8007424:	1a21      	subs	r1, r4, r0
 8007426:	4628      	mov	r0, r5
 8007428:	f001 ffd2 	bl	80093d0 <_sbrk_r>
 800742c:	3001      	adds	r0, #1
 800742e:	d101      	bne.n	8007434 <sbrk_aligned+0x38>
 8007430:	f04f 34ff 	mov.w	r4, #4294967295
 8007434:	4620      	mov	r0, r4
 8007436:	bd70      	pop	{r4, r5, r6, pc}
 8007438:	200004d0 	.word	0x200004d0

0800743c <_malloc_r>:
 800743c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007440:	1ccd      	adds	r5, r1, #3
 8007442:	f025 0503 	bic.w	r5, r5, #3
 8007446:	3508      	adds	r5, #8
 8007448:	2d0c      	cmp	r5, #12
 800744a:	bf38      	it	cc
 800744c:	250c      	movcc	r5, #12
 800744e:	2d00      	cmp	r5, #0
 8007450:	4607      	mov	r7, r0
 8007452:	db01      	blt.n	8007458 <_malloc_r+0x1c>
 8007454:	42a9      	cmp	r1, r5
 8007456:	d905      	bls.n	8007464 <_malloc_r+0x28>
 8007458:	230c      	movs	r3, #12
 800745a:	603b      	str	r3, [r7, #0]
 800745c:	2600      	movs	r6, #0
 800745e:	4630      	mov	r0, r6
 8007460:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007464:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007538 <_malloc_r+0xfc>
 8007468:	f000 f868 	bl	800753c <__malloc_lock>
 800746c:	f8d8 3000 	ldr.w	r3, [r8]
 8007470:	461c      	mov	r4, r3
 8007472:	bb5c      	cbnz	r4, 80074cc <_malloc_r+0x90>
 8007474:	4629      	mov	r1, r5
 8007476:	4638      	mov	r0, r7
 8007478:	f7ff ffc0 	bl	80073fc <sbrk_aligned>
 800747c:	1c43      	adds	r3, r0, #1
 800747e:	4604      	mov	r4, r0
 8007480:	d155      	bne.n	800752e <_malloc_r+0xf2>
 8007482:	f8d8 4000 	ldr.w	r4, [r8]
 8007486:	4626      	mov	r6, r4
 8007488:	2e00      	cmp	r6, #0
 800748a:	d145      	bne.n	8007518 <_malloc_r+0xdc>
 800748c:	2c00      	cmp	r4, #0
 800748e:	d048      	beq.n	8007522 <_malloc_r+0xe6>
 8007490:	6823      	ldr	r3, [r4, #0]
 8007492:	4631      	mov	r1, r6
 8007494:	4638      	mov	r0, r7
 8007496:	eb04 0903 	add.w	r9, r4, r3
 800749a:	f001 ff99 	bl	80093d0 <_sbrk_r>
 800749e:	4581      	cmp	r9, r0
 80074a0:	d13f      	bne.n	8007522 <_malloc_r+0xe6>
 80074a2:	6821      	ldr	r1, [r4, #0]
 80074a4:	1a6d      	subs	r5, r5, r1
 80074a6:	4629      	mov	r1, r5
 80074a8:	4638      	mov	r0, r7
 80074aa:	f7ff ffa7 	bl	80073fc <sbrk_aligned>
 80074ae:	3001      	adds	r0, #1
 80074b0:	d037      	beq.n	8007522 <_malloc_r+0xe6>
 80074b2:	6823      	ldr	r3, [r4, #0]
 80074b4:	442b      	add	r3, r5
 80074b6:	6023      	str	r3, [r4, #0]
 80074b8:	f8d8 3000 	ldr.w	r3, [r8]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d038      	beq.n	8007532 <_malloc_r+0xf6>
 80074c0:	685a      	ldr	r2, [r3, #4]
 80074c2:	42a2      	cmp	r2, r4
 80074c4:	d12b      	bne.n	800751e <_malloc_r+0xe2>
 80074c6:	2200      	movs	r2, #0
 80074c8:	605a      	str	r2, [r3, #4]
 80074ca:	e00f      	b.n	80074ec <_malloc_r+0xb0>
 80074cc:	6822      	ldr	r2, [r4, #0]
 80074ce:	1b52      	subs	r2, r2, r5
 80074d0:	d41f      	bmi.n	8007512 <_malloc_r+0xd6>
 80074d2:	2a0b      	cmp	r2, #11
 80074d4:	d917      	bls.n	8007506 <_malloc_r+0xca>
 80074d6:	1961      	adds	r1, r4, r5
 80074d8:	42a3      	cmp	r3, r4
 80074da:	6025      	str	r5, [r4, #0]
 80074dc:	bf18      	it	ne
 80074de:	6059      	strne	r1, [r3, #4]
 80074e0:	6863      	ldr	r3, [r4, #4]
 80074e2:	bf08      	it	eq
 80074e4:	f8c8 1000 	streq.w	r1, [r8]
 80074e8:	5162      	str	r2, [r4, r5]
 80074ea:	604b      	str	r3, [r1, #4]
 80074ec:	4638      	mov	r0, r7
 80074ee:	f104 060b 	add.w	r6, r4, #11
 80074f2:	f000 f829 	bl	8007548 <__malloc_unlock>
 80074f6:	f026 0607 	bic.w	r6, r6, #7
 80074fa:	1d23      	adds	r3, r4, #4
 80074fc:	1af2      	subs	r2, r6, r3
 80074fe:	d0ae      	beq.n	800745e <_malloc_r+0x22>
 8007500:	1b9b      	subs	r3, r3, r6
 8007502:	50a3      	str	r3, [r4, r2]
 8007504:	e7ab      	b.n	800745e <_malloc_r+0x22>
 8007506:	42a3      	cmp	r3, r4
 8007508:	6862      	ldr	r2, [r4, #4]
 800750a:	d1dd      	bne.n	80074c8 <_malloc_r+0x8c>
 800750c:	f8c8 2000 	str.w	r2, [r8]
 8007510:	e7ec      	b.n	80074ec <_malloc_r+0xb0>
 8007512:	4623      	mov	r3, r4
 8007514:	6864      	ldr	r4, [r4, #4]
 8007516:	e7ac      	b.n	8007472 <_malloc_r+0x36>
 8007518:	4634      	mov	r4, r6
 800751a:	6876      	ldr	r6, [r6, #4]
 800751c:	e7b4      	b.n	8007488 <_malloc_r+0x4c>
 800751e:	4613      	mov	r3, r2
 8007520:	e7cc      	b.n	80074bc <_malloc_r+0x80>
 8007522:	230c      	movs	r3, #12
 8007524:	603b      	str	r3, [r7, #0]
 8007526:	4638      	mov	r0, r7
 8007528:	f000 f80e 	bl	8007548 <__malloc_unlock>
 800752c:	e797      	b.n	800745e <_malloc_r+0x22>
 800752e:	6025      	str	r5, [r4, #0]
 8007530:	e7dc      	b.n	80074ec <_malloc_r+0xb0>
 8007532:	605b      	str	r3, [r3, #4]
 8007534:	deff      	udf	#255	; 0xff
 8007536:	bf00      	nop
 8007538:	200004cc 	.word	0x200004cc

0800753c <__malloc_lock>:
 800753c:	4801      	ldr	r0, [pc, #4]	; (8007544 <__malloc_lock+0x8>)
 800753e:	f7ff b886 	b.w	800664e <__retarget_lock_acquire_recursive>
 8007542:	bf00      	nop
 8007544:	200004c8 	.word	0x200004c8

08007548 <__malloc_unlock>:
 8007548:	4801      	ldr	r0, [pc, #4]	; (8007550 <__malloc_unlock+0x8>)
 800754a:	f7ff b881 	b.w	8006650 <__retarget_lock_release_recursive>
 800754e:	bf00      	nop
 8007550:	200004c8 	.word	0x200004c8

08007554 <_Balloc>:
 8007554:	b570      	push	{r4, r5, r6, lr}
 8007556:	69c6      	ldr	r6, [r0, #28]
 8007558:	4604      	mov	r4, r0
 800755a:	460d      	mov	r5, r1
 800755c:	b976      	cbnz	r6, 800757c <_Balloc+0x28>
 800755e:	2010      	movs	r0, #16
 8007560:	f7ff ff44 	bl	80073ec <malloc>
 8007564:	4602      	mov	r2, r0
 8007566:	61e0      	str	r0, [r4, #28]
 8007568:	b920      	cbnz	r0, 8007574 <_Balloc+0x20>
 800756a:	4b18      	ldr	r3, [pc, #96]	; (80075cc <_Balloc+0x78>)
 800756c:	4818      	ldr	r0, [pc, #96]	; (80075d0 <_Balloc+0x7c>)
 800756e:	216b      	movs	r1, #107	; 0x6b
 8007570:	f001 ff56 	bl	8009420 <__assert_func>
 8007574:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007578:	6006      	str	r6, [r0, #0]
 800757a:	60c6      	str	r6, [r0, #12]
 800757c:	69e6      	ldr	r6, [r4, #28]
 800757e:	68f3      	ldr	r3, [r6, #12]
 8007580:	b183      	cbz	r3, 80075a4 <_Balloc+0x50>
 8007582:	69e3      	ldr	r3, [r4, #28]
 8007584:	68db      	ldr	r3, [r3, #12]
 8007586:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800758a:	b9b8      	cbnz	r0, 80075bc <_Balloc+0x68>
 800758c:	2101      	movs	r1, #1
 800758e:	fa01 f605 	lsl.w	r6, r1, r5
 8007592:	1d72      	adds	r2, r6, #5
 8007594:	0092      	lsls	r2, r2, #2
 8007596:	4620      	mov	r0, r4
 8007598:	f001 ff60 	bl	800945c <_calloc_r>
 800759c:	b160      	cbz	r0, 80075b8 <_Balloc+0x64>
 800759e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80075a2:	e00e      	b.n	80075c2 <_Balloc+0x6e>
 80075a4:	2221      	movs	r2, #33	; 0x21
 80075a6:	2104      	movs	r1, #4
 80075a8:	4620      	mov	r0, r4
 80075aa:	f001 ff57 	bl	800945c <_calloc_r>
 80075ae:	69e3      	ldr	r3, [r4, #28]
 80075b0:	60f0      	str	r0, [r6, #12]
 80075b2:	68db      	ldr	r3, [r3, #12]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d1e4      	bne.n	8007582 <_Balloc+0x2e>
 80075b8:	2000      	movs	r0, #0
 80075ba:	bd70      	pop	{r4, r5, r6, pc}
 80075bc:	6802      	ldr	r2, [r0, #0]
 80075be:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80075c2:	2300      	movs	r3, #0
 80075c4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80075c8:	e7f7      	b.n	80075ba <_Balloc+0x66>
 80075ca:	bf00      	nop
 80075cc:	0800a816 	.word	0x0800a816
 80075d0:	0800a896 	.word	0x0800a896

080075d4 <_Bfree>:
 80075d4:	b570      	push	{r4, r5, r6, lr}
 80075d6:	69c6      	ldr	r6, [r0, #28]
 80075d8:	4605      	mov	r5, r0
 80075da:	460c      	mov	r4, r1
 80075dc:	b976      	cbnz	r6, 80075fc <_Bfree+0x28>
 80075de:	2010      	movs	r0, #16
 80075e0:	f7ff ff04 	bl	80073ec <malloc>
 80075e4:	4602      	mov	r2, r0
 80075e6:	61e8      	str	r0, [r5, #28]
 80075e8:	b920      	cbnz	r0, 80075f4 <_Bfree+0x20>
 80075ea:	4b09      	ldr	r3, [pc, #36]	; (8007610 <_Bfree+0x3c>)
 80075ec:	4809      	ldr	r0, [pc, #36]	; (8007614 <_Bfree+0x40>)
 80075ee:	218f      	movs	r1, #143	; 0x8f
 80075f0:	f001 ff16 	bl	8009420 <__assert_func>
 80075f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80075f8:	6006      	str	r6, [r0, #0]
 80075fa:	60c6      	str	r6, [r0, #12]
 80075fc:	b13c      	cbz	r4, 800760e <_Bfree+0x3a>
 80075fe:	69eb      	ldr	r3, [r5, #28]
 8007600:	6862      	ldr	r2, [r4, #4]
 8007602:	68db      	ldr	r3, [r3, #12]
 8007604:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007608:	6021      	str	r1, [r4, #0]
 800760a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800760e:	bd70      	pop	{r4, r5, r6, pc}
 8007610:	0800a816 	.word	0x0800a816
 8007614:	0800a896 	.word	0x0800a896

08007618 <__multadd>:
 8007618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800761c:	690d      	ldr	r5, [r1, #16]
 800761e:	4607      	mov	r7, r0
 8007620:	460c      	mov	r4, r1
 8007622:	461e      	mov	r6, r3
 8007624:	f101 0c14 	add.w	ip, r1, #20
 8007628:	2000      	movs	r0, #0
 800762a:	f8dc 3000 	ldr.w	r3, [ip]
 800762e:	b299      	uxth	r1, r3
 8007630:	fb02 6101 	mla	r1, r2, r1, r6
 8007634:	0c1e      	lsrs	r6, r3, #16
 8007636:	0c0b      	lsrs	r3, r1, #16
 8007638:	fb02 3306 	mla	r3, r2, r6, r3
 800763c:	b289      	uxth	r1, r1
 800763e:	3001      	adds	r0, #1
 8007640:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007644:	4285      	cmp	r5, r0
 8007646:	f84c 1b04 	str.w	r1, [ip], #4
 800764a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800764e:	dcec      	bgt.n	800762a <__multadd+0x12>
 8007650:	b30e      	cbz	r6, 8007696 <__multadd+0x7e>
 8007652:	68a3      	ldr	r3, [r4, #8]
 8007654:	42ab      	cmp	r3, r5
 8007656:	dc19      	bgt.n	800768c <__multadd+0x74>
 8007658:	6861      	ldr	r1, [r4, #4]
 800765a:	4638      	mov	r0, r7
 800765c:	3101      	adds	r1, #1
 800765e:	f7ff ff79 	bl	8007554 <_Balloc>
 8007662:	4680      	mov	r8, r0
 8007664:	b928      	cbnz	r0, 8007672 <__multadd+0x5a>
 8007666:	4602      	mov	r2, r0
 8007668:	4b0c      	ldr	r3, [pc, #48]	; (800769c <__multadd+0x84>)
 800766a:	480d      	ldr	r0, [pc, #52]	; (80076a0 <__multadd+0x88>)
 800766c:	21ba      	movs	r1, #186	; 0xba
 800766e:	f001 fed7 	bl	8009420 <__assert_func>
 8007672:	6922      	ldr	r2, [r4, #16]
 8007674:	3202      	adds	r2, #2
 8007676:	f104 010c 	add.w	r1, r4, #12
 800767a:	0092      	lsls	r2, r2, #2
 800767c:	300c      	adds	r0, #12
 800767e:	f001 feb7 	bl	80093f0 <memcpy>
 8007682:	4621      	mov	r1, r4
 8007684:	4638      	mov	r0, r7
 8007686:	f7ff ffa5 	bl	80075d4 <_Bfree>
 800768a:	4644      	mov	r4, r8
 800768c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007690:	3501      	adds	r5, #1
 8007692:	615e      	str	r6, [r3, #20]
 8007694:	6125      	str	r5, [r4, #16]
 8007696:	4620      	mov	r0, r4
 8007698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800769c:	0800a885 	.word	0x0800a885
 80076a0:	0800a896 	.word	0x0800a896

080076a4 <__s2b>:
 80076a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076a8:	460c      	mov	r4, r1
 80076aa:	4615      	mov	r5, r2
 80076ac:	461f      	mov	r7, r3
 80076ae:	2209      	movs	r2, #9
 80076b0:	3308      	adds	r3, #8
 80076b2:	4606      	mov	r6, r0
 80076b4:	fb93 f3f2 	sdiv	r3, r3, r2
 80076b8:	2100      	movs	r1, #0
 80076ba:	2201      	movs	r2, #1
 80076bc:	429a      	cmp	r2, r3
 80076be:	db09      	blt.n	80076d4 <__s2b+0x30>
 80076c0:	4630      	mov	r0, r6
 80076c2:	f7ff ff47 	bl	8007554 <_Balloc>
 80076c6:	b940      	cbnz	r0, 80076da <__s2b+0x36>
 80076c8:	4602      	mov	r2, r0
 80076ca:	4b19      	ldr	r3, [pc, #100]	; (8007730 <__s2b+0x8c>)
 80076cc:	4819      	ldr	r0, [pc, #100]	; (8007734 <__s2b+0x90>)
 80076ce:	21d3      	movs	r1, #211	; 0xd3
 80076d0:	f001 fea6 	bl	8009420 <__assert_func>
 80076d4:	0052      	lsls	r2, r2, #1
 80076d6:	3101      	adds	r1, #1
 80076d8:	e7f0      	b.n	80076bc <__s2b+0x18>
 80076da:	9b08      	ldr	r3, [sp, #32]
 80076dc:	6143      	str	r3, [r0, #20]
 80076de:	2d09      	cmp	r5, #9
 80076e0:	f04f 0301 	mov.w	r3, #1
 80076e4:	6103      	str	r3, [r0, #16]
 80076e6:	dd16      	ble.n	8007716 <__s2b+0x72>
 80076e8:	f104 0909 	add.w	r9, r4, #9
 80076ec:	46c8      	mov	r8, r9
 80076ee:	442c      	add	r4, r5
 80076f0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80076f4:	4601      	mov	r1, r0
 80076f6:	3b30      	subs	r3, #48	; 0x30
 80076f8:	220a      	movs	r2, #10
 80076fa:	4630      	mov	r0, r6
 80076fc:	f7ff ff8c 	bl	8007618 <__multadd>
 8007700:	45a0      	cmp	r8, r4
 8007702:	d1f5      	bne.n	80076f0 <__s2b+0x4c>
 8007704:	f1a5 0408 	sub.w	r4, r5, #8
 8007708:	444c      	add	r4, r9
 800770a:	1b2d      	subs	r5, r5, r4
 800770c:	1963      	adds	r3, r4, r5
 800770e:	42bb      	cmp	r3, r7
 8007710:	db04      	blt.n	800771c <__s2b+0x78>
 8007712:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007716:	340a      	adds	r4, #10
 8007718:	2509      	movs	r5, #9
 800771a:	e7f6      	b.n	800770a <__s2b+0x66>
 800771c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007720:	4601      	mov	r1, r0
 8007722:	3b30      	subs	r3, #48	; 0x30
 8007724:	220a      	movs	r2, #10
 8007726:	4630      	mov	r0, r6
 8007728:	f7ff ff76 	bl	8007618 <__multadd>
 800772c:	e7ee      	b.n	800770c <__s2b+0x68>
 800772e:	bf00      	nop
 8007730:	0800a885 	.word	0x0800a885
 8007734:	0800a896 	.word	0x0800a896

08007738 <__hi0bits>:
 8007738:	0c03      	lsrs	r3, r0, #16
 800773a:	041b      	lsls	r3, r3, #16
 800773c:	b9d3      	cbnz	r3, 8007774 <__hi0bits+0x3c>
 800773e:	0400      	lsls	r0, r0, #16
 8007740:	2310      	movs	r3, #16
 8007742:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007746:	bf04      	itt	eq
 8007748:	0200      	lsleq	r0, r0, #8
 800774a:	3308      	addeq	r3, #8
 800774c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007750:	bf04      	itt	eq
 8007752:	0100      	lsleq	r0, r0, #4
 8007754:	3304      	addeq	r3, #4
 8007756:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800775a:	bf04      	itt	eq
 800775c:	0080      	lsleq	r0, r0, #2
 800775e:	3302      	addeq	r3, #2
 8007760:	2800      	cmp	r0, #0
 8007762:	db05      	blt.n	8007770 <__hi0bits+0x38>
 8007764:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007768:	f103 0301 	add.w	r3, r3, #1
 800776c:	bf08      	it	eq
 800776e:	2320      	moveq	r3, #32
 8007770:	4618      	mov	r0, r3
 8007772:	4770      	bx	lr
 8007774:	2300      	movs	r3, #0
 8007776:	e7e4      	b.n	8007742 <__hi0bits+0xa>

08007778 <__lo0bits>:
 8007778:	6803      	ldr	r3, [r0, #0]
 800777a:	f013 0207 	ands.w	r2, r3, #7
 800777e:	d00c      	beq.n	800779a <__lo0bits+0x22>
 8007780:	07d9      	lsls	r1, r3, #31
 8007782:	d422      	bmi.n	80077ca <__lo0bits+0x52>
 8007784:	079a      	lsls	r2, r3, #30
 8007786:	bf49      	itett	mi
 8007788:	085b      	lsrmi	r3, r3, #1
 800778a:	089b      	lsrpl	r3, r3, #2
 800778c:	6003      	strmi	r3, [r0, #0]
 800778e:	2201      	movmi	r2, #1
 8007790:	bf5c      	itt	pl
 8007792:	6003      	strpl	r3, [r0, #0]
 8007794:	2202      	movpl	r2, #2
 8007796:	4610      	mov	r0, r2
 8007798:	4770      	bx	lr
 800779a:	b299      	uxth	r1, r3
 800779c:	b909      	cbnz	r1, 80077a2 <__lo0bits+0x2a>
 800779e:	0c1b      	lsrs	r3, r3, #16
 80077a0:	2210      	movs	r2, #16
 80077a2:	b2d9      	uxtb	r1, r3
 80077a4:	b909      	cbnz	r1, 80077aa <__lo0bits+0x32>
 80077a6:	3208      	adds	r2, #8
 80077a8:	0a1b      	lsrs	r3, r3, #8
 80077aa:	0719      	lsls	r1, r3, #28
 80077ac:	bf04      	itt	eq
 80077ae:	091b      	lsreq	r3, r3, #4
 80077b0:	3204      	addeq	r2, #4
 80077b2:	0799      	lsls	r1, r3, #30
 80077b4:	bf04      	itt	eq
 80077b6:	089b      	lsreq	r3, r3, #2
 80077b8:	3202      	addeq	r2, #2
 80077ba:	07d9      	lsls	r1, r3, #31
 80077bc:	d403      	bmi.n	80077c6 <__lo0bits+0x4e>
 80077be:	085b      	lsrs	r3, r3, #1
 80077c0:	f102 0201 	add.w	r2, r2, #1
 80077c4:	d003      	beq.n	80077ce <__lo0bits+0x56>
 80077c6:	6003      	str	r3, [r0, #0]
 80077c8:	e7e5      	b.n	8007796 <__lo0bits+0x1e>
 80077ca:	2200      	movs	r2, #0
 80077cc:	e7e3      	b.n	8007796 <__lo0bits+0x1e>
 80077ce:	2220      	movs	r2, #32
 80077d0:	e7e1      	b.n	8007796 <__lo0bits+0x1e>
	...

080077d4 <__i2b>:
 80077d4:	b510      	push	{r4, lr}
 80077d6:	460c      	mov	r4, r1
 80077d8:	2101      	movs	r1, #1
 80077da:	f7ff febb 	bl	8007554 <_Balloc>
 80077de:	4602      	mov	r2, r0
 80077e0:	b928      	cbnz	r0, 80077ee <__i2b+0x1a>
 80077e2:	4b05      	ldr	r3, [pc, #20]	; (80077f8 <__i2b+0x24>)
 80077e4:	4805      	ldr	r0, [pc, #20]	; (80077fc <__i2b+0x28>)
 80077e6:	f240 1145 	movw	r1, #325	; 0x145
 80077ea:	f001 fe19 	bl	8009420 <__assert_func>
 80077ee:	2301      	movs	r3, #1
 80077f0:	6144      	str	r4, [r0, #20]
 80077f2:	6103      	str	r3, [r0, #16]
 80077f4:	bd10      	pop	{r4, pc}
 80077f6:	bf00      	nop
 80077f8:	0800a885 	.word	0x0800a885
 80077fc:	0800a896 	.word	0x0800a896

08007800 <__multiply>:
 8007800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007804:	4691      	mov	r9, r2
 8007806:	690a      	ldr	r2, [r1, #16]
 8007808:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800780c:	429a      	cmp	r2, r3
 800780e:	bfb8      	it	lt
 8007810:	460b      	movlt	r3, r1
 8007812:	460c      	mov	r4, r1
 8007814:	bfbc      	itt	lt
 8007816:	464c      	movlt	r4, r9
 8007818:	4699      	movlt	r9, r3
 800781a:	6927      	ldr	r7, [r4, #16]
 800781c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007820:	68a3      	ldr	r3, [r4, #8]
 8007822:	6861      	ldr	r1, [r4, #4]
 8007824:	eb07 060a 	add.w	r6, r7, sl
 8007828:	42b3      	cmp	r3, r6
 800782a:	b085      	sub	sp, #20
 800782c:	bfb8      	it	lt
 800782e:	3101      	addlt	r1, #1
 8007830:	f7ff fe90 	bl	8007554 <_Balloc>
 8007834:	b930      	cbnz	r0, 8007844 <__multiply+0x44>
 8007836:	4602      	mov	r2, r0
 8007838:	4b44      	ldr	r3, [pc, #272]	; (800794c <__multiply+0x14c>)
 800783a:	4845      	ldr	r0, [pc, #276]	; (8007950 <__multiply+0x150>)
 800783c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007840:	f001 fdee 	bl	8009420 <__assert_func>
 8007844:	f100 0514 	add.w	r5, r0, #20
 8007848:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800784c:	462b      	mov	r3, r5
 800784e:	2200      	movs	r2, #0
 8007850:	4543      	cmp	r3, r8
 8007852:	d321      	bcc.n	8007898 <__multiply+0x98>
 8007854:	f104 0314 	add.w	r3, r4, #20
 8007858:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800785c:	f109 0314 	add.w	r3, r9, #20
 8007860:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007864:	9202      	str	r2, [sp, #8]
 8007866:	1b3a      	subs	r2, r7, r4
 8007868:	3a15      	subs	r2, #21
 800786a:	f022 0203 	bic.w	r2, r2, #3
 800786e:	3204      	adds	r2, #4
 8007870:	f104 0115 	add.w	r1, r4, #21
 8007874:	428f      	cmp	r7, r1
 8007876:	bf38      	it	cc
 8007878:	2204      	movcc	r2, #4
 800787a:	9201      	str	r2, [sp, #4]
 800787c:	9a02      	ldr	r2, [sp, #8]
 800787e:	9303      	str	r3, [sp, #12]
 8007880:	429a      	cmp	r2, r3
 8007882:	d80c      	bhi.n	800789e <__multiply+0x9e>
 8007884:	2e00      	cmp	r6, #0
 8007886:	dd03      	ble.n	8007890 <__multiply+0x90>
 8007888:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800788c:	2b00      	cmp	r3, #0
 800788e:	d05b      	beq.n	8007948 <__multiply+0x148>
 8007890:	6106      	str	r6, [r0, #16]
 8007892:	b005      	add	sp, #20
 8007894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007898:	f843 2b04 	str.w	r2, [r3], #4
 800789c:	e7d8      	b.n	8007850 <__multiply+0x50>
 800789e:	f8b3 a000 	ldrh.w	sl, [r3]
 80078a2:	f1ba 0f00 	cmp.w	sl, #0
 80078a6:	d024      	beq.n	80078f2 <__multiply+0xf2>
 80078a8:	f104 0e14 	add.w	lr, r4, #20
 80078ac:	46a9      	mov	r9, r5
 80078ae:	f04f 0c00 	mov.w	ip, #0
 80078b2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80078b6:	f8d9 1000 	ldr.w	r1, [r9]
 80078ba:	fa1f fb82 	uxth.w	fp, r2
 80078be:	b289      	uxth	r1, r1
 80078c0:	fb0a 110b 	mla	r1, sl, fp, r1
 80078c4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80078c8:	f8d9 2000 	ldr.w	r2, [r9]
 80078cc:	4461      	add	r1, ip
 80078ce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80078d2:	fb0a c20b 	mla	r2, sl, fp, ip
 80078d6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80078da:	b289      	uxth	r1, r1
 80078dc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80078e0:	4577      	cmp	r7, lr
 80078e2:	f849 1b04 	str.w	r1, [r9], #4
 80078e6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80078ea:	d8e2      	bhi.n	80078b2 <__multiply+0xb2>
 80078ec:	9a01      	ldr	r2, [sp, #4]
 80078ee:	f845 c002 	str.w	ip, [r5, r2]
 80078f2:	9a03      	ldr	r2, [sp, #12]
 80078f4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80078f8:	3304      	adds	r3, #4
 80078fa:	f1b9 0f00 	cmp.w	r9, #0
 80078fe:	d021      	beq.n	8007944 <__multiply+0x144>
 8007900:	6829      	ldr	r1, [r5, #0]
 8007902:	f104 0c14 	add.w	ip, r4, #20
 8007906:	46ae      	mov	lr, r5
 8007908:	f04f 0a00 	mov.w	sl, #0
 800790c:	f8bc b000 	ldrh.w	fp, [ip]
 8007910:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007914:	fb09 220b 	mla	r2, r9, fp, r2
 8007918:	4452      	add	r2, sl
 800791a:	b289      	uxth	r1, r1
 800791c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007920:	f84e 1b04 	str.w	r1, [lr], #4
 8007924:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007928:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800792c:	f8be 1000 	ldrh.w	r1, [lr]
 8007930:	fb09 110a 	mla	r1, r9, sl, r1
 8007934:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007938:	4567      	cmp	r7, ip
 800793a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800793e:	d8e5      	bhi.n	800790c <__multiply+0x10c>
 8007940:	9a01      	ldr	r2, [sp, #4]
 8007942:	50a9      	str	r1, [r5, r2]
 8007944:	3504      	adds	r5, #4
 8007946:	e799      	b.n	800787c <__multiply+0x7c>
 8007948:	3e01      	subs	r6, #1
 800794a:	e79b      	b.n	8007884 <__multiply+0x84>
 800794c:	0800a885 	.word	0x0800a885
 8007950:	0800a896 	.word	0x0800a896

08007954 <__pow5mult>:
 8007954:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007958:	4615      	mov	r5, r2
 800795a:	f012 0203 	ands.w	r2, r2, #3
 800795e:	4606      	mov	r6, r0
 8007960:	460f      	mov	r7, r1
 8007962:	d007      	beq.n	8007974 <__pow5mult+0x20>
 8007964:	4c25      	ldr	r4, [pc, #148]	; (80079fc <__pow5mult+0xa8>)
 8007966:	3a01      	subs	r2, #1
 8007968:	2300      	movs	r3, #0
 800796a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800796e:	f7ff fe53 	bl	8007618 <__multadd>
 8007972:	4607      	mov	r7, r0
 8007974:	10ad      	asrs	r5, r5, #2
 8007976:	d03d      	beq.n	80079f4 <__pow5mult+0xa0>
 8007978:	69f4      	ldr	r4, [r6, #28]
 800797a:	b97c      	cbnz	r4, 800799c <__pow5mult+0x48>
 800797c:	2010      	movs	r0, #16
 800797e:	f7ff fd35 	bl	80073ec <malloc>
 8007982:	4602      	mov	r2, r0
 8007984:	61f0      	str	r0, [r6, #28]
 8007986:	b928      	cbnz	r0, 8007994 <__pow5mult+0x40>
 8007988:	4b1d      	ldr	r3, [pc, #116]	; (8007a00 <__pow5mult+0xac>)
 800798a:	481e      	ldr	r0, [pc, #120]	; (8007a04 <__pow5mult+0xb0>)
 800798c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007990:	f001 fd46 	bl	8009420 <__assert_func>
 8007994:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007998:	6004      	str	r4, [r0, #0]
 800799a:	60c4      	str	r4, [r0, #12]
 800799c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80079a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80079a4:	b94c      	cbnz	r4, 80079ba <__pow5mult+0x66>
 80079a6:	f240 2171 	movw	r1, #625	; 0x271
 80079aa:	4630      	mov	r0, r6
 80079ac:	f7ff ff12 	bl	80077d4 <__i2b>
 80079b0:	2300      	movs	r3, #0
 80079b2:	f8c8 0008 	str.w	r0, [r8, #8]
 80079b6:	4604      	mov	r4, r0
 80079b8:	6003      	str	r3, [r0, #0]
 80079ba:	f04f 0900 	mov.w	r9, #0
 80079be:	07eb      	lsls	r3, r5, #31
 80079c0:	d50a      	bpl.n	80079d8 <__pow5mult+0x84>
 80079c2:	4639      	mov	r1, r7
 80079c4:	4622      	mov	r2, r4
 80079c6:	4630      	mov	r0, r6
 80079c8:	f7ff ff1a 	bl	8007800 <__multiply>
 80079cc:	4639      	mov	r1, r7
 80079ce:	4680      	mov	r8, r0
 80079d0:	4630      	mov	r0, r6
 80079d2:	f7ff fdff 	bl	80075d4 <_Bfree>
 80079d6:	4647      	mov	r7, r8
 80079d8:	106d      	asrs	r5, r5, #1
 80079da:	d00b      	beq.n	80079f4 <__pow5mult+0xa0>
 80079dc:	6820      	ldr	r0, [r4, #0]
 80079de:	b938      	cbnz	r0, 80079f0 <__pow5mult+0x9c>
 80079e0:	4622      	mov	r2, r4
 80079e2:	4621      	mov	r1, r4
 80079e4:	4630      	mov	r0, r6
 80079e6:	f7ff ff0b 	bl	8007800 <__multiply>
 80079ea:	6020      	str	r0, [r4, #0]
 80079ec:	f8c0 9000 	str.w	r9, [r0]
 80079f0:	4604      	mov	r4, r0
 80079f2:	e7e4      	b.n	80079be <__pow5mult+0x6a>
 80079f4:	4638      	mov	r0, r7
 80079f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079fa:	bf00      	nop
 80079fc:	0800a9e0 	.word	0x0800a9e0
 8007a00:	0800a816 	.word	0x0800a816
 8007a04:	0800a896 	.word	0x0800a896

08007a08 <__lshift>:
 8007a08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a0c:	460c      	mov	r4, r1
 8007a0e:	6849      	ldr	r1, [r1, #4]
 8007a10:	6923      	ldr	r3, [r4, #16]
 8007a12:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007a16:	68a3      	ldr	r3, [r4, #8]
 8007a18:	4607      	mov	r7, r0
 8007a1a:	4691      	mov	r9, r2
 8007a1c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007a20:	f108 0601 	add.w	r6, r8, #1
 8007a24:	42b3      	cmp	r3, r6
 8007a26:	db0b      	blt.n	8007a40 <__lshift+0x38>
 8007a28:	4638      	mov	r0, r7
 8007a2a:	f7ff fd93 	bl	8007554 <_Balloc>
 8007a2e:	4605      	mov	r5, r0
 8007a30:	b948      	cbnz	r0, 8007a46 <__lshift+0x3e>
 8007a32:	4602      	mov	r2, r0
 8007a34:	4b28      	ldr	r3, [pc, #160]	; (8007ad8 <__lshift+0xd0>)
 8007a36:	4829      	ldr	r0, [pc, #164]	; (8007adc <__lshift+0xd4>)
 8007a38:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007a3c:	f001 fcf0 	bl	8009420 <__assert_func>
 8007a40:	3101      	adds	r1, #1
 8007a42:	005b      	lsls	r3, r3, #1
 8007a44:	e7ee      	b.n	8007a24 <__lshift+0x1c>
 8007a46:	2300      	movs	r3, #0
 8007a48:	f100 0114 	add.w	r1, r0, #20
 8007a4c:	f100 0210 	add.w	r2, r0, #16
 8007a50:	4618      	mov	r0, r3
 8007a52:	4553      	cmp	r3, sl
 8007a54:	db33      	blt.n	8007abe <__lshift+0xb6>
 8007a56:	6920      	ldr	r0, [r4, #16]
 8007a58:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007a5c:	f104 0314 	add.w	r3, r4, #20
 8007a60:	f019 091f 	ands.w	r9, r9, #31
 8007a64:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007a68:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007a6c:	d02b      	beq.n	8007ac6 <__lshift+0xbe>
 8007a6e:	f1c9 0e20 	rsb	lr, r9, #32
 8007a72:	468a      	mov	sl, r1
 8007a74:	2200      	movs	r2, #0
 8007a76:	6818      	ldr	r0, [r3, #0]
 8007a78:	fa00 f009 	lsl.w	r0, r0, r9
 8007a7c:	4310      	orrs	r0, r2
 8007a7e:	f84a 0b04 	str.w	r0, [sl], #4
 8007a82:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a86:	459c      	cmp	ip, r3
 8007a88:	fa22 f20e 	lsr.w	r2, r2, lr
 8007a8c:	d8f3      	bhi.n	8007a76 <__lshift+0x6e>
 8007a8e:	ebac 0304 	sub.w	r3, ip, r4
 8007a92:	3b15      	subs	r3, #21
 8007a94:	f023 0303 	bic.w	r3, r3, #3
 8007a98:	3304      	adds	r3, #4
 8007a9a:	f104 0015 	add.w	r0, r4, #21
 8007a9e:	4584      	cmp	ip, r0
 8007aa0:	bf38      	it	cc
 8007aa2:	2304      	movcc	r3, #4
 8007aa4:	50ca      	str	r2, [r1, r3]
 8007aa6:	b10a      	cbz	r2, 8007aac <__lshift+0xa4>
 8007aa8:	f108 0602 	add.w	r6, r8, #2
 8007aac:	3e01      	subs	r6, #1
 8007aae:	4638      	mov	r0, r7
 8007ab0:	612e      	str	r6, [r5, #16]
 8007ab2:	4621      	mov	r1, r4
 8007ab4:	f7ff fd8e 	bl	80075d4 <_Bfree>
 8007ab8:	4628      	mov	r0, r5
 8007aba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007abe:	f842 0f04 	str.w	r0, [r2, #4]!
 8007ac2:	3301      	adds	r3, #1
 8007ac4:	e7c5      	b.n	8007a52 <__lshift+0x4a>
 8007ac6:	3904      	subs	r1, #4
 8007ac8:	f853 2b04 	ldr.w	r2, [r3], #4
 8007acc:	f841 2f04 	str.w	r2, [r1, #4]!
 8007ad0:	459c      	cmp	ip, r3
 8007ad2:	d8f9      	bhi.n	8007ac8 <__lshift+0xc0>
 8007ad4:	e7ea      	b.n	8007aac <__lshift+0xa4>
 8007ad6:	bf00      	nop
 8007ad8:	0800a885 	.word	0x0800a885
 8007adc:	0800a896 	.word	0x0800a896

08007ae0 <__mcmp>:
 8007ae0:	b530      	push	{r4, r5, lr}
 8007ae2:	6902      	ldr	r2, [r0, #16]
 8007ae4:	690c      	ldr	r4, [r1, #16]
 8007ae6:	1b12      	subs	r2, r2, r4
 8007ae8:	d10e      	bne.n	8007b08 <__mcmp+0x28>
 8007aea:	f100 0314 	add.w	r3, r0, #20
 8007aee:	3114      	adds	r1, #20
 8007af0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007af4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007af8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007afc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007b00:	42a5      	cmp	r5, r4
 8007b02:	d003      	beq.n	8007b0c <__mcmp+0x2c>
 8007b04:	d305      	bcc.n	8007b12 <__mcmp+0x32>
 8007b06:	2201      	movs	r2, #1
 8007b08:	4610      	mov	r0, r2
 8007b0a:	bd30      	pop	{r4, r5, pc}
 8007b0c:	4283      	cmp	r3, r0
 8007b0e:	d3f3      	bcc.n	8007af8 <__mcmp+0x18>
 8007b10:	e7fa      	b.n	8007b08 <__mcmp+0x28>
 8007b12:	f04f 32ff 	mov.w	r2, #4294967295
 8007b16:	e7f7      	b.n	8007b08 <__mcmp+0x28>

08007b18 <__mdiff>:
 8007b18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b1c:	460c      	mov	r4, r1
 8007b1e:	4606      	mov	r6, r0
 8007b20:	4611      	mov	r1, r2
 8007b22:	4620      	mov	r0, r4
 8007b24:	4690      	mov	r8, r2
 8007b26:	f7ff ffdb 	bl	8007ae0 <__mcmp>
 8007b2a:	1e05      	subs	r5, r0, #0
 8007b2c:	d110      	bne.n	8007b50 <__mdiff+0x38>
 8007b2e:	4629      	mov	r1, r5
 8007b30:	4630      	mov	r0, r6
 8007b32:	f7ff fd0f 	bl	8007554 <_Balloc>
 8007b36:	b930      	cbnz	r0, 8007b46 <__mdiff+0x2e>
 8007b38:	4b3a      	ldr	r3, [pc, #232]	; (8007c24 <__mdiff+0x10c>)
 8007b3a:	4602      	mov	r2, r0
 8007b3c:	f240 2137 	movw	r1, #567	; 0x237
 8007b40:	4839      	ldr	r0, [pc, #228]	; (8007c28 <__mdiff+0x110>)
 8007b42:	f001 fc6d 	bl	8009420 <__assert_func>
 8007b46:	2301      	movs	r3, #1
 8007b48:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007b4c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b50:	bfa4      	itt	ge
 8007b52:	4643      	movge	r3, r8
 8007b54:	46a0      	movge	r8, r4
 8007b56:	4630      	mov	r0, r6
 8007b58:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007b5c:	bfa6      	itte	ge
 8007b5e:	461c      	movge	r4, r3
 8007b60:	2500      	movge	r5, #0
 8007b62:	2501      	movlt	r5, #1
 8007b64:	f7ff fcf6 	bl	8007554 <_Balloc>
 8007b68:	b920      	cbnz	r0, 8007b74 <__mdiff+0x5c>
 8007b6a:	4b2e      	ldr	r3, [pc, #184]	; (8007c24 <__mdiff+0x10c>)
 8007b6c:	4602      	mov	r2, r0
 8007b6e:	f240 2145 	movw	r1, #581	; 0x245
 8007b72:	e7e5      	b.n	8007b40 <__mdiff+0x28>
 8007b74:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007b78:	6926      	ldr	r6, [r4, #16]
 8007b7a:	60c5      	str	r5, [r0, #12]
 8007b7c:	f104 0914 	add.w	r9, r4, #20
 8007b80:	f108 0514 	add.w	r5, r8, #20
 8007b84:	f100 0e14 	add.w	lr, r0, #20
 8007b88:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007b8c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007b90:	f108 0210 	add.w	r2, r8, #16
 8007b94:	46f2      	mov	sl, lr
 8007b96:	2100      	movs	r1, #0
 8007b98:	f859 3b04 	ldr.w	r3, [r9], #4
 8007b9c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007ba0:	fa11 f88b 	uxtah	r8, r1, fp
 8007ba4:	b299      	uxth	r1, r3
 8007ba6:	0c1b      	lsrs	r3, r3, #16
 8007ba8:	eba8 0801 	sub.w	r8, r8, r1
 8007bac:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007bb0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007bb4:	fa1f f888 	uxth.w	r8, r8
 8007bb8:	1419      	asrs	r1, r3, #16
 8007bba:	454e      	cmp	r6, r9
 8007bbc:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007bc0:	f84a 3b04 	str.w	r3, [sl], #4
 8007bc4:	d8e8      	bhi.n	8007b98 <__mdiff+0x80>
 8007bc6:	1b33      	subs	r3, r6, r4
 8007bc8:	3b15      	subs	r3, #21
 8007bca:	f023 0303 	bic.w	r3, r3, #3
 8007bce:	3304      	adds	r3, #4
 8007bd0:	3415      	adds	r4, #21
 8007bd2:	42a6      	cmp	r6, r4
 8007bd4:	bf38      	it	cc
 8007bd6:	2304      	movcc	r3, #4
 8007bd8:	441d      	add	r5, r3
 8007bda:	4473      	add	r3, lr
 8007bdc:	469e      	mov	lr, r3
 8007bde:	462e      	mov	r6, r5
 8007be0:	4566      	cmp	r6, ip
 8007be2:	d30e      	bcc.n	8007c02 <__mdiff+0xea>
 8007be4:	f10c 0203 	add.w	r2, ip, #3
 8007be8:	1b52      	subs	r2, r2, r5
 8007bea:	f022 0203 	bic.w	r2, r2, #3
 8007bee:	3d03      	subs	r5, #3
 8007bf0:	45ac      	cmp	ip, r5
 8007bf2:	bf38      	it	cc
 8007bf4:	2200      	movcc	r2, #0
 8007bf6:	4413      	add	r3, r2
 8007bf8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007bfc:	b17a      	cbz	r2, 8007c1e <__mdiff+0x106>
 8007bfe:	6107      	str	r7, [r0, #16]
 8007c00:	e7a4      	b.n	8007b4c <__mdiff+0x34>
 8007c02:	f856 8b04 	ldr.w	r8, [r6], #4
 8007c06:	fa11 f288 	uxtah	r2, r1, r8
 8007c0a:	1414      	asrs	r4, r2, #16
 8007c0c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007c10:	b292      	uxth	r2, r2
 8007c12:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007c16:	f84e 2b04 	str.w	r2, [lr], #4
 8007c1a:	1421      	asrs	r1, r4, #16
 8007c1c:	e7e0      	b.n	8007be0 <__mdiff+0xc8>
 8007c1e:	3f01      	subs	r7, #1
 8007c20:	e7ea      	b.n	8007bf8 <__mdiff+0xe0>
 8007c22:	bf00      	nop
 8007c24:	0800a885 	.word	0x0800a885
 8007c28:	0800a896 	.word	0x0800a896

08007c2c <__ulp>:
 8007c2c:	b082      	sub	sp, #8
 8007c2e:	ed8d 0b00 	vstr	d0, [sp]
 8007c32:	9a01      	ldr	r2, [sp, #4]
 8007c34:	4b0f      	ldr	r3, [pc, #60]	; (8007c74 <__ulp+0x48>)
 8007c36:	4013      	ands	r3, r2
 8007c38:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	dc08      	bgt.n	8007c52 <__ulp+0x26>
 8007c40:	425b      	negs	r3, r3
 8007c42:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8007c46:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007c4a:	da04      	bge.n	8007c56 <__ulp+0x2a>
 8007c4c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007c50:	4113      	asrs	r3, r2
 8007c52:	2200      	movs	r2, #0
 8007c54:	e008      	b.n	8007c68 <__ulp+0x3c>
 8007c56:	f1a2 0314 	sub.w	r3, r2, #20
 8007c5a:	2b1e      	cmp	r3, #30
 8007c5c:	bfda      	itte	le
 8007c5e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8007c62:	40da      	lsrle	r2, r3
 8007c64:	2201      	movgt	r2, #1
 8007c66:	2300      	movs	r3, #0
 8007c68:	4619      	mov	r1, r3
 8007c6a:	4610      	mov	r0, r2
 8007c6c:	ec41 0b10 	vmov	d0, r0, r1
 8007c70:	b002      	add	sp, #8
 8007c72:	4770      	bx	lr
 8007c74:	7ff00000 	.word	0x7ff00000

08007c78 <__b2d>:
 8007c78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c7c:	6906      	ldr	r6, [r0, #16]
 8007c7e:	f100 0814 	add.w	r8, r0, #20
 8007c82:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8007c86:	1f37      	subs	r7, r6, #4
 8007c88:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007c8c:	4610      	mov	r0, r2
 8007c8e:	f7ff fd53 	bl	8007738 <__hi0bits>
 8007c92:	f1c0 0320 	rsb	r3, r0, #32
 8007c96:	280a      	cmp	r0, #10
 8007c98:	600b      	str	r3, [r1, #0]
 8007c9a:	491b      	ldr	r1, [pc, #108]	; (8007d08 <__b2d+0x90>)
 8007c9c:	dc15      	bgt.n	8007cca <__b2d+0x52>
 8007c9e:	f1c0 0c0b 	rsb	ip, r0, #11
 8007ca2:	fa22 f30c 	lsr.w	r3, r2, ip
 8007ca6:	45b8      	cmp	r8, r7
 8007ca8:	ea43 0501 	orr.w	r5, r3, r1
 8007cac:	bf34      	ite	cc
 8007cae:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007cb2:	2300      	movcs	r3, #0
 8007cb4:	3015      	adds	r0, #21
 8007cb6:	fa02 f000 	lsl.w	r0, r2, r0
 8007cba:	fa23 f30c 	lsr.w	r3, r3, ip
 8007cbe:	4303      	orrs	r3, r0
 8007cc0:	461c      	mov	r4, r3
 8007cc2:	ec45 4b10 	vmov	d0, r4, r5
 8007cc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cca:	45b8      	cmp	r8, r7
 8007ccc:	bf3a      	itte	cc
 8007cce:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007cd2:	f1a6 0708 	subcc.w	r7, r6, #8
 8007cd6:	2300      	movcs	r3, #0
 8007cd8:	380b      	subs	r0, #11
 8007cda:	d012      	beq.n	8007d02 <__b2d+0x8a>
 8007cdc:	f1c0 0120 	rsb	r1, r0, #32
 8007ce0:	fa23 f401 	lsr.w	r4, r3, r1
 8007ce4:	4082      	lsls	r2, r0
 8007ce6:	4322      	orrs	r2, r4
 8007ce8:	4547      	cmp	r7, r8
 8007cea:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8007cee:	bf8c      	ite	hi
 8007cf0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8007cf4:	2200      	movls	r2, #0
 8007cf6:	4083      	lsls	r3, r0
 8007cf8:	40ca      	lsrs	r2, r1
 8007cfa:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007cfe:	4313      	orrs	r3, r2
 8007d00:	e7de      	b.n	8007cc0 <__b2d+0x48>
 8007d02:	ea42 0501 	orr.w	r5, r2, r1
 8007d06:	e7db      	b.n	8007cc0 <__b2d+0x48>
 8007d08:	3ff00000 	.word	0x3ff00000

08007d0c <__d2b>:
 8007d0c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007d10:	460f      	mov	r7, r1
 8007d12:	2101      	movs	r1, #1
 8007d14:	ec59 8b10 	vmov	r8, r9, d0
 8007d18:	4616      	mov	r6, r2
 8007d1a:	f7ff fc1b 	bl	8007554 <_Balloc>
 8007d1e:	4604      	mov	r4, r0
 8007d20:	b930      	cbnz	r0, 8007d30 <__d2b+0x24>
 8007d22:	4602      	mov	r2, r0
 8007d24:	4b24      	ldr	r3, [pc, #144]	; (8007db8 <__d2b+0xac>)
 8007d26:	4825      	ldr	r0, [pc, #148]	; (8007dbc <__d2b+0xb0>)
 8007d28:	f240 310f 	movw	r1, #783	; 0x30f
 8007d2c:	f001 fb78 	bl	8009420 <__assert_func>
 8007d30:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007d34:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007d38:	bb2d      	cbnz	r5, 8007d86 <__d2b+0x7a>
 8007d3a:	9301      	str	r3, [sp, #4]
 8007d3c:	f1b8 0300 	subs.w	r3, r8, #0
 8007d40:	d026      	beq.n	8007d90 <__d2b+0x84>
 8007d42:	4668      	mov	r0, sp
 8007d44:	9300      	str	r3, [sp, #0]
 8007d46:	f7ff fd17 	bl	8007778 <__lo0bits>
 8007d4a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007d4e:	b1e8      	cbz	r0, 8007d8c <__d2b+0x80>
 8007d50:	f1c0 0320 	rsb	r3, r0, #32
 8007d54:	fa02 f303 	lsl.w	r3, r2, r3
 8007d58:	430b      	orrs	r3, r1
 8007d5a:	40c2      	lsrs	r2, r0
 8007d5c:	6163      	str	r3, [r4, #20]
 8007d5e:	9201      	str	r2, [sp, #4]
 8007d60:	9b01      	ldr	r3, [sp, #4]
 8007d62:	61a3      	str	r3, [r4, #24]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	bf14      	ite	ne
 8007d68:	2202      	movne	r2, #2
 8007d6a:	2201      	moveq	r2, #1
 8007d6c:	6122      	str	r2, [r4, #16]
 8007d6e:	b1bd      	cbz	r5, 8007da0 <__d2b+0x94>
 8007d70:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007d74:	4405      	add	r5, r0
 8007d76:	603d      	str	r5, [r7, #0]
 8007d78:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007d7c:	6030      	str	r0, [r6, #0]
 8007d7e:	4620      	mov	r0, r4
 8007d80:	b003      	add	sp, #12
 8007d82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007d86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007d8a:	e7d6      	b.n	8007d3a <__d2b+0x2e>
 8007d8c:	6161      	str	r1, [r4, #20]
 8007d8e:	e7e7      	b.n	8007d60 <__d2b+0x54>
 8007d90:	a801      	add	r0, sp, #4
 8007d92:	f7ff fcf1 	bl	8007778 <__lo0bits>
 8007d96:	9b01      	ldr	r3, [sp, #4]
 8007d98:	6163      	str	r3, [r4, #20]
 8007d9a:	3020      	adds	r0, #32
 8007d9c:	2201      	movs	r2, #1
 8007d9e:	e7e5      	b.n	8007d6c <__d2b+0x60>
 8007da0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007da4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007da8:	6038      	str	r0, [r7, #0]
 8007daa:	6918      	ldr	r0, [r3, #16]
 8007dac:	f7ff fcc4 	bl	8007738 <__hi0bits>
 8007db0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007db4:	e7e2      	b.n	8007d7c <__d2b+0x70>
 8007db6:	bf00      	nop
 8007db8:	0800a885 	.word	0x0800a885
 8007dbc:	0800a896 	.word	0x0800a896

08007dc0 <__ratio>:
 8007dc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dc4:	4688      	mov	r8, r1
 8007dc6:	4669      	mov	r1, sp
 8007dc8:	4681      	mov	r9, r0
 8007dca:	f7ff ff55 	bl	8007c78 <__b2d>
 8007dce:	a901      	add	r1, sp, #4
 8007dd0:	4640      	mov	r0, r8
 8007dd2:	ec55 4b10 	vmov	r4, r5, d0
 8007dd6:	f7ff ff4f 	bl	8007c78 <__b2d>
 8007dda:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007dde:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007de2:	eba3 0c02 	sub.w	ip, r3, r2
 8007de6:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007dea:	1a9b      	subs	r3, r3, r2
 8007dec:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007df0:	ec51 0b10 	vmov	r0, r1, d0
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	bfd6      	itet	le
 8007df8:	460a      	movle	r2, r1
 8007dfa:	462a      	movgt	r2, r5
 8007dfc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007e00:	468b      	mov	fp, r1
 8007e02:	462f      	mov	r7, r5
 8007e04:	bfd4      	ite	le
 8007e06:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8007e0a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007e0e:	4620      	mov	r0, r4
 8007e10:	ee10 2a10 	vmov	r2, s0
 8007e14:	465b      	mov	r3, fp
 8007e16:	4639      	mov	r1, r7
 8007e18:	f7f8 fd20 	bl	800085c <__aeabi_ddiv>
 8007e1c:	ec41 0b10 	vmov	d0, r0, r1
 8007e20:	b003      	add	sp, #12
 8007e22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007e26 <__copybits>:
 8007e26:	3901      	subs	r1, #1
 8007e28:	b570      	push	{r4, r5, r6, lr}
 8007e2a:	1149      	asrs	r1, r1, #5
 8007e2c:	6914      	ldr	r4, [r2, #16]
 8007e2e:	3101      	adds	r1, #1
 8007e30:	f102 0314 	add.w	r3, r2, #20
 8007e34:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007e38:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007e3c:	1f05      	subs	r5, r0, #4
 8007e3e:	42a3      	cmp	r3, r4
 8007e40:	d30c      	bcc.n	8007e5c <__copybits+0x36>
 8007e42:	1aa3      	subs	r3, r4, r2
 8007e44:	3b11      	subs	r3, #17
 8007e46:	f023 0303 	bic.w	r3, r3, #3
 8007e4a:	3211      	adds	r2, #17
 8007e4c:	42a2      	cmp	r2, r4
 8007e4e:	bf88      	it	hi
 8007e50:	2300      	movhi	r3, #0
 8007e52:	4418      	add	r0, r3
 8007e54:	2300      	movs	r3, #0
 8007e56:	4288      	cmp	r0, r1
 8007e58:	d305      	bcc.n	8007e66 <__copybits+0x40>
 8007e5a:	bd70      	pop	{r4, r5, r6, pc}
 8007e5c:	f853 6b04 	ldr.w	r6, [r3], #4
 8007e60:	f845 6f04 	str.w	r6, [r5, #4]!
 8007e64:	e7eb      	b.n	8007e3e <__copybits+0x18>
 8007e66:	f840 3b04 	str.w	r3, [r0], #4
 8007e6a:	e7f4      	b.n	8007e56 <__copybits+0x30>

08007e6c <__any_on>:
 8007e6c:	f100 0214 	add.w	r2, r0, #20
 8007e70:	6900      	ldr	r0, [r0, #16]
 8007e72:	114b      	asrs	r3, r1, #5
 8007e74:	4298      	cmp	r0, r3
 8007e76:	b510      	push	{r4, lr}
 8007e78:	db11      	blt.n	8007e9e <__any_on+0x32>
 8007e7a:	dd0a      	ble.n	8007e92 <__any_on+0x26>
 8007e7c:	f011 011f 	ands.w	r1, r1, #31
 8007e80:	d007      	beq.n	8007e92 <__any_on+0x26>
 8007e82:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007e86:	fa24 f001 	lsr.w	r0, r4, r1
 8007e8a:	fa00 f101 	lsl.w	r1, r0, r1
 8007e8e:	428c      	cmp	r4, r1
 8007e90:	d10b      	bne.n	8007eaa <__any_on+0x3e>
 8007e92:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d803      	bhi.n	8007ea2 <__any_on+0x36>
 8007e9a:	2000      	movs	r0, #0
 8007e9c:	bd10      	pop	{r4, pc}
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	e7f7      	b.n	8007e92 <__any_on+0x26>
 8007ea2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007ea6:	2900      	cmp	r1, #0
 8007ea8:	d0f5      	beq.n	8007e96 <__any_on+0x2a>
 8007eaa:	2001      	movs	r0, #1
 8007eac:	e7f6      	b.n	8007e9c <__any_on+0x30>

08007eae <sulp>:
 8007eae:	b570      	push	{r4, r5, r6, lr}
 8007eb0:	4604      	mov	r4, r0
 8007eb2:	460d      	mov	r5, r1
 8007eb4:	ec45 4b10 	vmov	d0, r4, r5
 8007eb8:	4616      	mov	r6, r2
 8007eba:	f7ff feb7 	bl	8007c2c <__ulp>
 8007ebe:	ec51 0b10 	vmov	r0, r1, d0
 8007ec2:	b17e      	cbz	r6, 8007ee4 <sulp+0x36>
 8007ec4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007ec8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	dd09      	ble.n	8007ee4 <sulp+0x36>
 8007ed0:	051b      	lsls	r3, r3, #20
 8007ed2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007ed6:	2400      	movs	r4, #0
 8007ed8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007edc:	4622      	mov	r2, r4
 8007ede:	462b      	mov	r3, r5
 8007ee0:	f7f8 fb92 	bl	8000608 <__aeabi_dmul>
 8007ee4:	bd70      	pop	{r4, r5, r6, pc}
	...

08007ee8 <_strtod_l>:
 8007ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eec:	ed2d 8b02 	vpush	{d8}
 8007ef0:	b09b      	sub	sp, #108	; 0x6c
 8007ef2:	4604      	mov	r4, r0
 8007ef4:	9213      	str	r2, [sp, #76]	; 0x4c
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	9216      	str	r2, [sp, #88]	; 0x58
 8007efa:	460d      	mov	r5, r1
 8007efc:	f04f 0800 	mov.w	r8, #0
 8007f00:	f04f 0900 	mov.w	r9, #0
 8007f04:	460a      	mov	r2, r1
 8007f06:	9215      	str	r2, [sp, #84]	; 0x54
 8007f08:	7811      	ldrb	r1, [r2, #0]
 8007f0a:	292b      	cmp	r1, #43	; 0x2b
 8007f0c:	d04c      	beq.n	8007fa8 <_strtod_l+0xc0>
 8007f0e:	d83a      	bhi.n	8007f86 <_strtod_l+0x9e>
 8007f10:	290d      	cmp	r1, #13
 8007f12:	d834      	bhi.n	8007f7e <_strtod_l+0x96>
 8007f14:	2908      	cmp	r1, #8
 8007f16:	d834      	bhi.n	8007f82 <_strtod_l+0x9a>
 8007f18:	2900      	cmp	r1, #0
 8007f1a:	d03d      	beq.n	8007f98 <_strtod_l+0xb0>
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	920a      	str	r2, [sp, #40]	; 0x28
 8007f20:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8007f22:	7832      	ldrb	r2, [r6, #0]
 8007f24:	2a30      	cmp	r2, #48	; 0x30
 8007f26:	f040 80b4 	bne.w	8008092 <_strtod_l+0x1aa>
 8007f2a:	7872      	ldrb	r2, [r6, #1]
 8007f2c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8007f30:	2a58      	cmp	r2, #88	; 0x58
 8007f32:	d170      	bne.n	8008016 <_strtod_l+0x12e>
 8007f34:	9302      	str	r3, [sp, #8]
 8007f36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f38:	9301      	str	r3, [sp, #4]
 8007f3a:	ab16      	add	r3, sp, #88	; 0x58
 8007f3c:	9300      	str	r3, [sp, #0]
 8007f3e:	4a8e      	ldr	r2, [pc, #568]	; (8008178 <_strtod_l+0x290>)
 8007f40:	ab17      	add	r3, sp, #92	; 0x5c
 8007f42:	a915      	add	r1, sp, #84	; 0x54
 8007f44:	4620      	mov	r0, r4
 8007f46:	f001 fb07 	bl	8009558 <__gethex>
 8007f4a:	f010 070f 	ands.w	r7, r0, #15
 8007f4e:	4605      	mov	r5, r0
 8007f50:	d005      	beq.n	8007f5e <_strtod_l+0x76>
 8007f52:	2f06      	cmp	r7, #6
 8007f54:	d12a      	bne.n	8007fac <_strtod_l+0xc4>
 8007f56:	3601      	adds	r6, #1
 8007f58:	2300      	movs	r3, #0
 8007f5a:	9615      	str	r6, [sp, #84]	; 0x54
 8007f5c:	930a      	str	r3, [sp, #40]	; 0x28
 8007f5e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	f040 857f 	bne.w	8008a64 <_strtod_l+0xb7c>
 8007f66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f68:	b1db      	cbz	r3, 8007fa2 <_strtod_l+0xba>
 8007f6a:	4642      	mov	r2, r8
 8007f6c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007f70:	ec43 2b10 	vmov	d0, r2, r3
 8007f74:	b01b      	add	sp, #108	; 0x6c
 8007f76:	ecbd 8b02 	vpop	{d8}
 8007f7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f7e:	2920      	cmp	r1, #32
 8007f80:	d1cc      	bne.n	8007f1c <_strtod_l+0x34>
 8007f82:	3201      	adds	r2, #1
 8007f84:	e7bf      	b.n	8007f06 <_strtod_l+0x1e>
 8007f86:	292d      	cmp	r1, #45	; 0x2d
 8007f88:	d1c8      	bne.n	8007f1c <_strtod_l+0x34>
 8007f8a:	2101      	movs	r1, #1
 8007f8c:	910a      	str	r1, [sp, #40]	; 0x28
 8007f8e:	1c51      	adds	r1, r2, #1
 8007f90:	9115      	str	r1, [sp, #84]	; 0x54
 8007f92:	7852      	ldrb	r2, [r2, #1]
 8007f94:	2a00      	cmp	r2, #0
 8007f96:	d1c3      	bne.n	8007f20 <_strtod_l+0x38>
 8007f98:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007f9a:	9515      	str	r5, [sp, #84]	; 0x54
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	f040 855f 	bne.w	8008a60 <_strtod_l+0xb78>
 8007fa2:	4642      	mov	r2, r8
 8007fa4:	464b      	mov	r3, r9
 8007fa6:	e7e3      	b.n	8007f70 <_strtod_l+0x88>
 8007fa8:	2100      	movs	r1, #0
 8007faa:	e7ef      	b.n	8007f8c <_strtod_l+0xa4>
 8007fac:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007fae:	b13a      	cbz	r2, 8007fc0 <_strtod_l+0xd8>
 8007fb0:	2135      	movs	r1, #53	; 0x35
 8007fb2:	a818      	add	r0, sp, #96	; 0x60
 8007fb4:	f7ff ff37 	bl	8007e26 <__copybits>
 8007fb8:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007fba:	4620      	mov	r0, r4
 8007fbc:	f7ff fb0a 	bl	80075d4 <_Bfree>
 8007fc0:	3f01      	subs	r7, #1
 8007fc2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007fc4:	2f04      	cmp	r7, #4
 8007fc6:	d806      	bhi.n	8007fd6 <_strtod_l+0xee>
 8007fc8:	e8df f007 	tbb	[pc, r7]
 8007fcc:	201d0314 	.word	0x201d0314
 8007fd0:	14          	.byte	0x14
 8007fd1:	00          	.byte	0x00
 8007fd2:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8007fd6:	05e9      	lsls	r1, r5, #23
 8007fd8:	bf48      	it	mi
 8007fda:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8007fde:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007fe2:	0d1b      	lsrs	r3, r3, #20
 8007fe4:	051b      	lsls	r3, r3, #20
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d1b9      	bne.n	8007f5e <_strtod_l+0x76>
 8007fea:	f7fe fb05 	bl	80065f8 <__errno>
 8007fee:	2322      	movs	r3, #34	; 0x22
 8007ff0:	6003      	str	r3, [r0, #0]
 8007ff2:	e7b4      	b.n	8007f5e <_strtod_l+0x76>
 8007ff4:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8007ff8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007ffc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008000:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8008004:	e7e7      	b.n	8007fd6 <_strtod_l+0xee>
 8008006:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8008180 <_strtod_l+0x298>
 800800a:	e7e4      	b.n	8007fd6 <_strtod_l+0xee>
 800800c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008010:	f04f 38ff 	mov.w	r8, #4294967295
 8008014:	e7df      	b.n	8007fd6 <_strtod_l+0xee>
 8008016:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008018:	1c5a      	adds	r2, r3, #1
 800801a:	9215      	str	r2, [sp, #84]	; 0x54
 800801c:	785b      	ldrb	r3, [r3, #1]
 800801e:	2b30      	cmp	r3, #48	; 0x30
 8008020:	d0f9      	beq.n	8008016 <_strtod_l+0x12e>
 8008022:	2b00      	cmp	r3, #0
 8008024:	d09b      	beq.n	8007f5e <_strtod_l+0x76>
 8008026:	2301      	movs	r3, #1
 8008028:	f04f 0a00 	mov.w	sl, #0
 800802c:	9304      	str	r3, [sp, #16]
 800802e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008030:	930b      	str	r3, [sp, #44]	; 0x2c
 8008032:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8008036:	46d3      	mov	fp, sl
 8008038:	220a      	movs	r2, #10
 800803a:	9815      	ldr	r0, [sp, #84]	; 0x54
 800803c:	7806      	ldrb	r6, [r0, #0]
 800803e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008042:	b2d9      	uxtb	r1, r3
 8008044:	2909      	cmp	r1, #9
 8008046:	d926      	bls.n	8008096 <_strtod_l+0x1ae>
 8008048:	494c      	ldr	r1, [pc, #304]	; (800817c <_strtod_l+0x294>)
 800804a:	2201      	movs	r2, #1
 800804c:	f001 f98c 	bl	8009368 <strncmp>
 8008050:	2800      	cmp	r0, #0
 8008052:	d030      	beq.n	80080b6 <_strtod_l+0x1ce>
 8008054:	2000      	movs	r0, #0
 8008056:	4632      	mov	r2, r6
 8008058:	9005      	str	r0, [sp, #20]
 800805a:	465e      	mov	r6, fp
 800805c:	4603      	mov	r3, r0
 800805e:	2a65      	cmp	r2, #101	; 0x65
 8008060:	d001      	beq.n	8008066 <_strtod_l+0x17e>
 8008062:	2a45      	cmp	r2, #69	; 0x45
 8008064:	d113      	bne.n	800808e <_strtod_l+0x1a6>
 8008066:	b91e      	cbnz	r6, 8008070 <_strtod_l+0x188>
 8008068:	9a04      	ldr	r2, [sp, #16]
 800806a:	4302      	orrs	r2, r0
 800806c:	d094      	beq.n	8007f98 <_strtod_l+0xb0>
 800806e:	2600      	movs	r6, #0
 8008070:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8008072:	1c6a      	adds	r2, r5, #1
 8008074:	9215      	str	r2, [sp, #84]	; 0x54
 8008076:	786a      	ldrb	r2, [r5, #1]
 8008078:	2a2b      	cmp	r2, #43	; 0x2b
 800807a:	d074      	beq.n	8008166 <_strtod_l+0x27e>
 800807c:	2a2d      	cmp	r2, #45	; 0x2d
 800807e:	d078      	beq.n	8008172 <_strtod_l+0x28a>
 8008080:	f04f 0c00 	mov.w	ip, #0
 8008084:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008088:	2909      	cmp	r1, #9
 800808a:	d97f      	bls.n	800818c <_strtod_l+0x2a4>
 800808c:	9515      	str	r5, [sp, #84]	; 0x54
 800808e:	2700      	movs	r7, #0
 8008090:	e09e      	b.n	80081d0 <_strtod_l+0x2e8>
 8008092:	2300      	movs	r3, #0
 8008094:	e7c8      	b.n	8008028 <_strtod_l+0x140>
 8008096:	f1bb 0f08 	cmp.w	fp, #8
 800809a:	bfd8      	it	le
 800809c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800809e:	f100 0001 	add.w	r0, r0, #1
 80080a2:	bfda      	itte	le
 80080a4:	fb02 3301 	mlale	r3, r2, r1, r3
 80080a8:	9309      	strle	r3, [sp, #36]	; 0x24
 80080aa:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 80080ae:	f10b 0b01 	add.w	fp, fp, #1
 80080b2:	9015      	str	r0, [sp, #84]	; 0x54
 80080b4:	e7c1      	b.n	800803a <_strtod_l+0x152>
 80080b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80080b8:	1c5a      	adds	r2, r3, #1
 80080ba:	9215      	str	r2, [sp, #84]	; 0x54
 80080bc:	785a      	ldrb	r2, [r3, #1]
 80080be:	f1bb 0f00 	cmp.w	fp, #0
 80080c2:	d037      	beq.n	8008134 <_strtod_l+0x24c>
 80080c4:	9005      	str	r0, [sp, #20]
 80080c6:	465e      	mov	r6, fp
 80080c8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80080cc:	2b09      	cmp	r3, #9
 80080ce:	d912      	bls.n	80080f6 <_strtod_l+0x20e>
 80080d0:	2301      	movs	r3, #1
 80080d2:	e7c4      	b.n	800805e <_strtod_l+0x176>
 80080d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80080d6:	1c5a      	adds	r2, r3, #1
 80080d8:	9215      	str	r2, [sp, #84]	; 0x54
 80080da:	785a      	ldrb	r2, [r3, #1]
 80080dc:	3001      	adds	r0, #1
 80080de:	2a30      	cmp	r2, #48	; 0x30
 80080e0:	d0f8      	beq.n	80080d4 <_strtod_l+0x1ec>
 80080e2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80080e6:	2b08      	cmp	r3, #8
 80080e8:	f200 84c1 	bhi.w	8008a6e <_strtod_l+0xb86>
 80080ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80080ee:	9005      	str	r0, [sp, #20]
 80080f0:	2000      	movs	r0, #0
 80080f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80080f4:	4606      	mov	r6, r0
 80080f6:	3a30      	subs	r2, #48	; 0x30
 80080f8:	f100 0301 	add.w	r3, r0, #1
 80080fc:	d014      	beq.n	8008128 <_strtod_l+0x240>
 80080fe:	9905      	ldr	r1, [sp, #20]
 8008100:	4419      	add	r1, r3
 8008102:	9105      	str	r1, [sp, #20]
 8008104:	4633      	mov	r3, r6
 8008106:	eb00 0c06 	add.w	ip, r0, r6
 800810a:	210a      	movs	r1, #10
 800810c:	4563      	cmp	r3, ip
 800810e:	d113      	bne.n	8008138 <_strtod_l+0x250>
 8008110:	1833      	adds	r3, r6, r0
 8008112:	2b08      	cmp	r3, #8
 8008114:	f106 0601 	add.w	r6, r6, #1
 8008118:	4406      	add	r6, r0
 800811a:	dc1a      	bgt.n	8008152 <_strtod_l+0x26a>
 800811c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800811e:	230a      	movs	r3, #10
 8008120:	fb03 2301 	mla	r3, r3, r1, r2
 8008124:	9309      	str	r3, [sp, #36]	; 0x24
 8008126:	2300      	movs	r3, #0
 8008128:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800812a:	1c51      	adds	r1, r2, #1
 800812c:	9115      	str	r1, [sp, #84]	; 0x54
 800812e:	7852      	ldrb	r2, [r2, #1]
 8008130:	4618      	mov	r0, r3
 8008132:	e7c9      	b.n	80080c8 <_strtod_l+0x1e0>
 8008134:	4658      	mov	r0, fp
 8008136:	e7d2      	b.n	80080de <_strtod_l+0x1f6>
 8008138:	2b08      	cmp	r3, #8
 800813a:	f103 0301 	add.w	r3, r3, #1
 800813e:	dc03      	bgt.n	8008148 <_strtod_l+0x260>
 8008140:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008142:	434f      	muls	r7, r1
 8008144:	9709      	str	r7, [sp, #36]	; 0x24
 8008146:	e7e1      	b.n	800810c <_strtod_l+0x224>
 8008148:	2b10      	cmp	r3, #16
 800814a:	bfd8      	it	le
 800814c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8008150:	e7dc      	b.n	800810c <_strtod_l+0x224>
 8008152:	2e10      	cmp	r6, #16
 8008154:	bfdc      	itt	le
 8008156:	230a      	movle	r3, #10
 8008158:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800815c:	e7e3      	b.n	8008126 <_strtod_l+0x23e>
 800815e:	2300      	movs	r3, #0
 8008160:	9305      	str	r3, [sp, #20]
 8008162:	2301      	movs	r3, #1
 8008164:	e780      	b.n	8008068 <_strtod_l+0x180>
 8008166:	f04f 0c00 	mov.w	ip, #0
 800816a:	1caa      	adds	r2, r5, #2
 800816c:	9215      	str	r2, [sp, #84]	; 0x54
 800816e:	78aa      	ldrb	r2, [r5, #2]
 8008170:	e788      	b.n	8008084 <_strtod_l+0x19c>
 8008172:	f04f 0c01 	mov.w	ip, #1
 8008176:	e7f8      	b.n	800816a <_strtod_l+0x282>
 8008178:	0800a9f0 	.word	0x0800a9f0
 800817c:	0800a9ec 	.word	0x0800a9ec
 8008180:	7ff00000 	.word	0x7ff00000
 8008184:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008186:	1c51      	adds	r1, r2, #1
 8008188:	9115      	str	r1, [sp, #84]	; 0x54
 800818a:	7852      	ldrb	r2, [r2, #1]
 800818c:	2a30      	cmp	r2, #48	; 0x30
 800818e:	d0f9      	beq.n	8008184 <_strtod_l+0x29c>
 8008190:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008194:	2908      	cmp	r1, #8
 8008196:	f63f af7a 	bhi.w	800808e <_strtod_l+0x1a6>
 800819a:	3a30      	subs	r2, #48	; 0x30
 800819c:	9208      	str	r2, [sp, #32]
 800819e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80081a0:	920c      	str	r2, [sp, #48]	; 0x30
 80081a2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80081a4:	1c57      	adds	r7, r2, #1
 80081a6:	9715      	str	r7, [sp, #84]	; 0x54
 80081a8:	7852      	ldrb	r2, [r2, #1]
 80081aa:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80081ae:	f1be 0f09 	cmp.w	lr, #9
 80081b2:	d938      	bls.n	8008226 <_strtod_l+0x33e>
 80081b4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80081b6:	1a7f      	subs	r7, r7, r1
 80081b8:	2f08      	cmp	r7, #8
 80081ba:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80081be:	dc03      	bgt.n	80081c8 <_strtod_l+0x2e0>
 80081c0:	9908      	ldr	r1, [sp, #32]
 80081c2:	428f      	cmp	r7, r1
 80081c4:	bfa8      	it	ge
 80081c6:	460f      	movge	r7, r1
 80081c8:	f1bc 0f00 	cmp.w	ip, #0
 80081cc:	d000      	beq.n	80081d0 <_strtod_l+0x2e8>
 80081ce:	427f      	negs	r7, r7
 80081d0:	2e00      	cmp	r6, #0
 80081d2:	d14f      	bne.n	8008274 <_strtod_l+0x38c>
 80081d4:	9904      	ldr	r1, [sp, #16]
 80081d6:	4301      	orrs	r1, r0
 80081d8:	f47f aec1 	bne.w	8007f5e <_strtod_l+0x76>
 80081dc:	2b00      	cmp	r3, #0
 80081de:	f47f aedb 	bne.w	8007f98 <_strtod_l+0xb0>
 80081e2:	2a69      	cmp	r2, #105	; 0x69
 80081e4:	d029      	beq.n	800823a <_strtod_l+0x352>
 80081e6:	dc26      	bgt.n	8008236 <_strtod_l+0x34e>
 80081e8:	2a49      	cmp	r2, #73	; 0x49
 80081ea:	d026      	beq.n	800823a <_strtod_l+0x352>
 80081ec:	2a4e      	cmp	r2, #78	; 0x4e
 80081ee:	f47f aed3 	bne.w	8007f98 <_strtod_l+0xb0>
 80081f2:	499b      	ldr	r1, [pc, #620]	; (8008460 <_strtod_l+0x578>)
 80081f4:	a815      	add	r0, sp, #84	; 0x54
 80081f6:	f001 fbef 	bl	80099d8 <__match>
 80081fa:	2800      	cmp	r0, #0
 80081fc:	f43f aecc 	beq.w	8007f98 <_strtod_l+0xb0>
 8008200:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008202:	781b      	ldrb	r3, [r3, #0]
 8008204:	2b28      	cmp	r3, #40	; 0x28
 8008206:	d12f      	bne.n	8008268 <_strtod_l+0x380>
 8008208:	4996      	ldr	r1, [pc, #600]	; (8008464 <_strtod_l+0x57c>)
 800820a:	aa18      	add	r2, sp, #96	; 0x60
 800820c:	a815      	add	r0, sp, #84	; 0x54
 800820e:	f001 fbf7 	bl	8009a00 <__hexnan>
 8008212:	2805      	cmp	r0, #5
 8008214:	d128      	bne.n	8008268 <_strtod_l+0x380>
 8008216:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008218:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800821c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8008220:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8008224:	e69b      	b.n	8007f5e <_strtod_l+0x76>
 8008226:	9f08      	ldr	r7, [sp, #32]
 8008228:	210a      	movs	r1, #10
 800822a:	fb01 2107 	mla	r1, r1, r7, r2
 800822e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8008232:	9208      	str	r2, [sp, #32]
 8008234:	e7b5      	b.n	80081a2 <_strtod_l+0x2ba>
 8008236:	2a6e      	cmp	r2, #110	; 0x6e
 8008238:	e7d9      	b.n	80081ee <_strtod_l+0x306>
 800823a:	498b      	ldr	r1, [pc, #556]	; (8008468 <_strtod_l+0x580>)
 800823c:	a815      	add	r0, sp, #84	; 0x54
 800823e:	f001 fbcb 	bl	80099d8 <__match>
 8008242:	2800      	cmp	r0, #0
 8008244:	f43f aea8 	beq.w	8007f98 <_strtod_l+0xb0>
 8008248:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800824a:	4988      	ldr	r1, [pc, #544]	; (800846c <_strtod_l+0x584>)
 800824c:	3b01      	subs	r3, #1
 800824e:	a815      	add	r0, sp, #84	; 0x54
 8008250:	9315      	str	r3, [sp, #84]	; 0x54
 8008252:	f001 fbc1 	bl	80099d8 <__match>
 8008256:	b910      	cbnz	r0, 800825e <_strtod_l+0x376>
 8008258:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800825a:	3301      	adds	r3, #1
 800825c:	9315      	str	r3, [sp, #84]	; 0x54
 800825e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800847c <_strtod_l+0x594>
 8008262:	f04f 0800 	mov.w	r8, #0
 8008266:	e67a      	b.n	8007f5e <_strtod_l+0x76>
 8008268:	4881      	ldr	r0, [pc, #516]	; (8008470 <_strtod_l+0x588>)
 800826a:	f001 f8d1 	bl	8009410 <nan>
 800826e:	ec59 8b10 	vmov	r8, r9, d0
 8008272:	e674      	b.n	8007f5e <_strtod_l+0x76>
 8008274:	9b05      	ldr	r3, [sp, #20]
 8008276:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008278:	1afb      	subs	r3, r7, r3
 800827a:	f1bb 0f00 	cmp.w	fp, #0
 800827e:	bf08      	it	eq
 8008280:	46b3      	moveq	fp, r6
 8008282:	2e10      	cmp	r6, #16
 8008284:	9308      	str	r3, [sp, #32]
 8008286:	4635      	mov	r5, r6
 8008288:	bfa8      	it	ge
 800828a:	2510      	movge	r5, #16
 800828c:	f7f8 f942 	bl	8000514 <__aeabi_ui2d>
 8008290:	2e09      	cmp	r6, #9
 8008292:	4680      	mov	r8, r0
 8008294:	4689      	mov	r9, r1
 8008296:	dd13      	ble.n	80082c0 <_strtod_l+0x3d8>
 8008298:	4b76      	ldr	r3, [pc, #472]	; (8008474 <_strtod_l+0x58c>)
 800829a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800829e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80082a2:	f7f8 f9b1 	bl	8000608 <__aeabi_dmul>
 80082a6:	4680      	mov	r8, r0
 80082a8:	4650      	mov	r0, sl
 80082aa:	4689      	mov	r9, r1
 80082ac:	f7f8 f932 	bl	8000514 <__aeabi_ui2d>
 80082b0:	4602      	mov	r2, r0
 80082b2:	460b      	mov	r3, r1
 80082b4:	4640      	mov	r0, r8
 80082b6:	4649      	mov	r1, r9
 80082b8:	f7f7 fff0 	bl	800029c <__adddf3>
 80082bc:	4680      	mov	r8, r0
 80082be:	4689      	mov	r9, r1
 80082c0:	2e0f      	cmp	r6, #15
 80082c2:	dc38      	bgt.n	8008336 <_strtod_l+0x44e>
 80082c4:	9b08      	ldr	r3, [sp, #32]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	f43f ae49 	beq.w	8007f5e <_strtod_l+0x76>
 80082cc:	dd24      	ble.n	8008318 <_strtod_l+0x430>
 80082ce:	2b16      	cmp	r3, #22
 80082d0:	dc0b      	bgt.n	80082ea <_strtod_l+0x402>
 80082d2:	4968      	ldr	r1, [pc, #416]	; (8008474 <_strtod_l+0x58c>)
 80082d4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80082d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80082dc:	4642      	mov	r2, r8
 80082de:	464b      	mov	r3, r9
 80082e0:	f7f8 f992 	bl	8000608 <__aeabi_dmul>
 80082e4:	4680      	mov	r8, r0
 80082e6:	4689      	mov	r9, r1
 80082e8:	e639      	b.n	8007f5e <_strtod_l+0x76>
 80082ea:	9a08      	ldr	r2, [sp, #32]
 80082ec:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 80082f0:	4293      	cmp	r3, r2
 80082f2:	db20      	blt.n	8008336 <_strtod_l+0x44e>
 80082f4:	4c5f      	ldr	r4, [pc, #380]	; (8008474 <_strtod_l+0x58c>)
 80082f6:	f1c6 060f 	rsb	r6, r6, #15
 80082fa:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80082fe:	4642      	mov	r2, r8
 8008300:	464b      	mov	r3, r9
 8008302:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008306:	f7f8 f97f 	bl	8000608 <__aeabi_dmul>
 800830a:	9b08      	ldr	r3, [sp, #32]
 800830c:	1b9e      	subs	r6, r3, r6
 800830e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8008312:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008316:	e7e3      	b.n	80082e0 <_strtod_l+0x3f8>
 8008318:	9b08      	ldr	r3, [sp, #32]
 800831a:	3316      	adds	r3, #22
 800831c:	db0b      	blt.n	8008336 <_strtod_l+0x44e>
 800831e:	9b05      	ldr	r3, [sp, #20]
 8008320:	1bdf      	subs	r7, r3, r7
 8008322:	4b54      	ldr	r3, [pc, #336]	; (8008474 <_strtod_l+0x58c>)
 8008324:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8008328:	e9d7 2300 	ldrd	r2, r3, [r7]
 800832c:	4640      	mov	r0, r8
 800832e:	4649      	mov	r1, r9
 8008330:	f7f8 fa94 	bl	800085c <__aeabi_ddiv>
 8008334:	e7d6      	b.n	80082e4 <_strtod_l+0x3fc>
 8008336:	9b08      	ldr	r3, [sp, #32]
 8008338:	1b75      	subs	r5, r6, r5
 800833a:	441d      	add	r5, r3
 800833c:	2d00      	cmp	r5, #0
 800833e:	dd70      	ble.n	8008422 <_strtod_l+0x53a>
 8008340:	f015 030f 	ands.w	r3, r5, #15
 8008344:	d00a      	beq.n	800835c <_strtod_l+0x474>
 8008346:	494b      	ldr	r1, [pc, #300]	; (8008474 <_strtod_l+0x58c>)
 8008348:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800834c:	4642      	mov	r2, r8
 800834e:	464b      	mov	r3, r9
 8008350:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008354:	f7f8 f958 	bl	8000608 <__aeabi_dmul>
 8008358:	4680      	mov	r8, r0
 800835a:	4689      	mov	r9, r1
 800835c:	f035 050f 	bics.w	r5, r5, #15
 8008360:	d04d      	beq.n	80083fe <_strtod_l+0x516>
 8008362:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8008366:	dd22      	ble.n	80083ae <_strtod_l+0x4c6>
 8008368:	2500      	movs	r5, #0
 800836a:	46ab      	mov	fp, r5
 800836c:	9509      	str	r5, [sp, #36]	; 0x24
 800836e:	9505      	str	r5, [sp, #20]
 8008370:	2322      	movs	r3, #34	; 0x22
 8008372:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800847c <_strtod_l+0x594>
 8008376:	6023      	str	r3, [r4, #0]
 8008378:	f04f 0800 	mov.w	r8, #0
 800837c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800837e:	2b00      	cmp	r3, #0
 8008380:	f43f aded 	beq.w	8007f5e <_strtod_l+0x76>
 8008384:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008386:	4620      	mov	r0, r4
 8008388:	f7ff f924 	bl	80075d4 <_Bfree>
 800838c:	9905      	ldr	r1, [sp, #20]
 800838e:	4620      	mov	r0, r4
 8008390:	f7ff f920 	bl	80075d4 <_Bfree>
 8008394:	4659      	mov	r1, fp
 8008396:	4620      	mov	r0, r4
 8008398:	f7ff f91c 	bl	80075d4 <_Bfree>
 800839c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800839e:	4620      	mov	r0, r4
 80083a0:	f7ff f918 	bl	80075d4 <_Bfree>
 80083a4:	4629      	mov	r1, r5
 80083a6:	4620      	mov	r0, r4
 80083a8:	f7ff f914 	bl	80075d4 <_Bfree>
 80083ac:	e5d7      	b.n	8007f5e <_strtod_l+0x76>
 80083ae:	4b32      	ldr	r3, [pc, #200]	; (8008478 <_strtod_l+0x590>)
 80083b0:	9304      	str	r3, [sp, #16]
 80083b2:	2300      	movs	r3, #0
 80083b4:	112d      	asrs	r5, r5, #4
 80083b6:	4640      	mov	r0, r8
 80083b8:	4649      	mov	r1, r9
 80083ba:	469a      	mov	sl, r3
 80083bc:	2d01      	cmp	r5, #1
 80083be:	dc21      	bgt.n	8008404 <_strtod_l+0x51c>
 80083c0:	b10b      	cbz	r3, 80083c6 <_strtod_l+0x4de>
 80083c2:	4680      	mov	r8, r0
 80083c4:	4689      	mov	r9, r1
 80083c6:	492c      	ldr	r1, [pc, #176]	; (8008478 <_strtod_l+0x590>)
 80083c8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80083cc:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80083d0:	4642      	mov	r2, r8
 80083d2:	464b      	mov	r3, r9
 80083d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80083d8:	f7f8 f916 	bl	8000608 <__aeabi_dmul>
 80083dc:	4b27      	ldr	r3, [pc, #156]	; (800847c <_strtod_l+0x594>)
 80083de:	460a      	mov	r2, r1
 80083e0:	400b      	ands	r3, r1
 80083e2:	4927      	ldr	r1, [pc, #156]	; (8008480 <_strtod_l+0x598>)
 80083e4:	428b      	cmp	r3, r1
 80083e6:	4680      	mov	r8, r0
 80083e8:	d8be      	bhi.n	8008368 <_strtod_l+0x480>
 80083ea:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80083ee:	428b      	cmp	r3, r1
 80083f0:	bf86      	itte	hi
 80083f2:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8008484 <_strtod_l+0x59c>
 80083f6:	f04f 38ff 	movhi.w	r8, #4294967295
 80083fa:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80083fe:	2300      	movs	r3, #0
 8008400:	9304      	str	r3, [sp, #16]
 8008402:	e07b      	b.n	80084fc <_strtod_l+0x614>
 8008404:	07ea      	lsls	r2, r5, #31
 8008406:	d505      	bpl.n	8008414 <_strtod_l+0x52c>
 8008408:	9b04      	ldr	r3, [sp, #16]
 800840a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800840e:	f7f8 f8fb 	bl	8000608 <__aeabi_dmul>
 8008412:	2301      	movs	r3, #1
 8008414:	9a04      	ldr	r2, [sp, #16]
 8008416:	3208      	adds	r2, #8
 8008418:	f10a 0a01 	add.w	sl, sl, #1
 800841c:	106d      	asrs	r5, r5, #1
 800841e:	9204      	str	r2, [sp, #16]
 8008420:	e7cc      	b.n	80083bc <_strtod_l+0x4d4>
 8008422:	d0ec      	beq.n	80083fe <_strtod_l+0x516>
 8008424:	426d      	negs	r5, r5
 8008426:	f015 020f 	ands.w	r2, r5, #15
 800842a:	d00a      	beq.n	8008442 <_strtod_l+0x55a>
 800842c:	4b11      	ldr	r3, [pc, #68]	; (8008474 <_strtod_l+0x58c>)
 800842e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008432:	4640      	mov	r0, r8
 8008434:	4649      	mov	r1, r9
 8008436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800843a:	f7f8 fa0f 	bl	800085c <__aeabi_ddiv>
 800843e:	4680      	mov	r8, r0
 8008440:	4689      	mov	r9, r1
 8008442:	112d      	asrs	r5, r5, #4
 8008444:	d0db      	beq.n	80083fe <_strtod_l+0x516>
 8008446:	2d1f      	cmp	r5, #31
 8008448:	dd1e      	ble.n	8008488 <_strtod_l+0x5a0>
 800844a:	2500      	movs	r5, #0
 800844c:	46ab      	mov	fp, r5
 800844e:	9509      	str	r5, [sp, #36]	; 0x24
 8008450:	9505      	str	r5, [sp, #20]
 8008452:	2322      	movs	r3, #34	; 0x22
 8008454:	f04f 0800 	mov.w	r8, #0
 8008458:	f04f 0900 	mov.w	r9, #0
 800845c:	6023      	str	r3, [r4, #0]
 800845e:	e78d      	b.n	800837c <_strtod_l+0x494>
 8008460:	0800a7dd 	.word	0x0800a7dd
 8008464:	0800aa04 	.word	0x0800aa04
 8008468:	0800a7d5 	.word	0x0800a7d5
 800846c:	0800a80c 	.word	0x0800a80c
 8008470:	0800ab95 	.word	0x0800ab95
 8008474:	0800a918 	.word	0x0800a918
 8008478:	0800a8f0 	.word	0x0800a8f0
 800847c:	7ff00000 	.word	0x7ff00000
 8008480:	7ca00000 	.word	0x7ca00000
 8008484:	7fefffff 	.word	0x7fefffff
 8008488:	f015 0310 	ands.w	r3, r5, #16
 800848c:	bf18      	it	ne
 800848e:	236a      	movne	r3, #106	; 0x6a
 8008490:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8008834 <_strtod_l+0x94c>
 8008494:	9304      	str	r3, [sp, #16]
 8008496:	4640      	mov	r0, r8
 8008498:	4649      	mov	r1, r9
 800849a:	2300      	movs	r3, #0
 800849c:	07ea      	lsls	r2, r5, #31
 800849e:	d504      	bpl.n	80084aa <_strtod_l+0x5c2>
 80084a0:	e9da 2300 	ldrd	r2, r3, [sl]
 80084a4:	f7f8 f8b0 	bl	8000608 <__aeabi_dmul>
 80084a8:	2301      	movs	r3, #1
 80084aa:	106d      	asrs	r5, r5, #1
 80084ac:	f10a 0a08 	add.w	sl, sl, #8
 80084b0:	d1f4      	bne.n	800849c <_strtod_l+0x5b4>
 80084b2:	b10b      	cbz	r3, 80084b8 <_strtod_l+0x5d0>
 80084b4:	4680      	mov	r8, r0
 80084b6:	4689      	mov	r9, r1
 80084b8:	9b04      	ldr	r3, [sp, #16]
 80084ba:	b1bb      	cbz	r3, 80084ec <_strtod_l+0x604>
 80084bc:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80084c0:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	4649      	mov	r1, r9
 80084c8:	dd10      	ble.n	80084ec <_strtod_l+0x604>
 80084ca:	2b1f      	cmp	r3, #31
 80084cc:	f340 811e 	ble.w	800870c <_strtod_l+0x824>
 80084d0:	2b34      	cmp	r3, #52	; 0x34
 80084d2:	bfde      	ittt	le
 80084d4:	f04f 33ff 	movle.w	r3, #4294967295
 80084d8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80084dc:	4093      	lslle	r3, r2
 80084de:	f04f 0800 	mov.w	r8, #0
 80084e2:	bfcc      	ite	gt
 80084e4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80084e8:	ea03 0901 	andle.w	r9, r3, r1
 80084ec:	2200      	movs	r2, #0
 80084ee:	2300      	movs	r3, #0
 80084f0:	4640      	mov	r0, r8
 80084f2:	4649      	mov	r1, r9
 80084f4:	f7f8 faf0 	bl	8000ad8 <__aeabi_dcmpeq>
 80084f8:	2800      	cmp	r0, #0
 80084fa:	d1a6      	bne.n	800844a <_strtod_l+0x562>
 80084fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084fe:	9300      	str	r3, [sp, #0]
 8008500:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008502:	4633      	mov	r3, r6
 8008504:	465a      	mov	r2, fp
 8008506:	4620      	mov	r0, r4
 8008508:	f7ff f8cc 	bl	80076a4 <__s2b>
 800850c:	9009      	str	r0, [sp, #36]	; 0x24
 800850e:	2800      	cmp	r0, #0
 8008510:	f43f af2a 	beq.w	8008368 <_strtod_l+0x480>
 8008514:	9a08      	ldr	r2, [sp, #32]
 8008516:	9b05      	ldr	r3, [sp, #20]
 8008518:	2a00      	cmp	r2, #0
 800851a:	eba3 0307 	sub.w	r3, r3, r7
 800851e:	bfa8      	it	ge
 8008520:	2300      	movge	r3, #0
 8008522:	930c      	str	r3, [sp, #48]	; 0x30
 8008524:	2500      	movs	r5, #0
 8008526:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800852a:	9312      	str	r3, [sp, #72]	; 0x48
 800852c:	46ab      	mov	fp, r5
 800852e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008530:	4620      	mov	r0, r4
 8008532:	6859      	ldr	r1, [r3, #4]
 8008534:	f7ff f80e 	bl	8007554 <_Balloc>
 8008538:	9005      	str	r0, [sp, #20]
 800853a:	2800      	cmp	r0, #0
 800853c:	f43f af18 	beq.w	8008370 <_strtod_l+0x488>
 8008540:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008542:	691a      	ldr	r2, [r3, #16]
 8008544:	3202      	adds	r2, #2
 8008546:	f103 010c 	add.w	r1, r3, #12
 800854a:	0092      	lsls	r2, r2, #2
 800854c:	300c      	adds	r0, #12
 800854e:	f000 ff4f 	bl	80093f0 <memcpy>
 8008552:	ec49 8b10 	vmov	d0, r8, r9
 8008556:	aa18      	add	r2, sp, #96	; 0x60
 8008558:	a917      	add	r1, sp, #92	; 0x5c
 800855a:	4620      	mov	r0, r4
 800855c:	f7ff fbd6 	bl	8007d0c <__d2b>
 8008560:	ec49 8b18 	vmov	d8, r8, r9
 8008564:	9016      	str	r0, [sp, #88]	; 0x58
 8008566:	2800      	cmp	r0, #0
 8008568:	f43f af02 	beq.w	8008370 <_strtod_l+0x488>
 800856c:	2101      	movs	r1, #1
 800856e:	4620      	mov	r0, r4
 8008570:	f7ff f930 	bl	80077d4 <__i2b>
 8008574:	4683      	mov	fp, r0
 8008576:	2800      	cmp	r0, #0
 8008578:	f43f aefa 	beq.w	8008370 <_strtod_l+0x488>
 800857c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800857e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008580:	2e00      	cmp	r6, #0
 8008582:	bfab      	itete	ge
 8008584:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8008586:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8008588:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800858a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800858e:	bfac      	ite	ge
 8008590:	eb06 0a03 	addge.w	sl, r6, r3
 8008594:	1b9f      	sublt	r7, r3, r6
 8008596:	9b04      	ldr	r3, [sp, #16]
 8008598:	1af6      	subs	r6, r6, r3
 800859a:	4416      	add	r6, r2
 800859c:	4ba0      	ldr	r3, [pc, #640]	; (8008820 <_strtod_l+0x938>)
 800859e:	3e01      	subs	r6, #1
 80085a0:	429e      	cmp	r6, r3
 80085a2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80085a6:	f280 80c4 	bge.w	8008732 <_strtod_l+0x84a>
 80085aa:	1b9b      	subs	r3, r3, r6
 80085ac:	2b1f      	cmp	r3, #31
 80085ae:	eba2 0203 	sub.w	r2, r2, r3
 80085b2:	f04f 0101 	mov.w	r1, #1
 80085b6:	f300 80b0 	bgt.w	800871a <_strtod_l+0x832>
 80085ba:	fa01 f303 	lsl.w	r3, r1, r3
 80085be:	930e      	str	r3, [sp, #56]	; 0x38
 80085c0:	2300      	movs	r3, #0
 80085c2:	930d      	str	r3, [sp, #52]	; 0x34
 80085c4:	eb0a 0602 	add.w	r6, sl, r2
 80085c8:	9b04      	ldr	r3, [sp, #16]
 80085ca:	45b2      	cmp	sl, r6
 80085cc:	4417      	add	r7, r2
 80085ce:	441f      	add	r7, r3
 80085d0:	4653      	mov	r3, sl
 80085d2:	bfa8      	it	ge
 80085d4:	4633      	movge	r3, r6
 80085d6:	42bb      	cmp	r3, r7
 80085d8:	bfa8      	it	ge
 80085da:	463b      	movge	r3, r7
 80085dc:	2b00      	cmp	r3, #0
 80085de:	bfc2      	ittt	gt
 80085e0:	1af6      	subgt	r6, r6, r3
 80085e2:	1aff      	subgt	r7, r7, r3
 80085e4:	ebaa 0a03 	subgt.w	sl, sl, r3
 80085e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	dd17      	ble.n	800861e <_strtod_l+0x736>
 80085ee:	4659      	mov	r1, fp
 80085f0:	461a      	mov	r2, r3
 80085f2:	4620      	mov	r0, r4
 80085f4:	f7ff f9ae 	bl	8007954 <__pow5mult>
 80085f8:	4683      	mov	fp, r0
 80085fa:	2800      	cmp	r0, #0
 80085fc:	f43f aeb8 	beq.w	8008370 <_strtod_l+0x488>
 8008600:	4601      	mov	r1, r0
 8008602:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008604:	4620      	mov	r0, r4
 8008606:	f7ff f8fb 	bl	8007800 <__multiply>
 800860a:	900b      	str	r0, [sp, #44]	; 0x2c
 800860c:	2800      	cmp	r0, #0
 800860e:	f43f aeaf 	beq.w	8008370 <_strtod_l+0x488>
 8008612:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008614:	4620      	mov	r0, r4
 8008616:	f7fe ffdd 	bl	80075d4 <_Bfree>
 800861a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800861c:	9316      	str	r3, [sp, #88]	; 0x58
 800861e:	2e00      	cmp	r6, #0
 8008620:	f300 808c 	bgt.w	800873c <_strtod_l+0x854>
 8008624:	9b08      	ldr	r3, [sp, #32]
 8008626:	2b00      	cmp	r3, #0
 8008628:	dd08      	ble.n	800863c <_strtod_l+0x754>
 800862a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800862c:	9905      	ldr	r1, [sp, #20]
 800862e:	4620      	mov	r0, r4
 8008630:	f7ff f990 	bl	8007954 <__pow5mult>
 8008634:	9005      	str	r0, [sp, #20]
 8008636:	2800      	cmp	r0, #0
 8008638:	f43f ae9a 	beq.w	8008370 <_strtod_l+0x488>
 800863c:	2f00      	cmp	r7, #0
 800863e:	dd08      	ble.n	8008652 <_strtod_l+0x76a>
 8008640:	9905      	ldr	r1, [sp, #20]
 8008642:	463a      	mov	r2, r7
 8008644:	4620      	mov	r0, r4
 8008646:	f7ff f9df 	bl	8007a08 <__lshift>
 800864a:	9005      	str	r0, [sp, #20]
 800864c:	2800      	cmp	r0, #0
 800864e:	f43f ae8f 	beq.w	8008370 <_strtod_l+0x488>
 8008652:	f1ba 0f00 	cmp.w	sl, #0
 8008656:	dd08      	ble.n	800866a <_strtod_l+0x782>
 8008658:	4659      	mov	r1, fp
 800865a:	4652      	mov	r2, sl
 800865c:	4620      	mov	r0, r4
 800865e:	f7ff f9d3 	bl	8007a08 <__lshift>
 8008662:	4683      	mov	fp, r0
 8008664:	2800      	cmp	r0, #0
 8008666:	f43f ae83 	beq.w	8008370 <_strtod_l+0x488>
 800866a:	9a05      	ldr	r2, [sp, #20]
 800866c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800866e:	4620      	mov	r0, r4
 8008670:	f7ff fa52 	bl	8007b18 <__mdiff>
 8008674:	4605      	mov	r5, r0
 8008676:	2800      	cmp	r0, #0
 8008678:	f43f ae7a 	beq.w	8008370 <_strtod_l+0x488>
 800867c:	68c3      	ldr	r3, [r0, #12]
 800867e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008680:	2300      	movs	r3, #0
 8008682:	60c3      	str	r3, [r0, #12]
 8008684:	4659      	mov	r1, fp
 8008686:	f7ff fa2b 	bl	8007ae0 <__mcmp>
 800868a:	2800      	cmp	r0, #0
 800868c:	da60      	bge.n	8008750 <_strtod_l+0x868>
 800868e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008690:	ea53 0308 	orrs.w	r3, r3, r8
 8008694:	f040 8084 	bne.w	80087a0 <_strtod_l+0x8b8>
 8008698:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800869c:	2b00      	cmp	r3, #0
 800869e:	d17f      	bne.n	80087a0 <_strtod_l+0x8b8>
 80086a0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80086a4:	0d1b      	lsrs	r3, r3, #20
 80086a6:	051b      	lsls	r3, r3, #20
 80086a8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80086ac:	d978      	bls.n	80087a0 <_strtod_l+0x8b8>
 80086ae:	696b      	ldr	r3, [r5, #20]
 80086b0:	b913      	cbnz	r3, 80086b8 <_strtod_l+0x7d0>
 80086b2:	692b      	ldr	r3, [r5, #16]
 80086b4:	2b01      	cmp	r3, #1
 80086b6:	dd73      	ble.n	80087a0 <_strtod_l+0x8b8>
 80086b8:	4629      	mov	r1, r5
 80086ba:	2201      	movs	r2, #1
 80086bc:	4620      	mov	r0, r4
 80086be:	f7ff f9a3 	bl	8007a08 <__lshift>
 80086c2:	4659      	mov	r1, fp
 80086c4:	4605      	mov	r5, r0
 80086c6:	f7ff fa0b 	bl	8007ae0 <__mcmp>
 80086ca:	2800      	cmp	r0, #0
 80086cc:	dd68      	ble.n	80087a0 <_strtod_l+0x8b8>
 80086ce:	9904      	ldr	r1, [sp, #16]
 80086d0:	4a54      	ldr	r2, [pc, #336]	; (8008824 <_strtod_l+0x93c>)
 80086d2:	464b      	mov	r3, r9
 80086d4:	2900      	cmp	r1, #0
 80086d6:	f000 8084 	beq.w	80087e2 <_strtod_l+0x8fa>
 80086da:	ea02 0109 	and.w	r1, r2, r9
 80086de:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80086e2:	dc7e      	bgt.n	80087e2 <_strtod_l+0x8fa>
 80086e4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80086e8:	f77f aeb3 	ble.w	8008452 <_strtod_l+0x56a>
 80086ec:	4b4e      	ldr	r3, [pc, #312]	; (8008828 <_strtod_l+0x940>)
 80086ee:	4640      	mov	r0, r8
 80086f0:	4649      	mov	r1, r9
 80086f2:	2200      	movs	r2, #0
 80086f4:	f7f7 ff88 	bl	8000608 <__aeabi_dmul>
 80086f8:	4b4a      	ldr	r3, [pc, #296]	; (8008824 <_strtod_l+0x93c>)
 80086fa:	400b      	ands	r3, r1
 80086fc:	4680      	mov	r8, r0
 80086fe:	4689      	mov	r9, r1
 8008700:	2b00      	cmp	r3, #0
 8008702:	f47f ae3f 	bne.w	8008384 <_strtod_l+0x49c>
 8008706:	2322      	movs	r3, #34	; 0x22
 8008708:	6023      	str	r3, [r4, #0]
 800870a:	e63b      	b.n	8008384 <_strtod_l+0x49c>
 800870c:	f04f 32ff 	mov.w	r2, #4294967295
 8008710:	fa02 f303 	lsl.w	r3, r2, r3
 8008714:	ea03 0808 	and.w	r8, r3, r8
 8008718:	e6e8      	b.n	80084ec <_strtod_l+0x604>
 800871a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800871e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8008722:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8008726:	36e2      	adds	r6, #226	; 0xe2
 8008728:	fa01 f306 	lsl.w	r3, r1, r6
 800872c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8008730:	e748      	b.n	80085c4 <_strtod_l+0x6dc>
 8008732:	2100      	movs	r1, #0
 8008734:	2301      	movs	r3, #1
 8008736:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800873a:	e743      	b.n	80085c4 <_strtod_l+0x6dc>
 800873c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800873e:	4632      	mov	r2, r6
 8008740:	4620      	mov	r0, r4
 8008742:	f7ff f961 	bl	8007a08 <__lshift>
 8008746:	9016      	str	r0, [sp, #88]	; 0x58
 8008748:	2800      	cmp	r0, #0
 800874a:	f47f af6b 	bne.w	8008624 <_strtod_l+0x73c>
 800874e:	e60f      	b.n	8008370 <_strtod_l+0x488>
 8008750:	46ca      	mov	sl, r9
 8008752:	d171      	bne.n	8008838 <_strtod_l+0x950>
 8008754:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008756:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800875a:	b352      	cbz	r2, 80087b2 <_strtod_l+0x8ca>
 800875c:	4a33      	ldr	r2, [pc, #204]	; (800882c <_strtod_l+0x944>)
 800875e:	4293      	cmp	r3, r2
 8008760:	d12a      	bne.n	80087b8 <_strtod_l+0x8d0>
 8008762:	9b04      	ldr	r3, [sp, #16]
 8008764:	4641      	mov	r1, r8
 8008766:	b1fb      	cbz	r3, 80087a8 <_strtod_l+0x8c0>
 8008768:	4b2e      	ldr	r3, [pc, #184]	; (8008824 <_strtod_l+0x93c>)
 800876a:	ea09 0303 	and.w	r3, r9, r3
 800876e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008772:	f04f 32ff 	mov.w	r2, #4294967295
 8008776:	d81a      	bhi.n	80087ae <_strtod_l+0x8c6>
 8008778:	0d1b      	lsrs	r3, r3, #20
 800877a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800877e:	fa02 f303 	lsl.w	r3, r2, r3
 8008782:	4299      	cmp	r1, r3
 8008784:	d118      	bne.n	80087b8 <_strtod_l+0x8d0>
 8008786:	4b2a      	ldr	r3, [pc, #168]	; (8008830 <_strtod_l+0x948>)
 8008788:	459a      	cmp	sl, r3
 800878a:	d102      	bne.n	8008792 <_strtod_l+0x8aa>
 800878c:	3101      	adds	r1, #1
 800878e:	f43f adef 	beq.w	8008370 <_strtod_l+0x488>
 8008792:	4b24      	ldr	r3, [pc, #144]	; (8008824 <_strtod_l+0x93c>)
 8008794:	ea0a 0303 	and.w	r3, sl, r3
 8008798:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800879c:	f04f 0800 	mov.w	r8, #0
 80087a0:	9b04      	ldr	r3, [sp, #16]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d1a2      	bne.n	80086ec <_strtod_l+0x804>
 80087a6:	e5ed      	b.n	8008384 <_strtod_l+0x49c>
 80087a8:	f04f 33ff 	mov.w	r3, #4294967295
 80087ac:	e7e9      	b.n	8008782 <_strtod_l+0x89a>
 80087ae:	4613      	mov	r3, r2
 80087b0:	e7e7      	b.n	8008782 <_strtod_l+0x89a>
 80087b2:	ea53 0308 	orrs.w	r3, r3, r8
 80087b6:	d08a      	beq.n	80086ce <_strtod_l+0x7e6>
 80087b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80087ba:	b1e3      	cbz	r3, 80087f6 <_strtod_l+0x90e>
 80087bc:	ea13 0f0a 	tst.w	r3, sl
 80087c0:	d0ee      	beq.n	80087a0 <_strtod_l+0x8b8>
 80087c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80087c4:	9a04      	ldr	r2, [sp, #16]
 80087c6:	4640      	mov	r0, r8
 80087c8:	4649      	mov	r1, r9
 80087ca:	b1c3      	cbz	r3, 80087fe <_strtod_l+0x916>
 80087cc:	f7ff fb6f 	bl	8007eae <sulp>
 80087d0:	4602      	mov	r2, r0
 80087d2:	460b      	mov	r3, r1
 80087d4:	ec51 0b18 	vmov	r0, r1, d8
 80087d8:	f7f7 fd60 	bl	800029c <__adddf3>
 80087dc:	4680      	mov	r8, r0
 80087de:	4689      	mov	r9, r1
 80087e0:	e7de      	b.n	80087a0 <_strtod_l+0x8b8>
 80087e2:	4013      	ands	r3, r2
 80087e4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80087e8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80087ec:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80087f0:	f04f 38ff 	mov.w	r8, #4294967295
 80087f4:	e7d4      	b.n	80087a0 <_strtod_l+0x8b8>
 80087f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80087f8:	ea13 0f08 	tst.w	r3, r8
 80087fc:	e7e0      	b.n	80087c0 <_strtod_l+0x8d8>
 80087fe:	f7ff fb56 	bl	8007eae <sulp>
 8008802:	4602      	mov	r2, r0
 8008804:	460b      	mov	r3, r1
 8008806:	ec51 0b18 	vmov	r0, r1, d8
 800880a:	f7f7 fd45 	bl	8000298 <__aeabi_dsub>
 800880e:	2200      	movs	r2, #0
 8008810:	2300      	movs	r3, #0
 8008812:	4680      	mov	r8, r0
 8008814:	4689      	mov	r9, r1
 8008816:	f7f8 f95f 	bl	8000ad8 <__aeabi_dcmpeq>
 800881a:	2800      	cmp	r0, #0
 800881c:	d0c0      	beq.n	80087a0 <_strtod_l+0x8b8>
 800881e:	e618      	b.n	8008452 <_strtod_l+0x56a>
 8008820:	fffffc02 	.word	0xfffffc02
 8008824:	7ff00000 	.word	0x7ff00000
 8008828:	39500000 	.word	0x39500000
 800882c:	000fffff 	.word	0x000fffff
 8008830:	7fefffff 	.word	0x7fefffff
 8008834:	0800aa18 	.word	0x0800aa18
 8008838:	4659      	mov	r1, fp
 800883a:	4628      	mov	r0, r5
 800883c:	f7ff fac0 	bl	8007dc0 <__ratio>
 8008840:	ec57 6b10 	vmov	r6, r7, d0
 8008844:	ee10 0a10 	vmov	r0, s0
 8008848:	2200      	movs	r2, #0
 800884a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800884e:	4639      	mov	r1, r7
 8008850:	f7f8 f956 	bl	8000b00 <__aeabi_dcmple>
 8008854:	2800      	cmp	r0, #0
 8008856:	d071      	beq.n	800893c <_strtod_l+0xa54>
 8008858:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800885a:	2b00      	cmp	r3, #0
 800885c:	d17c      	bne.n	8008958 <_strtod_l+0xa70>
 800885e:	f1b8 0f00 	cmp.w	r8, #0
 8008862:	d15a      	bne.n	800891a <_strtod_l+0xa32>
 8008864:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008868:	2b00      	cmp	r3, #0
 800886a:	d15d      	bne.n	8008928 <_strtod_l+0xa40>
 800886c:	4b90      	ldr	r3, [pc, #576]	; (8008ab0 <_strtod_l+0xbc8>)
 800886e:	2200      	movs	r2, #0
 8008870:	4630      	mov	r0, r6
 8008872:	4639      	mov	r1, r7
 8008874:	f7f8 f93a 	bl	8000aec <__aeabi_dcmplt>
 8008878:	2800      	cmp	r0, #0
 800887a:	d15c      	bne.n	8008936 <_strtod_l+0xa4e>
 800887c:	4630      	mov	r0, r6
 800887e:	4639      	mov	r1, r7
 8008880:	4b8c      	ldr	r3, [pc, #560]	; (8008ab4 <_strtod_l+0xbcc>)
 8008882:	2200      	movs	r2, #0
 8008884:	f7f7 fec0 	bl	8000608 <__aeabi_dmul>
 8008888:	4606      	mov	r6, r0
 800888a:	460f      	mov	r7, r1
 800888c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8008890:	9606      	str	r6, [sp, #24]
 8008892:	9307      	str	r3, [sp, #28]
 8008894:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008898:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800889c:	4b86      	ldr	r3, [pc, #536]	; (8008ab8 <_strtod_l+0xbd0>)
 800889e:	ea0a 0303 	and.w	r3, sl, r3
 80088a2:	930d      	str	r3, [sp, #52]	; 0x34
 80088a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80088a6:	4b85      	ldr	r3, [pc, #532]	; (8008abc <_strtod_l+0xbd4>)
 80088a8:	429a      	cmp	r2, r3
 80088aa:	f040 8090 	bne.w	80089ce <_strtod_l+0xae6>
 80088ae:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 80088b2:	ec49 8b10 	vmov	d0, r8, r9
 80088b6:	f7ff f9b9 	bl	8007c2c <__ulp>
 80088ba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80088be:	ec51 0b10 	vmov	r0, r1, d0
 80088c2:	f7f7 fea1 	bl	8000608 <__aeabi_dmul>
 80088c6:	4642      	mov	r2, r8
 80088c8:	464b      	mov	r3, r9
 80088ca:	f7f7 fce7 	bl	800029c <__adddf3>
 80088ce:	460b      	mov	r3, r1
 80088d0:	4979      	ldr	r1, [pc, #484]	; (8008ab8 <_strtod_l+0xbd0>)
 80088d2:	4a7b      	ldr	r2, [pc, #492]	; (8008ac0 <_strtod_l+0xbd8>)
 80088d4:	4019      	ands	r1, r3
 80088d6:	4291      	cmp	r1, r2
 80088d8:	4680      	mov	r8, r0
 80088da:	d944      	bls.n	8008966 <_strtod_l+0xa7e>
 80088dc:	ee18 2a90 	vmov	r2, s17
 80088e0:	4b78      	ldr	r3, [pc, #480]	; (8008ac4 <_strtod_l+0xbdc>)
 80088e2:	429a      	cmp	r2, r3
 80088e4:	d104      	bne.n	80088f0 <_strtod_l+0xa08>
 80088e6:	ee18 3a10 	vmov	r3, s16
 80088ea:	3301      	adds	r3, #1
 80088ec:	f43f ad40 	beq.w	8008370 <_strtod_l+0x488>
 80088f0:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8008ac4 <_strtod_l+0xbdc>
 80088f4:	f04f 38ff 	mov.w	r8, #4294967295
 80088f8:	9916      	ldr	r1, [sp, #88]	; 0x58
 80088fa:	4620      	mov	r0, r4
 80088fc:	f7fe fe6a 	bl	80075d4 <_Bfree>
 8008900:	9905      	ldr	r1, [sp, #20]
 8008902:	4620      	mov	r0, r4
 8008904:	f7fe fe66 	bl	80075d4 <_Bfree>
 8008908:	4659      	mov	r1, fp
 800890a:	4620      	mov	r0, r4
 800890c:	f7fe fe62 	bl	80075d4 <_Bfree>
 8008910:	4629      	mov	r1, r5
 8008912:	4620      	mov	r0, r4
 8008914:	f7fe fe5e 	bl	80075d4 <_Bfree>
 8008918:	e609      	b.n	800852e <_strtod_l+0x646>
 800891a:	f1b8 0f01 	cmp.w	r8, #1
 800891e:	d103      	bne.n	8008928 <_strtod_l+0xa40>
 8008920:	f1b9 0f00 	cmp.w	r9, #0
 8008924:	f43f ad95 	beq.w	8008452 <_strtod_l+0x56a>
 8008928:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8008a80 <_strtod_l+0xb98>
 800892c:	4f60      	ldr	r7, [pc, #384]	; (8008ab0 <_strtod_l+0xbc8>)
 800892e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008932:	2600      	movs	r6, #0
 8008934:	e7ae      	b.n	8008894 <_strtod_l+0x9ac>
 8008936:	4f5f      	ldr	r7, [pc, #380]	; (8008ab4 <_strtod_l+0xbcc>)
 8008938:	2600      	movs	r6, #0
 800893a:	e7a7      	b.n	800888c <_strtod_l+0x9a4>
 800893c:	4b5d      	ldr	r3, [pc, #372]	; (8008ab4 <_strtod_l+0xbcc>)
 800893e:	4630      	mov	r0, r6
 8008940:	4639      	mov	r1, r7
 8008942:	2200      	movs	r2, #0
 8008944:	f7f7 fe60 	bl	8000608 <__aeabi_dmul>
 8008948:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800894a:	4606      	mov	r6, r0
 800894c:	460f      	mov	r7, r1
 800894e:	2b00      	cmp	r3, #0
 8008950:	d09c      	beq.n	800888c <_strtod_l+0x9a4>
 8008952:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008956:	e79d      	b.n	8008894 <_strtod_l+0x9ac>
 8008958:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8008a88 <_strtod_l+0xba0>
 800895c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008960:	ec57 6b17 	vmov	r6, r7, d7
 8008964:	e796      	b.n	8008894 <_strtod_l+0x9ac>
 8008966:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800896a:	9b04      	ldr	r3, [sp, #16]
 800896c:	46ca      	mov	sl, r9
 800896e:	2b00      	cmp	r3, #0
 8008970:	d1c2      	bne.n	80088f8 <_strtod_l+0xa10>
 8008972:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008976:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008978:	0d1b      	lsrs	r3, r3, #20
 800897a:	051b      	lsls	r3, r3, #20
 800897c:	429a      	cmp	r2, r3
 800897e:	d1bb      	bne.n	80088f8 <_strtod_l+0xa10>
 8008980:	4630      	mov	r0, r6
 8008982:	4639      	mov	r1, r7
 8008984:	f7f8 fafe 	bl	8000f84 <__aeabi_d2lz>
 8008988:	f7f7 fe10 	bl	80005ac <__aeabi_l2d>
 800898c:	4602      	mov	r2, r0
 800898e:	460b      	mov	r3, r1
 8008990:	4630      	mov	r0, r6
 8008992:	4639      	mov	r1, r7
 8008994:	f7f7 fc80 	bl	8000298 <__aeabi_dsub>
 8008998:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800899a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800899e:	ea43 0308 	orr.w	r3, r3, r8
 80089a2:	4313      	orrs	r3, r2
 80089a4:	4606      	mov	r6, r0
 80089a6:	460f      	mov	r7, r1
 80089a8:	d054      	beq.n	8008a54 <_strtod_l+0xb6c>
 80089aa:	a339      	add	r3, pc, #228	; (adr r3, 8008a90 <_strtod_l+0xba8>)
 80089ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089b0:	f7f8 f89c 	bl	8000aec <__aeabi_dcmplt>
 80089b4:	2800      	cmp	r0, #0
 80089b6:	f47f ace5 	bne.w	8008384 <_strtod_l+0x49c>
 80089ba:	a337      	add	r3, pc, #220	; (adr r3, 8008a98 <_strtod_l+0xbb0>)
 80089bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089c0:	4630      	mov	r0, r6
 80089c2:	4639      	mov	r1, r7
 80089c4:	f7f8 f8b0 	bl	8000b28 <__aeabi_dcmpgt>
 80089c8:	2800      	cmp	r0, #0
 80089ca:	d095      	beq.n	80088f8 <_strtod_l+0xa10>
 80089cc:	e4da      	b.n	8008384 <_strtod_l+0x49c>
 80089ce:	9b04      	ldr	r3, [sp, #16]
 80089d0:	b333      	cbz	r3, 8008a20 <_strtod_l+0xb38>
 80089d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80089d4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80089d8:	d822      	bhi.n	8008a20 <_strtod_l+0xb38>
 80089da:	a331      	add	r3, pc, #196	; (adr r3, 8008aa0 <_strtod_l+0xbb8>)
 80089dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089e0:	4630      	mov	r0, r6
 80089e2:	4639      	mov	r1, r7
 80089e4:	f7f8 f88c 	bl	8000b00 <__aeabi_dcmple>
 80089e8:	b1a0      	cbz	r0, 8008a14 <_strtod_l+0xb2c>
 80089ea:	4639      	mov	r1, r7
 80089ec:	4630      	mov	r0, r6
 80089ee:	f7f8 f8e3 	bl	8000bb8 <__aeabi_d2uiz>
 80089f2:	2801      	cmp	r0, #1
 80089f4:	bf38      	it	cc
 80089f6:	2001      	movcc	r0, #1
 80089f8:	f7f7 fd8c 	bl	8000514 <__aeabi_ui2d>
 80089fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089fe:	4606      	mov	r6, r0
 8008a00:	460f      	mov	r7, r1
 8008a02:	bb23      	cbnz	r3, 8008a4e <_strtod_l+0xb66>
 8008a04:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008a08:	9010      	str	r0, [sp, #64]	; 0x40
 8008a0a:	9311      	str	r3, [sp, #68]	; 0x44
 8008a0c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008a10:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8008a14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008a16:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008a18:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008a1c:	1a9b      	subs	r3, r3, r2
 8008a1e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008a20:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008a24:	eeb0 0a48 	vmov.f32	s0, s16
 8008a28:	eef0 0a68 	vmov.f32	s1, s17
 8008a2c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8008a30:	f7ff f8fc 	bl	8007c2c <__ulp>
 8008a34:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008a38:	ec53 2b10 	vmov	r2, r3, d0
 8008a3c:	f7f7 fde4 	bl	8000608 <__aeabi_dmul>
 8008a40:	ec53 2b18 	vmov	r2, r3, d8
 8008a44:	f7f7 fc2a 	bl	800029c <__adddf3>
 8008a48:	4680      	mov	r8, r0
 8008a4a:	4689      	mov	r9, r1
 8008a4c:	e78d      	b.n	800896a <_strtod_l+0xa82>
 8008a4e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8008a52:	e7db      	b.n	8008a0c <_strtod_l+0xb24>
 8008a54:	a314      	add	r3, pc, #80	; (adr r3, 8008aa8 <_strtod_l+0xbc0>)
 8008a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a5a:	f7f8 f847 	bl	8000aec <__aeabi_dcmplt>
 8008a5e:	e7b3      	b.n	80089c8 <_strtod_l+0xae0>
 8008a60:	2300      	movs	r3, #0
 8008a62:	930a      	str	r3, [sp, #40]	; 0x28
 8008a64:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008a66:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008a68:	6013      	str	r3, [r2, #0]
 8008a6a:	f7ff ba7c 	b.w	8007f66 <_strtod_l+0x7e>
 8008a6e:	2a65      	cmp	r2, #101	; 0x65
 8008a70:	f43f ab75 	beq.w	800815e <_strtod_l+0x276>
 8008a74:	2a45      	cmp	r2, #69	; 0x45
 8008a76:	f43f ab72 	beq.w	800815e <_strtod_l+0x276>
 8008a7a:	2301      	movs	r3, #1
 8008a7c:	f7ff bbaa 	b.w	80081d4 <_strtod_l+0x2ec>
 8008a80:	00000000 	.word	0x00000000
 8008a84:	bff00000 	.word	0xbff00000
 8008a88:	00000000 	.word	0x00000000
 8008a8c:	3ff00000 	.word	0x3ff00000
 8008a90:	94a03595 	.word	0x94a03595
 8008a94:	3fdfffff 	.word	0x3fdfffff
 8008a98:	35afe535 	.word	0x35afe535
 8008a9c:	3fe00000 	.word	0x3fe00000
 8008aa0:	ffc00000 	.word	0xffc00000
 8008aa4:	41dfffff 	.word	0x41dfffff
 8008aa8:	94a03595 	.word	0x94a03595
 8008aac:	3fcfffff 	.word	0x3fcfffff
 8008ab0:	3ff00000 	.word	0x3ff00000
 8008ab4:	3fe00000 	.word	0x3fe00000
 8008ab8:	7ff00000 	.word	0x7ff00000
 8008abc:	7fe00000 	.word	0x7fe00000
 8008ac0:	7c9fffff 	.word	0x7c9fffff
 8008ac4:	7fefffff 	.word	0x7fefffff

08008ac8 <_strtod_r>:
 8008ac8:	4b01      	ldr	r3, [pc, #4]	; (8008ad0 <_strtod_r+0x8>)
 8008aca:	f7ff ba0d 	b.w	8007ee8 <_strtod_l>
 8008ace:	bf00      	nop
 8008ad0:	20000068 	.word	0x20000068

08008ad4 <_strtol_l.constprop.0>:
 8008ad4:	2b01      	cmp	r3, #1
 8008ad6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ada:	d001      	beq.n	8008ae0 <_strtol_l.constprop.0+0xc>
 8008adc:	2b24      	cmp	r3, #36	; 0x24
 8008ade:	d906      	bls.n	8008aee <_strtol_l.constprop.0+0x1a>
 8008ae0:	f7fd fd8a 	bl	80065f8 <__errno>
 8008ae4:	2316      	movs	r3, #22
 8008ae6:	6003      	str	r3, [r0, #0]
 8008ae8:	2000      	movs	r0, #0
 8008aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008aee:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008bd4 <_strtol_l.constprop.0+0x100>
 8008af2:	460d      	mov	r5, r1
 8008af4:	462e      	mov	r6, r5
 8008af6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008afa:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8008afe:	f017 0708 	ands.w	r7, r7, #8
 8008b02:	d1f7      	bne.n	8008af4 <_strtol_l.constprop.0+0x20>
 8008b04:	2c2d      	cmp	r4, #45	; 0x2d
 8008b06:	d132      	bne.n	8008b6e <_strtol_l.constprop.0+0x9a>
 8008b08:	782c      	ldrb	r4, [r5, #0]
 8008b0a:	2701      	movs	r7, #1
 8008b0c:	1cb5      	adds	r5, r6, #2
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d05b      	beq.n	8008bca <_strtol_l.constprop.0+0xf6>
 8008b12:	2b10      	cmp	r3, #16
 8008b14:	d109      	bne.n	8008b2a <_strtol_l.constprop.0+0x56>
 8008b16:	2c30      	cmp	r4, #48	; 0x30
 8008b18:	d107      	bne.n	8008b2a <_strtol_l.constprop.0+0x56>
 8008b1a:	782c      	ldrb	r4, [r5, #0]
 8008b1c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008b20:	2c58      	cmp	r4, #88	; 0x58
 8008b22:	d14d      	bne.n	8008bc0 <_strtol_l.constprop.0+0xec>
 8008b24:	786c      	ldrb	r4, [r5, #1]
 8008b26:	2310      	movs	r3, #16
 8008b28:	3502      	adds	r5, #2
 8008b2a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008b2e:	f108 38ff 	add.w	r8, r8, #4294967295
 8008b32:	f04f 0e00 	mov.w	lr, #0
 8008b36:	fbb8 f9f3 	udiv	r9, r8, r3
 8008b3a:	4676      	mov	r6, lr
 8008b3c:	fb03 8a19 	mls	sl, r3, r9, r8
 8008b40:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008b44:	f1bc 0f09 	cmp.w	ip, #9
 8008b48:	d816      	bhi.n	8008b78 <_strtol_l.constprop.0+0xa4>
 8008b4a:	4664      	mov	r4, ip
 8008b4c:	42a3      	cmp	r3, r4
 8008b4e:	dd24      	ble.n	8008b9a <_strtol_l.constprop.0+0xc6>
 8008b50:	f1be 3fff 	cmp.w	lr, #4294967295
 8008b54:	d008      	beq.n	8008b68 <_strtol_l.constprop.0+0x94>
 8008b56:	45b1      	cmp	r9, r6
 8008b58:	d31c      	bcc.n	8008b94 <_strtol_l.constprop.0+0xc0>
 8008b5a:	d101      	bne.n	8008b60 <_strtol_l.constprop.0+0x8c>
 8008b5c:	45a2      	cmp	sl, r4
 8008b5e:	db19      	blt.n	8008b94 <_strtol_l.constprop.0+0xc0>
 8008b60:	fb06 4603 	mla	r6, r6, r3, r4
 8008b64:	f04f 0e01 	mov.w	lr, #1
 8008b68:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008b6c:	e7e8      	b.n	8008b40 <_strtol_l.constprop.0+0x6c>
 8008b6e:	2c2b      	cmp	r4, #43	; 0x2b
 8008b70:	bf04      	itt	eq
 8008b72:	782c      	ldrbeq	r4, [r5, #0]
 8008b74:	1cb5      	addeq	r5, r6, #2
 8008b76:	e7ca      	b.n	8008b0e <_strtol_l.constprop.0+0x3a>
 8008b78:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8008b7c:	f1bc 0f19 	cmp.w	ip, #25
 8008b80:	d801      	bhi.n	8008b86 <_strtol_l.constprop.0+0xb2>
 8008b82:	3c37      	subs	r4, #55	; 0x37
 8008b84:	e7e2      	b.n	8008b4c <_strtol_l.constprop.0+0x78>
 8008b86:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8008b8a:	f1bc 0f19 	cmp.w	ip, #25
 8008b8e:	d804      	bhi.n	8008b9a <_strtol_l.constprop.0+0xc6>
 8008b90:	3c57      	subs	r4, #87	; 0x57
 8008b92:	e7db      	b.n	8008b4c <_strtol_l.constprop.0+0x78>
 8008b94:	f04f 3eff 	mov.w	lr, #4294967295
 8008b98:	e7e6      	b.n	8008b68 <_strtol_l.constprop.0+0x94>
 8008b9a:	f1be 3fff 	cmp.w	lr, #4294967295
 8008b9e:	d105      	bne.n	8008bac <_strtol_l.constprop.0+0xd8>
 8008ba0:	2322      	movs	r3, #34	; 0x22
 8008ba2:	6003      	str	r3, [r0, #0]
 8008ba4:	4646      	mov	r6, r8
 8008ba6:	b942      	cbnz	r2, 8008bba <_strtol_l.constprop.0+0xe6>
 8008ba8:	4630      	mov	r0, r6
 8008baa:	e79e      	b.n	8008aea <_strtol_l.constprop.0+0x16>
 8008bac:	b107      	cbz	r7, 8008bb0 <_strtol_l.constprop.0+0xdc>
 8008bae:	4276      	negs	r6, r6
 8008bb0:	2a00      	cmp	r2, #0
 8008bb2:	d0f9      	beq.n	8008ba8 <_strtol_l.constprop.0+0xd4>
 8008bb4:	f1be 0f00 	cmp.w	lr, #0
 8008bb8:	d000      	beq.n	8008bbc <_strtol_l.constprop.0+0xe8>
 8008bba:	1e69      	subs	r1, r5, #1
 8008bbc:	6011      	str	r1, [r2, #0]
 8008bbe:	e7f3      	b.n	8008ba8 <_strtol_l.constprop.0+0xd4>
 8008bc0:	2430      	movs	r4, #48	; 0x30
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d1b1      	bne.n	8008b2a <_strtol_l.constprop.0+0x56>
 8008bc6:	2308      	movs	r3, #8
 8008bc8:	e7af      	b.n	8008b2a <_strtol_l.constprop.0+0x56>
 8008bca:	2c30      	cmp	r4, #48	; 0x30
 8008bcc:	d0a5      	beq.n	8008b1a <_strtol_l.constprop.0+0x46>
 8008bce:	230a      	movs	r3, #10
 8008bd0:	e7ab      	b.n	8008b2a <_strtol_l.constprop.0+0x56>
 8008bd2:	bf00      	nop
 8008bd4:	0800aa41 	.word	0x0800aa41

08008bd8 <_strtol_r>:
 8008bd8:	f7ff bf7c 	b.w	8008ad4 <_strtol_l.constprop.0>

08008bdc <__ssputs_r>:
 8008bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008be0:	688e      	ldr	r6, [r1, #8]
 8008be2:	461f      	mov	r7, r3
 8008be4:	42be      	cmp	r6, r7
 8008be6:	680b      	ldr	r3, [r1, #0]
 8008be8:	4682      	mov	sl, r0
 8008bea:	460c      	mov	r4, r1
 8008bec:	4690      	mov	r8, r2
 8008bee:	d82c      	bhi.n	8008c4a <__ssputs_r+0x6e>
 8008bf0:	898a      	ldrh	r2, [r1, #12]
 8008bf2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008bf6:	d026      	beq.n	8008c46 <__ssputs_r+0x6a>
 8008bf8:	6965      	ldr	r5, [r4, #20]
 8008bfa:	6909      	ldr	r1, [r1, #16]
 8008bfc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008c00:	eba3 0901 	sub.w	r9, r3, r1
 8008c04:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008c08:	1c7b      	adds	r3, r7, #1
 8008c0a:	444b      	add	r3, r9
 8008c0c:	106d      	asrs	r5, r5, #1
 8008c0e:	429d      	cmp	r5, r3
 8008c10:	bf38      	it	cc
 8008c12:	461d      	movcc	r5, r3
 8008c14:	0553      	lsls	r3, r2, #21
 8008c16:	d527      	bpl.n	8008c68 <__ssputs_r+0x8c>
 8008c18:	4629      	mov	r1, r5
 8008c1a:	f7fe fc0f 	bl	800743c <_malloc_r>
 8008c1e:	4606      	mov	r6, r0
 8008c20:	b360      	cbz	r0, 8008c7c <__ssputs_r+0xa0>
 8008c22:	6921      	ldr	r1, [r4, #16]
 8008c24:	464a      	mov	r2, r9
 8008c26:	f000 fbe3 	bl	80093f0 <memcpy>
 8008c2a:	89a3      	ldrh	r3, [r4, #12]
 8008c2c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008c30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c34:	81a3      	strh	r3, [r4, #12]
 8008c36:	6126      	str	r6, [r4, #16]
 8008c38:	6165      	str	r5, [r4, #20]
 8008c3a:	444e      	add	r6, r9
 8008c3c:	eba5 0509 	sub.w	r5, r5, r9
 8008c40:	6026      	str	r6, [r4, #0]
 8008c42:	60a5      	str	r5, [r4, #8]
 8008c44:	463e      	mov	r6, r7
 8008c46:	42be      	cmp	r6, r7
 8008c48:	d900      	bls.n	8008c4c <__ssputs_r+0x70>
 8008c4a:	463e      	mov	r6, r7
 8008c4c:	6820      	ldr	r0, [r4, #0]
 8008c4e:	4632      	mov	r2, r6
 8008c50:	4641      	mov	r1, r8
 8008c52:	f000 fb6f 	bl	8009334 <memmove>
 8008c56:	68a3      	ldr	r3, [r4, #8]
 8008c58:	1b9b      	subs	r3, r3, r6
 8008c5a:	60a3      	str	r3, [r4, #8]
 8008c5c:	6823      	ldr	r3, [r4, #0]
 8008c5e:	4433      	add	r3, r6
 8008c60:	6023      	str	r3, [r4, #0]
 8008c62:	2000      	movs	r0, #0
 8008c64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c68:	462a      	mov	r2, r5
 8008c6a:	f000 ff76 	bl	8009b5a <_realloc_r>
 8008c6e:	4606      	mov	r6, r0
 8008c70:	2800      	cmp	r0, #0
 8008c72:	d1e0      	bne.n	8008c36 <__ssputs_r+0x5a>
 8008c74:	6921      	ldr	r1, [r4, #16]
 8008c76:	4650      	mov	r0, sl
 8008c78:	f7fe fb6c 	bl	8007354 <_free_r>
 8008c7c:	230c      	movs	r3, #12
 8008c7e:	f8ca 3000 	str.w	r3, [sl]
 8008c82:	89a3      	ldrh	r3, [r4, #12]
 8008c84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c88:	81a3      	strh	r3, [r4, #12]
 8008c8a:	f04f 30ff 	mov.w	r0, #4294967295
 8008c8e:	e7e9      	b.n	8008c64 <__ssputs_r+0x88>

08008c90 <_svfiprintf_r>:
 8008c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c94:	4698      	mov	r8, r3
 8008c96:	898b      	ldrh	r3, [r1, #12]
 8008c98:	061b      	lsls	r3, r3, #24
 8008c9a:	b09d      	sub	sp, #116	; 0x74
 8008c9c:	4607      	mov	r7, r0
 8008c9e:	460d      	mov	r5, r1
 8008ca0:	4614      	mov	r4, r2
 8008ca2:	d50e      	bpl.n	8008cc2 <_svfiprintf_r+0x32>
 8008ca4:	690b      	ldr	r3, [r1, #16]
 8008ca6:	b963      	cbnz	r3, 8008cc2 <_svfiprintf_r+0x32>
 8008ca8:	2140      	movs	r1, #64	; 0x40
 8008caa:	f7fe fbc7 	bl	800743c <_malloc_r>
 8008cae:	6028      	str	r0, [r5, #0]
 8008cb0:	6128      	str	r0, [r5, #16]
 8008cb2:	b920      	cbnz	r0, 8008cbe <_svfiprintf_r+0x2e>
 8008cb4:	230c      	movs	r3, #12
 8008cb6:	603b      	str	r3, [r7, #0]
 8008cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8008cbc:	e0d0      	b.n	8008e60 <_svfiprintf_r+0x1d0>
 8008cbe:	2340      	movs	r3, #64	; 0x40
 8008cc0:	616b      	str	r3, [r5, #20]
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	9309      	str	r3, [sp, #36]	; 0x24
 8008cc6:	2320      	movs	r3, #32
 8008cc8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008ccc:	f8cd 800c 	str.w	r8, [sp, #12]
 8008cd0:	2330      	movs	r3, #48	; 0x30
 8008cd2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008e78 <_svfiprintf_r+0x1e8>
 8008cd6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008cda:	f04f 0901 	mov.w	r9, #1
 8008cde:	4623      	mov	r3, r4
 8008ce0:	469a      	mov	sl, r3
 8008ce2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ce6:	b10a      	cbz	r2, 8008cec <_svfiprintf_r+0x5c>
 8008ce8:	2a25      	cmp	r2, #37	; 0x25
 8008cea:	d1f9      	bne.n	8008ce0 <_svfiprintf_r+0x50>
 8008cec:	ebba 0b04 	subs.w	fp, sl, r4
 8008cf0:	d00b      	beq.n	8008d0a <_svfiprintf_r+0x7a>
 8008cf2:	465b      	mov	r3, fp
 8008cf4:	4622      	mov	r2, r4
 8008cf6:	4629      	mov	r1, r5
 8008cf8:	4638      	mov	r0, r7
 8008cfa:	f7ff ff6f 	bl	8008bdc <__ssputs_r>
 8008cfe:	3001      	adds	r0, #1
 8008d00:	f000 80a9 	beq.w	8008e56 <_svfiprintf_r+0x1c6>
 8008d04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d06:	445a      	add	r2, fp
 8008d08:	9209      	str	r2, [sp, #36]	; 0x24
 8008d0a:	f89a 3000 	ldrb.w	r3, [sl]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	f000 80a1 	beq.w	8008e56 <_svfiprintf_r+0x1c6>
 8008d14:	2300      	movs	r3, #0
 8008d16:	f04f 32ff 	mov.w	r2, #4294967295
 8008d1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d1e:	f10a 0a01 	add.w	sl, sl, #1
 8008d22:	9304      	str	r3, [sp, #16]
 8008d24:	9307      	str	r3, [sp, #28]
 8008d26:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008d2a:	931a      	str	r3, [sp, #104]	; 0x68
 8008d2c:	4654      	mov	r4, sl
 8008d2e:	2205      	movs	r2, #5
 8008d30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d34:	4850      	ldr	r0, [pc, #320]	; (8008e78 <_svfiprintf_r+0x1e8>)
 8008d36:	f7f7 fa53 	bl	80001e0 <memchr>
 8008d3a:	9a04      	ldr	r2, [sp, #16]
 8008d3c:	b9d8      	cbnz	r0, 8008d76 <_svfiprintf_r+0xe6>
 8008d3e:	06d0      	lsls	r0, r2, #27
 8008d40:	bf44      	itt	mi
 8008d42:	2320      	movmi	r3, #32
 8008d44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d48:	0711      	lsls	r1, r2, #28
 8008d4a:	bf44      	itt	mi
 8008d4c:	232b      	movmi	r3, #43	; 0x2b
 8008d4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d52:	f89a 3000 	ldrb.w	r3, [sl]
 8008d56:	2b2a      	cmp	r3, #42	; 0x2a
 8008d58:	d015      	beq.n	8008d86 <_svfiprintf_r+0xf6>
 8008d5a:	9a07      	ldr	r2, [sp, #28]
 8008d5c:	4654      	mov	r4, sl
 8008d5e:	2000      	movs	r0, #0
 8008d60:	f04f 0c0a 	mov.w	ip, #10
 8008d64:	4621      	mov	r1, r4
 8008d66:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d6a:	3b30      	subs	r3, #48	; 0x30
 8008d6c:	2b09      	cmp	r3, #9
 8008d6e:	d94d      	bls.n	8008e0c <_svfiprintf_r+0x17c>
 8008d70:	b1b0      	cbz	r0, 8008da0 <_svfiprintf_r+0x110>
 8008d72:	9207      	str	r2, [sp, #28]
 8008d74:	e014      	b.n	8008da0 <_svfiprintf_r+0x110>
 8008d76:	eba0 0308 	sub.w	r3, r0, r8
 8008d7a:	fa09 f303 	lsl.w	r3, r9, r3
 8008d7e:	4313      	orrs	r3, r2
 8008d80:	9304      	str	r3, [sp, #16]
 8008d82:	46a2      	mov	sl, r4
 8008d84:	e7d2      	b.n	8008d2c <_svfiprintf_r+0x9c>
 8008d86:	9b03      	ldr	r3, [sp, #12]
 8008d88:	1d19      	adds	r1, r3, #4
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	9103      	str	r1, [sp, #12]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	bfbb      	ittet	lt
 8008d92:	425b      	neglt	r3, r3
 8008d94:	f042 0202 	orrlt.w	r2, r2, #2
 8008d98:	9307      	strge	r3, [sp, #28]
 8008d9a:	9307      	strlt	r3, [sp, #28]
 8008d9c:	bfb8      	it	lt
 8008d9e:	9204      	strlt	r2, [sp, #16]
 8008da0:	7823      	ldrb	r3, [r4, #0]
 8008da2:	2b2e      	cmp	r3, #46	; 0x2e
 8008da4:	d10c      	bne.n	8008dc0 <_svfiprintf_r+0x130>
 8008da6:	7863      	ldrb	r3, [r4, #1]
 8008da8:	2b2a      	cmp	r3, #42	; 0x2a
 8008daa:	d134      	bne.n	8008e16 <_svfiprintf_r+0x186>
 8008dac:	9b03      	ldr	r3, [sp, #12]
 8008dae:	1d1a      	adds	r2, r3, #4
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	9203      	str	r2, [sp, #12]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	bfb8      	it	lt
 8008db8:	f04f 33ff 	movlt.w	r3, #4294967295
 8008dbc:	3402      	adds	r4, #2
 8008dbe:	9305      	str	r3, [sp, #20]
 8008dc0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008e88 <_svfiprintf_r+0x1f8>
 8008dc4:	7821      	ldrb	r1, [r4, #0]
 8008dc6:	2203      	movs	r2, #3
 8008dc8:	4650      	mov	r0, sl
 8008dca:	f7f7 fa09 	bl	80001e0 <memchr>
 8008dce:	b138      	cbz	r0, 8008de0 <_svfiprintf_r+0x150>
 8008dd0:	9b04      	ldr	r3, [sp, #16]
 8008dd2:	eba0 000a 	sub.w	r0, r0, sl
 8008dd6:	2240      	movs	r2, #64	; 0x40
 8008dd8:	4082      	lsls	r2, r0
 8008dda:	4313      	orrs	r3, r2
 8008ddc:	3401      	adds	r4, #1
 8008dde:	9304      	str	r3, [sp, #16]
 8008de0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008de4:	4825      	ldr	r0, [pc, #148]	; (8008e7c <_svfiprintf_r+0x1ec>)
 8008de6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008dea:	2206      	movs	r2, #6
 8008dec:	f7f7 f9f8 	bl	80001e0 <memchr>
 8008df0:	2800      	cmp	r0, #0
 8008df2:	d038      	beq.n	8008e66 <_svfiprintf_r+0x1d6>
 8008df4:	4b22      	ldr	r3, [pc, #136]	; (8008e80 <_svfiprintf_r+0x1f0>)
 8008df6:	bb1b      	cbnz	r3, 8008e40 <_svfiprintf_r+0x1b0>
 8008df8:	9b03      	ldr	r3, [sp, #12]
 8008dfa:	3307      	adds	r3, #7
 8008dfc:	f023 0307 	bic.w	r3, r3, #7
 8008e00:	3308      	adds	r3, #8
 8008e02:	9303      	str	r3, [sp, #12]
 8008e04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e06:	4433      	add	r3, r6
 8008e08:	9309      	str	r3, [sp, #36]	; 0x24
 8008e0a:	e768      	b.n	8008cde <_svfiprintf_r+0x4e>
 8008e0c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e10:	460c      	mov	r4, r1
 8008e12:	2001      	movs	r0, #1
 8008e14:	e7a6      	b.n	8008d64 <_svfiprintf_r+0xd4>
 8008e16:	2300      	movs	r3, #0
 8008e18:	3401      	adds	r4, #1
 8008e1a:	9305      	str	r3, [sp, #20]
 8008e1c:	4619      	mov	r1, r3
 8008e1e:	f04f 0c0a 	mov.w	ip, #10
 8008e22:	4620      	mov	r0, r4
 8008e24:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e28:	3a30      	subs	r2, #48	; 0x30
 8008e2a:	2a09      	cmp	r2, #9
 8008e2c:	d903      	bls.n	8008e36 <_svfiprintf_r+0x1a6>
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d0c6      	beq.n	8008dc0 <_svfiprintf_r+0x130>
 8008e32:	9105      	str	r1, [sp, #20]
 8008e34:	e7c4      	b.n	8008dc0 <_svfiprintf_r+0x130>
 8008e36:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e3a:	4604      	mov	r4, r0
 8008e3c:	2301      	movs	r3, #1
 8008e3e:	e7f0      	b.n	8008e22 <_svfiprintf_r+0x192>
 8008e40:	ab03      	add	r3, sp, #12
 8008e42:	9300      	str	r3, [sp, #0]
 8008e44:	462a      	mov	r2, r5
 8008e46:	4b0f      	ldr	r3, [pc, #60]	; (8008e84 <_svfiprintf_r+0x1f4>)
 8008e48:	a904      	add	r1, sp, #16
 8008e4a:	4638      	mov	r0, r7
 8008e4c:	f7fc fb84 	bl	8005558 <_printf_float>
 8008e50:	1c42      	adds	r2, r0, #1
 8008e52:	4606      	mov	r6, r0
 8008e54:	d1d6      	bne.n	8008e04 <_svfiprintf_r+0x174>
 8008e56:	89ab      	ldrh	r3, [r5, #12]
 8008e58:	065b      	lsls	r3, r3, #25
 8008e5a:	f53f af2d 	bmi.w	8008cb8 <_svfiprintf_r+0x28>
 8008e5e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e60:	b01d      	add	sp, #116	; 0x74
 8008e62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e66:	ab03      	add	r3, sp, #12
 8008e68:	9300      	str	r3, [sp, #0]
 8008e6a:	462a      	mov	r2, r5
 8008e6c:	4b05      	ldr	r3, [pc, #20]	; (8008e84 <_svfiprintf_r+0x1f4>)
 8008e6e:	a904      	add	r1, sp, #16
 8008e70:	4638      	mov	r0, r7
 8008e72:	f7fc fe15 	bl	8005aa0 <_printf_i>
 8008e76:	e7eb      	b.n	8008e50 <_svfiprintf_r+0x1c0>
 8008e78:	0800ab41 	.word	0x0800ab41
 8008e7c:	0800ab4b 	.word	0x0800ab4b
 8008e80:	08005559 	.word	0x08005559
 8008e84:	08008bdd 	.word	0x08008bdd
 8008e88:	0800ab47 	.word	0x0800ab47

08008e8c <__sfputc_r>:
 8008e8c:	6893      	ldr	r3, [r2, #8]
 8008e8e:	3b01      	subs	r3, #1
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	b410      	push	{r4}
 8008e94:	6093      	str	r3, [r2, #8]
 8008e96:	da08      	bge.n	8008eaa <__sfputc_r+0x1e>
 8008e98:	6994      	ldr	r4, [r2, #24]
 8008e9a:	42a3      	cmp	r3, r4
 8008e9c:	db01      	blt.n	8008ea2 <__sfputc_r+0x16>
 8008e9e:	290a      	cmp	r1, #10
 8008ea0:	d103      	bne.n	8008eaa <__sfputc_r+0x1e>
 8008ea2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ea6:	f7fd bac0 	b.w	800642a <__swbuf_r>
 8008eaa:	6813      	ldr	r3, [r2, #0]
 8008eac:	1c58      	adds	r0, r3, #1
 8008eae:	6010      	str	r0, [r2, #0]
 8008eb0:	7019      	strb	r1, [r3, #0]
 8008eb2:	4608      	mov	r0, r1
 8008eb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008eb8:	4770      	bx	lr

08008eba <__sfputs_r>:
 8008eba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ebc:	4606      	mov	r6, r0
 8008ebe:	460f      	mov	r7, r1
 8008ec0:	4614      	mov	r4, r2
 8008ec2:	18d5      	adds	r5, r2, r3
 8008ec4:	42ac      	cmp	r4, r5
 8008ec6:	d101      	bne.n	8008ecc <__sfputs_r+0x12>
 8008ec8:	2000      	movs	r0, #0
 8008eca:	e007      	b.n	8008edc <__sfputs_r+0x22>
 8008ecc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ed0:	463a      	mov	r2, r7
 8008ed2:	4630      	mov	r0, r6
 8008ed4:	f7ff ffda 	bl	8008e8c <__sfputc_r>
 8008ed8:	1c43      	adds	r3, r0, #1
 8008eda:	d1f3      	bne.n	8008ec4 <__sfputs_r+0xa>
 8008edc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008ee0 <_vfiprintf_r>:
 8008ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ee4:	460d      	mov	r5, r1
 8008ee6:	b09d      	sub	sp, #116	; 0x74
 8008ee8:	4614      	mov	r4, r2
 8008eea:	4698      	mov	r8, r3
 8008eec:	4606      	mov	r6, r0
 8008eee:	b118      	cbz	r0, 8008ef8 <_vfiprintf_r+0x18>
 8008ef0:	6a03      	ldr	r3, [r0, #32]
 8008ef2:	b90b      	cbnz	r3, 8008ef8 <_vfiprintf_r+0x18>
 8008ef4:	f7fd f992 	bl	800621c <__sinit>
 8008ef8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008efa:	07d9      	lsls	r1, r3, #31
 8008efc:	d405      	bmi.n	8008f0a <_vfiprintf_r+0x2a>
 8008efe:	89ab      	ldrh	r3, [r5, #12]
 8008f00:	059a      	lsls	r2, r3, #22
 8008f02:	d402      	bmi.n	8008f0a <_vfiprintf_r+0x2a>
 8008f04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f06:	f7fd fba2 	bl	800664e <__retarget_lock_acquire_recursive>
 8008f0a:	89ab      	ldrh	r3, [r5, #12]
 8008f0c:	071b      	lsls	r3, r3, #28
 8008f0e:	d501      	bpl.n	8008f14 <_vfiprintf_r+0x34>
 8008f10:	692b      	ldr	r3, [r5, #16]
 8008f12:	b99b      	cbnz	r3, 8008f3c <_vfiprintf_r+0x5c>
 8008f14:	4629      	mov	r1, r5
 8008f16:	4630      	mov	r0, r6
 8008f18:	f7fd fac4 	bl	80064a4 <__swsetup_r>
 8008f1c:	b170      	cbz	r0, 8008f3c <_vfiprintf_r+0x5c>
 8008f1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f20:	07dc      	lsls	r4, r3, #31
 8008f22:	d504      	bpl.n	8008f2e <_vfiprintf_r+0x4e>
 8008f24:	f04f 30ff 	mov.w	r0, #4294967295
 8008f28:	b01d      	add	sp, #116	; 0x74
 8008f2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f2e:	89ab      	ldrh	r3, [r5, #12]
 8008f30:	0598      	lsls	r0, r3, #22
 8008f32:	d4f7      	bmi.n	8008f24 <_vfiprintf_r+0x44>
 8008f34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f36:	f7fd fb8b 	bl	8006650 <__retarget_lock_release_recursive>
 8008f3a:	e7f3      	b.n	8008f24 <_vfiprintf_r+0x44>
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	9309      	str	r3, [sp, #36]	; 0x24
 8008f40:	2320      	movs	r3, #32
 8008f42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f46:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f4a:	2330      	movs	r3, #48	; 0x30
 8008f4c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009100 <_vfiprintf_r+0x220>
 8008f50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008f54:	f04f 0901 	mov.w	r9, #1
 8008f58:	4623      	mov	r3, r4
 8008f5a:	469a      	mov	sl, r3
 8008f5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f60:	b10a      	cbz	r2, 8008f66 <_vfiprintf_r+0x86>
 8008f62:	2a25      	cmp	r2, #37	; 0x25
 8008f64:	d1f9      	bne.n	8008f5a <_vfiprintf_r+0x7a>
 8008f66:	ebba 0b04 	subs.w	fp, sl, r4
 8008f6a:	d00b      	beq.n	8008f84 <_vfiprintf_r+0xa4>
 8008f6c:	465b      	mov	r3, fp
 8008f6e:	4622      	mov	r2, r4
 8008f70:	4629      	mov	r1, r5
 8008f72:	4630      	mov	r0, r6
 8008f74:	f7ff ffa1 	bl	8008eba <__sfputs_r>
 8008f78:	3001      	adds	r0, #1
 8008f7a:	f000 80a9 	beq.w	80090d0 <_vfiprintf_r+0x1f0>
 8008f7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f80:	445a      	add	r2, fp
 8008f82:	9209      	str	r2, [sp, #36]	; 0x24
 8008f84:	f89a 3000 	ldrb.w	r3, [sl]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	f000 80a1 	beq.w	80090d0 <_vfiprintf_r+0x1f0>
 8008f8e:	2300      	movs	r3, #0
 8008f90:	f04f 32ff 	mov.w	r2, #4294967295
 8008f94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f98:	f10a 0a01 	add.w	sl, sl, #1
 8008f9c:	9304      	str	r3, [sp, #16]
 8008f9e:	9307      	str	r3, [sp, #28]
 8008fa0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008fa4:	931a      	str	r3, [sp, #104]	; 0x68
 8008fa6:	4654      	mov	r4, sl
 8008fa8:	2205      	movs	r2, #5
 8008faa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fae:	4854      	ldr	r0, [pc, #336]	; (8009100 <_vfiprintf_r+0x220>)
 8008fb0:	f7f7 f916 	bl	80001e0 <memchr>
 8008fb4:	9a04      	ldr	r2, [sp, #16]
 8008fb6:	b9d8      	cbnz	r0, 8008ff0 <_vfiprintf_r+0x110>
 8008fb8:	06d1      	lsls	r1, r2, #27
 8008fba:	bf44      	itt	mi
 8008fbc:	2320      	movmi	r3, #32
 8008fbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008fc2:	0713      	lsls	r3, r2, #28
 8008fc4:	bf44      	itt	mi
 8008fc6:	232b      	movmi	r3, #43	; 0x2b
 8008fc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008fcc:	f89a 3000 	ldrb.w	r3, [sl]
 8008fd0:	2b2a      	cmp	r3, #42	; 0x2a
 8008fd2:	d015      	beq.n	8009000 <_vfiprintf_r+0x120>
 8008fd4:	9a07      	ldr	r2, [sp, #28]
 8008fd6:	4654      	mov	r4, sl
 8008fd8:	2000      	movs	r0, #0
 8008fda:	f04f 0c0a 	mov.w	ip, #10
 8008fde:	4621      	mov	r1, r4
 8008fe0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008fe4:	3b30      	subs	r3, #48	; 0x30
 8008fe6:	2b09      	cmp	r3, #9
 8008fe8:	d94d      	bls.n	8009086 <_vfiprintf_r+0x1a6>
 8008fea:	b1b0      	cbz	r0, 800901a <_vfiprintf_r+0x13a>
 8008fec:	9207      	str	r2, [sp, #28]
 8008fee:	e014      	b.n	800901a <_vfiprintf_r+0x13a>
 8008ff0:	eba0 0308 	sub.w	r3, r0, r8
 8008ff4:	fa09 f303 	lsl.w	r3, r9, r3
 8008ff8:	4313      	orrs	r3, r2
 8008ffa:	9304      	str	r3, [sp, #16]
 8008ffc:	46a2      	mov	sl, r4
 8008ffe:	e7d2      	b.n	8008fa6 <_vfiprintf_r+0xc6>
 8009000:	9b03      	ldr	r3, [sp, #12]
 8009002:	1d19      	adds	r1, r3, #4
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	9103      	str	r1, [sp, #12]
 8009008:	2b00      	cmp	r3, #0
 800900a:	bfbb      	ittet	lt
 800900c:	425b      	neglt	r3, r3
 800900e:	f042 0202 	orrlt.w	r2, r2, #2
 8009012:	9307      	strge	r3, [sp, #28]
 8009014:	9307      	strlt	r3, [sp, #28]
 8009016:	bfb8      	it	lt
 8009018:	9204      	strlt	r2, [sp, #16]
 800901a:	7823      	ldrb	r3, [r4, #0]
 800901c:	2b2e      	cmp	r3, #46	; 0x2e
 800901e:	d10c      	bne.n	800903a <_vfiprintf_r+0x15a>
 8009020:	7863      	ldrb	r3, [r4, #1]
 8009022:	2b2a      	cmp	r3, #42	; 0x2a
 8009024:	d134      	bne.n	8009090 <_vfiprintf_r+0x1b0>
 8009026:	9b03      	ldr	r3, [sp, #12]
 8009028:	1d1a      	adds	r2, r3, #4
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	9203      	str	r2, [sp, #12]
 800902e:	2b00      	cmp	r3, #0
 8009030:	bfb8      	it	lt
 8009032:	f04f 33ff 	movlt.w	r3, #4294967295
 8009036:	3402      	adds	r4, #2
 8009038:	9305      	str	r3, [sp, #20]
 800903a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009110 <_vfiprintf_r+0x230>
 800903e:	7821      	ldrb	r1, [r4, #0]
 8009040:	2203      	movs	r2, #3
 8009042:	4650      	mov	r0, sl
 8009044:	f7f7 f8cc 	bl	80001e0 <memchr>
 8009048:	b138      	cbz	r0, 800905a <_vfiprintf_r+0x17a>
 800904a:	9b04      	ldr	r3, [sp, #16]
 800904c:	eba0 000a 	sub.w	r0, r0, sl
 8009050:	2240      	movs	r2, #64	; 0x40
 8009052:	4082      	lsls	r2, r0
 8009054:	4313      	orrs	r3, r2
 8009056:	3401      	adds	r4, #1
 8009058:	9304      	str	r3, [sp, #16]
 800905a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800905e:	4829      	ldr	r0, [pc, #164]	; (8009104 <_vfiprintf_r+0x224>)
 8009060:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009064:	2206      	movs	r2, #6
 8009066:	f7f7 f8bb 	bl	80001e0 <memchr>
 800906a:	2800      	cmp	r0, #0
 800906c:	d03f      	beq.n	80090ee <_vfiprintf_r+0x20e>
 800906e:	4b26      	ldr	r3, [pc, #152]	; (8009108 <_vfiprintf_r+0x228>)
 8009070:	bb1b      	cbnz	r3, 80090ba <_vfiprintf_r+0x1da>
 8009072:	9b03      	ldr	r3, [sp, #12]
 8009074:	3307      	adds	r3, #7
 8009076:	f023 0307 	bic.w	r3, r3, #7
 800907a:	3308      	adds	r3, #8
 800907c:	9303      	str	r3, [sp, #12]
 800907e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009080:	443b      	add	r3, r7
 8009082:	9309      	str	r3, [sp, #36]	; 0x24
 8009084:	e768      	b.n	8008f58 <_vfiprintf_r+0x78>
 8009086:	fb0c 3202 	mla	r2, ip, r2, r3
 800908a:	460c      	mov	r4, r1
 800908c:	2001      	movs	r0, #1
 800908e:	e7a6      	b.n	8008fde <_vfiprintf_r+0xfe>
 8009090:	2300      	movs	r3, #0
 8009092:	3401      	adds	r4, #1
 8009094:	9305      	str	r3, [sp, #20]
 8009096:	4619      	mov	r1, r3
 8009098:	f04f 0c0a 	mov.w	ip, #10
 800909c:	4620      	mov	r0, r4
 800909e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80090a2:	3a30      	subs	r2, #48	; 0x30
 80090a4:	2a09      	cmp	r2, #9
 80090a6:	d903      	bls.n	80090b0 <_vfiprintf_r+0x1d0>
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d0c6      	beq.n	800903a <_vfiprintf_r+0x15a>
 80090ac:	9105      	str	r1, [sp, #20]
 80090ae:	e7c4      	b.n	800903a <_vfiprintf_r+0x15a>
 80090b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80090b4:	4604      	mov	r4, r0
 80090b6:	2301      	movs	r3, #1
 80090b8:	e7f0      	b.n	800909c <_vfiprintf_r+0x1bc>
 80090ba:	ab03      	add	r3, sp, #12
 80090bc:	9300      	str	r3, [sp, #0]
 80090be:	462a      	mov	r2, r5
 80090c0:	4b12      	ldr	r3, [pc, #72]	; (800910c <_vfiprintf_r+0x22c>)
 80090c2:	a904      	add	r1, sp, #16
 80090c4:	4630      	mov	r0, r6
 80090c6:	f7fc fa47 	bl	8005558 <_printf_float>
 80090ca:	4607      	mov	r7, r0
 80090cc:	1c78      	adds	r0, r7, #1
 80090ce:	d1d6      	bne.n	800907e <_vfiprintf_r+0x19e>
 80090d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80090d2:	07d9      	lsls	r1, r3, #31
 80090d4:	d405      	bmi.n	80090e2 <_vfiprintf_r+0x202>
 80090d6:	89ab      	ldrh	r3, [r5, #12]
 80090d8:	059a      	lsls	r2, r3, #22
 80090da:	d402      	bmi.n	80090e2 <_vfiprintf_r+0x202>
 80090dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80090de:	f7fd fab7 	bl	8006650 <__retarget_lock_release_recursive>
 80090e2:	89ab      	ldrh	r3, [r5, #12]
 80090e4:	065b      	lsls	r3, r3, #25
 80090e6:	f53f af1d 	bmi.w	8008f24 <_vfiprintf_r+0x44>
 80090ea:	9809      	ldr	r0, [sp, #36]	; 0x24
 80090ec:	e71c      	b.n	8008f28 <_vfiprintf_r+0x48>
 80090ee:	ab03      	add	r3, sp, #12
 80090f0:	9300      	str	r3, [sp, #0]
 80090f2:	462a      	mov	r2, r5
 80090f4:	4b05      	ldr	r3, [pc, #20]	; (800910c <_vfiprintf_r+0x22c>)
 80090f6:	a904      	add	r1, sp, #16
 80090f8:	4630      	mov	r0, r6
 80090fa:	f7fc fcd1 	bl	8005aa0 <_printf_i>
 80090fe:	e7e4      	b.n	80090ca <_vfiprintf_r+0x1ea>
 8009100:	0800ab41 	.word	0x0800ab41
 8009104:	0800ab4b 	.word	0x0800ab4b
 8009108:	08005559 	.word	0x08005559
 800910c:	08008ebb 	.word	0x08008ebb
 8009110:	0800ab47 	.word	0x0800ab47

08009114 <__sflush_r>:
 8009114:	898a      	ldrh	r2, [r1, #12]
 8009116:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800911a:	4605      	mov	r5, r0
 800911c:	0710      	lsls	r0, r2, #28
 800911e:	460c      	mov	r4, r1
 8009120:	d458      	bmi.n	80091d4 <__sflush_r+0xc0>
 8009122:	684b      	ldr	r3, [r1, #4]
 8009124:	2b00      	cmp	r3, #0
 8009126:	dc05      	bgt.n	8009134 <__sflush_r+0x20>
 8009128:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800912a:	2b00      	cmp	r3, #0
 800912c:	dc02      	bgt.n	8009134 <__sflush_r+0x20>
 800912e:	2000      	movs	r0, #0
 8009130:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009134:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009136:	2e00      	cmp	r6, #0
 8009138:	d0f9      	beq.n	800912e <__sflush_r+0x1a>
 800913a:	2300      	movs	r3, #0
 800913c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009140:	682f      	ldr	r7, [r5, #0]
 8009142:	6a21      	ldr	r1, [r4, #32]
 8009144:	602b      	str	r3, [r5, #0]
 8009146:	d032      	beq.n	80091ae <__sflush_r+0x9a>
 8009148:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800914a:	89a3      	ldrh	r3, [r4, #12]
 800914c:	075a      	lsls	r2, r3, #29
 800914e:	d505      	bpl.n	800915c <__sflush_r+0x48>
 8009150:	6863      	ldr	r3, [r4, #4]
 8009152:	1ac0      	subs	r0, r0, r3
 8009154:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009156:	b10b      	cbz	r3, 800915c <__sflush_r+0x48>
 8009158:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800915a:	1ac0      	subs	r0, r0, r3
 800915c:	2300      	movs	r3, #0
 800915e:	4602      	mov	r2, r0
 8009160:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009162:	6a21      	ldr	r1, [r4, #32]
 8009164:	4628      	mov	r0, r5
 8009166:	47b0      	blx	r6
 8009168:	1c43      	adds	r3, r0, #1
 800916a:	89a3      	ldrh	r3, [r4, #12]
 800916c:	d106      	bne.n	800917c <__sflush_r+0x68>
 800916e:	6829      	ldr	r1, [r5, #0]
 8009170:	291d      	cmp	r1, #29
 8009172:	d82b      	bhi.n	80091cc <__sflush_r+0xb8>
 8009174:	4a29      	ldr	r2, [pc, #164]	; (800921c <__sflush_r+0x108>)
 8009176:	410a      	asrs	r2, r1
 8009178:	07d6      	lsls	r6, r2, #31
 800917a:	d427      	bmi.n	80091cc <__sflush_r+0xb8>
 800917c:	2200      	movs	r2, #0
 800917e:	6062      	str	r2, [r4, #4]
 8009180:	04d9      	lsls	r1, r3, #19
 8009182:	6922      	ldr	r2, [r4, #16]
 8009184:	6022      	str	r2, [r4, #0]
 8009186:	d504      	bpl.n	8009192 <__sflush_r+0x7e>
 8009188:	1c42      	adds	r2, r0, #1
 800918a:	d101      	bne.n	8009190 <__sflush_r+0x7c>
 800918c:	682b      	ldr	r3, [r5, #0]
 800918e:	b903      	cbnz	r3, 8009192 <__sflush_r+0x7e>
 8009190:	6560      	str	r0, [r4, #84]	; 0x54
 8009192:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009194:	602f      	str	r7, [r5, #0]
 8009196:	2900      	cmp	r1, #0
 8009198:	d0c9      	beq.n	800912e <__sflush_r+0x1a>
 800919a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800919e:	4299      	cmp	r1, r3
 80091a0:	d002      	beq.n	80091a8 <__sflush_r+0x94>
 80091a2:	4628      	mov	r0, r5
 80091a4:	f7fe f8d6 	bl	8007354 <_free_r>
 80091a8:	2000      	movs	r0, #0
 80091aa:	6360      	str	r0, [r4, #52]	; 0x34
 80091ac:	e7c0      	b.n	8009130 <__sflush_r+0x1c>
 80091ae:	2301      	movs	r3, #1
 80091b0:	4628      	mov	r0, r5
 80091b2:	47b0      	blx	r6
 80091b4:	1c41      	adds	r1, r0, #1
 80091b6:	d1c8      	bne.n	800914a <__sflush_r+0x36>
 80091b8:	682b      	ldr	r3, [r5, #0]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d0c5      	beq.n	800914a <__sflush_r+0x36>
 80091be:	2b1d      	cmp	r3, #29
 80091c0:	d001      	beq.n	80091c6 <__sflush_r+0xb2>
 80091c2:	2b16      	cmp	r3, #22
 80091c4:	d101      	bne.n	80091ca <__sflush_r+0xb6>
 80091c6:	602f      	str	r7, [r5, #0]
 80091c8:	e7b1      	b.n	800912e <__sflush_r+0x1a>
 80091ca:	89a3      	ldrh	r3, [r4, #12]
 80091cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091d0:	81a3      	strh	r3, [r4, #12]
 80091d2:	e7ad      	b.n	8009130 <__sflush_r+0x1c>
 80091d4:	690f      	ldr	r7, [r1, #16]
 80091d6:	2f00      	cmp	r7, #0
 80091d8:	d0a9      	beq.n	800912e <__sflush_r+0x1a>
 80091da:	0793      	lsls	r3, r2, #30
 80091dc:	680e      	ldr	r6, [r1, #0]
 80091de:	bf08      	it	eq
 80091e0:	694b      	ldreq	r3, [r1, #20]
 80091e2:	600f      	str	r7, [r1, #0]
 80091e4:	bf18      	it	ne
 80091e6:	2300      	movne	r3, #0
 80091e8:	eba6 0807 	sub.w	r8, r6, r7
 80091ec:	608b      	str	r3, [r1, #8]
 80091ee:	f1b8 0f00 	cmp.w	r8, #0
 80091f2:	dd9c      	ble.n	800912e <__sflush_r+0x1a>
 80091f4:	6a21      	ldr	r1, [r4, #32]
 80091f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80091f8:	4643      	mov	r3, r8
 80091fa:	463a      	mov	r2, r7
 80091fc:	4628      	mov	r0, r5
 80091fe:	47b0      	blx	r6
 8009200:	2800      	cmp	r0, #0
 8009202:	dc06      	bgt.n	8009212 <__sflush_r+0xfe>
 8009204:	89a3      	ldrh	r3, [r4, #12]
 8009206:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800920a:	81a3      	strh	r3, [r4, #12]
 800920c:	f04f 30ff 	mov.w	r0, #4294967295
 8009210:	e78e      	b.n	8009130 <__sflush_r+0x1c>
 8009212:	4407      	add	r7, r0
 8009214:	eba8 0800 	sub.w	r8, r8, r0
 8009218:	e7e9      	b.n	80091ee <__sflush_r+0xda>
 800921a:	bf00      	nop
 800921c:	dfbffffe 	.word	0xdfbffffe

08009220 <_fflush_r>:
 8009220:	b538      	push	{r3, r4, r5, lr}
 8009222:	690b      	ldr	r3, [r1, #16]
 8009224:	4605      	mov	r5, r0
 8009226:	460c      	mov	r4, r1
 8009228:	b913      	cbnz	r3, 8009230 <_fflush_r+0x10>
 800922a:	2500      	movs	r5, #0
 800922c:	4628      	mov	r0, r5
 800922e:	bd38      	pop	{r3, r4, r5, pc}
 8009230:	b118      	cbz	r0, 800923a <_fflush_r+0x1a>
 8009232:	6a03      	ldr	r3, [r0, #32]
 8009234:	b90b      	cbnz	r3, 800923a <_fflush_r+0x1a>
 8009236:	f7fc fff1 	bl	800621c <__sinit>
 800923a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d0f3      	beq.n	800922a <_fflush_r+0xa>
 8009242:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009244:	07d0      	lsls	r0, r2, #31
 8009246:	d404      	bmi.n	8009252 <_fflush_r+0x32>
 8009248:	0599      	lsls	r1, r3, #22
 800924a:	d402      	bmi.n	8009252 <_fflush_r+0x32>
 800924c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800924e:	f7fd f9fe 	bl	800664e <__retarget_lock_acquire_recursive>
 8009252:	4628      	mov	r0, r5
 8009254:	4621      	mov	r1, r4
 8009256:	f7ff ff5d 	bl	8009114 <__sflush_r>
 800925a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800925c:	07da      	lsls	r2, r3, #31
 800925e:	4605      	mov	r5, r0
 8009260:	d4e4      	bmi.n	800922c <_fflush_r+0xc>
 8009262:	89a3      	ldrh	r3, [r4, #12]
 8009264:	059b      	lsls	r3, r3, #22
 8009266:	d4e1      	bmi.n	800922c <_fflush_r+0xc>
 8009268:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800926a:	f7fd f9f1 	bl	8006650 <__retarget_lock_release_recursive>
 800926e:	e7dd      	b.n	800922c <_fflush_r+0xc>

08009270 <__swhatbuf_r>:
 8009270:	b570      	push	{r4, r5, r6, lr}
 8009272:	460c      	mov	r4, r1
 8009274:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009278:	2900      	cmp	r1, #0
 800927a:	b096      	sub	sp, #88	; 0x58
 800927c:	4615      	mov	r5, r2
 800927e:	461e      	mov	r6, r3
 8009280:	da0d      	bge.n	800929e <__swhatbuf_r+0x2e>
 8009282:	89a3      	ldrh	r3, [r4, #12]
 8009284:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009288:	f04f 0100 	mov.w	r1, #0
 800928c:	bf0c      	ite	eq
 800928e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009292:	2340      	movne	r3, #64	; 0x40
 8009294:	2000      	movs	r0, #0
 8009296:	6031      	str	r1, [r6, #0]
 8009298:	602b      	str	r3, [r5, #0]
 800929a:	b016      	add	sp, #88	; 0x58
 800929c:	bd70      	pop	{r4, r5, r6, pc}
 800929e:	466a      	mov	r2, sp
 80092a0:	f000 f874 	bl	800938c <_fstat_r>
 80092a4:	2800      	cmp	r0, #0
 80092a6:	dbec      	blt.n	8009282 <__swhatbuf_r+0x12>
 80092a8:	9901      	ldr	r1, [sp, #4]
 80092aa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80092ae:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80092b2:	4259      	negs	r1, r3
 80092b4:	4159      	adcs	r1, r3
 80092b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80092ba:	e7eb      	b.n	8009294 <__swhatbuf_r+0x24>

080092bc <__smakebuf_r>:
 80092bc:	898b      	ldrh	r3, [r1, #12]
 80092be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80092c0:	079d      	lsls	r5, r3, #30
 80092c2:	4606      	mov	r6, r0
 80092c4:	460c      	mov	r4, r1
 80092c6:	d507      	bpl.n	80092d8 <__smakebuf_r+0x1c>
 80092c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80092cc:	6023      	str	r3, [r4, #0]
 80092ce:	6123      	str	r3, [r4, #16]
 80092d0:	2301      	movs	r3, #1
 80092d2:	6163      	str	r3, [r4, #20]
 80092d4:	b002      	add	sp, #8
 80092d6:	bd70      	pop	{r4, r5, r6, pc}
 80092d8:	ab01      	add	r3, sp, #4
 80092da:	466a      	mov	r2, sp
 80092dc:	f7ff ffc8 	bl	8009270 <__swhatbuf_r>
 80092e0:	9900      	ldr	r1, [sp, #0]
 80092e2:	4605      	mov	r5, r0
 80092e4:	4630      	mov	r0, r6
 80092e6:	f7fe f8a9 	bl	800743c <_malloc_r>
 80092ea:	b948      	cbnz	r0, 8009300 <__smakebuf_r+0x44>
 80092ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092f0:	059a      	lsls	r2, r3, #22
 80092f2:	d4ef      	bmi.n	80092d4 <__smakebuf_r+0x18>
 80092f4:	f023 0303 	bic.w	r3, r3, #3
 80092f8:	f043 0302 	orr.w	r3, r3, #2
 80092fc:	81a3      	strh	r3, [r4, #12]
 80092fe:	e7e3      	b.n	80092c8 <__smakebuf_r+0xc>
 8009300:	89a3      	ldrh	r3, [r4, #12]
 8009302:	6020      	str	r0, [r4, #0]
 8009304:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009308:	81a3      	strh	r3, [r4, #12]
 800930a:	9b00      	ldr	r3, [sp, #0]
 800930c:	6163      	str	r3, [r4, #20]
 800930e:	9b01      	ldr	r3, [sp, #4]
 8009310:	6120      	str	r0, [r4, #16]
 8009312:	b15b      	cbz	r3, 800932c <__smakebuf_r+0x70>
 8009314:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009318:	4630      	mov	r0, r6
 800931a:	f000 f849 	bl	80093b0 <_isatty_r>
 800931e:	b128      	cbz	r0, 800932c <__smakebuf_r+0x70>
 8009320:	89a3      	ldrh	r3, [r4, #12]
 8009322:	f023 0303 	bic.w	r3, r3, #3
 8009326:	f043 0301 	orr.w	r3, r3, #1
 800932a:	81a3      	strh	r3, [r4, #12]
 800932c:	89a3      	ldrh	r3, [r4, #12]
 800932e:	431d      	orrs	r5, r3
 8009330:	81a5      	strh	r5, [r4, #12]
 8009332:	e7cf      	b.n	80092d4 <__smakebuf_r+0x18>

08009334 <memmove>:
 8009334:	4288      	cmp	r0, r1
 8009336:	b510      	push	{r4, lr}
 8009338:	eb01 0402 	add.w	r4, r1, r2
 800933c:	d902      	bls.n	8009344 <memmove+0x10>
 800933e:	4284      	cmp	r4, r0
 8009340:	4623      	mov	r3, r4
 8009342:	d807      	bhi.n	8009354 <memmove+0x20>
 8009344:	1e43      	subs	r3, r0, #1
 8009346:	42a1      	cmp	r1, r4
 8009348:	d008      	beq.n	800935c <memmove+0x28>
 800934a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800934e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009352:	e7f8      	b.n	8009346 <memmove+0x12>
 8009354:	4402      	add	r2, r0
 8009356:	4601      	mov	r1, r0
 8009358:	428a      	cmp	r2, r1
 800935a:	d100      	bne.n	800935e <memmove+0x2a>
 800935c:	bd10      	pop	{r4, pc}
 800935e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009362:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009366:	e7f7      	b.n	8009358 <memmove+0x24>

08009368 <strncmp>:
 8009368:	b510      	push	{r4, lr}
 800936a:	b16a      	cbz	r2, 8009388 <strncmp+0x20>
 800936c:	3901      	subs	r1, #1
 800936e:	1884      	adds	r4, r0, r2
 8009370:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009374:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009378:	429a      	cmp	r2, r3
 800937a:	d103      	bne.n	8009384 <strncmp+0x1c>
 800937c:	42a0      	cmp	r0, r4
 800937e:	d001      	beq.n	8009384 <strncmp+0x1c>
 8009380:	2a00      	cmp	r2, #0
 8009382:	d1f5      	bne.n	8009370 <strncmp+0x8>
 8009384:	1ad0      	subs	r0, r2, r3
 8009386:	bd10      	pop	{r4, pc}
 8009388:	4610      	mov	r0, r2
 800938a:	e7fc      	b.n	8009386 <strncmp+0x1e>

0800938c <_fstat_r>:
 800938c:	b538      	push	{r3, r4, r5, lr}
 800938e:	4d07      	ldr	r5, [pc, #28]	; (80093ac <_fstat_r+0x20>)
 8009390:	2300      	movs	r3, #0
 8009392:	4604      	mov	r4, r0
 8009394:	4608      	mov	r0, r1
 8009396:	4611      	mov	r1, r2
 8009398:	602b      	str	r3, [r5, #0]
 800939a:	f7f9 fb9a 	bl	8002ad2 <_fstat>
 800939e:	1c43      	adds	r3, r0, #1
 80093a0:	d102      	bne.n	80093a8 <_fstat_r+0x1c>
 80093a2:	682b      	ldr	r3, [r5, #0]
 80093a4:	b103      	cbz	r3, 80093a8 <_fstat_r+0x1c>
 80093a6:	6023      	str	r3, [r4, #0]
 80093a8:	bd38      	pop	{r3, r4, r5, pc}
 80093aa:	bf00      	nop
 80093ac:	200004c4 	.word	0x200004c4

080093b0 <_isatty_r>:
 80093b0:	b538      	push	{r3, r4, r5, lr}
 80093b2:	4d06      	ldr	r5, [pc, #24]	; (80093cc <_isatty_r+0x1c>)
 80093b4:	2300      	movs	r3, #0
 80093b6:	4604      	mov	r4, r0
 80093b8:	4608      	mov	r0, r1
 80093ba:	602b      	str	r3, [r5, #0]
 80093bc:	f7f9 fb99 	bl	8002af2 <_isatty>
 80093c0:	1c43      	adds	r3, r0, #1
 80093c2:	d102      	bne.n	80093ca <_isatty_r+0x1a>
 80093c4:	682b      	ldr	r3, [r5, #0]
 80093c6:	b103      	cbz	r3, 80093ca <_isatty_r+0x1a>
 80093c8:	6023      	str	r3, [r4, #0]
 80093ca:	bd38      	pop	{r3, r4, r5, pc}
 80093cc:	200004c4 	.word	0x200004c4

080093d0 <_sbrk_r>:
 80093d0:	b538      	push	{r3, r4, r5, lr}
 80093d2:	4d06      	ldr	r5, [pc, #24]	; (80093ec <_sbrk_r+0x1c>)
 80093d4:	2300      	movs	r3, #0
 80093d6:	4604      	mov	r4, r0
 80093d8:	4608      	mov	r0, r1
 80093da:	602b      	str	r3, [r5, #0]
 80093dc:	f7f9 fba2 	bl	8002b24 <_sbrk>
 80093e0:	1c43      	adds	r3, r0, #1
 80093e2:	d102      	bne.n	80093ea <_sbrk_r+0x1a>
 80093e4:	682b      	ldr	r3, [r5, #0]
 80093e6:	b103      	cbz	r3, 80093ea <_sbrk_r+0x1a>
 80093e8:	6023      	str	r3, [r4, #0]
 80093ea:	bd38      	pop	{r3, r4, r5, pc}
 80093ec:	200004c4 	.word	0x200004c4

080093f0 <memcpy>:
 80093f0:	440a      	add	r2, r1
 80093f2:	4291      	cmp	r1, r2
 80093f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80093f8:	d100      	bne.n	80093fc <memcpy+0xc>
 80093fa:	4770      	bx	lr
 80093fc:	b510      	push	{r4, lr}
 80093fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009402:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009406:	4291      	cmp	r1, r2
 8009408:	d1f9      	bne.n	80093fe <memcpy+0xe>
 800940a:	bd10      	pop	{r4, pc}
 800940c:	0000      	movs	r0, r0
	...

08009410 <nan>:
 8009410:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009418 <nan+0x8>
 8009414:	4770      	bx	lr
 8009416:	bf00      	nop
 8009418:	00000000 	.word	0x00000000
 800941c:	7ff80000 	.word	0x7ff80000

08009420 <__assert_func>:
 8009420:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009422:	4614      	mov	r4, r2
 8009424:	461a      	mov	r2, r3
 8009426:	4b09      	ldr	r3, [pc, #36]	; (800944c <__assert_func+0x2c>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	4605      	mov	r5, r0
 800942c:	68d8      	ldr	r0, [r3, #12]
 800942e:	b14c      	cbz	r4, 8009444 <__assert_func+0x24>
 8009430:	4b07      	ldr	r3, [pc, #28]	; (8009450 <__assert_func+0x30>)
 8009432:	9100      	str	r1, [sp, #0]
 8009434:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009438:	4906      	ldr	r1, [pc, #24]	; (8009454 <__assert_func+0x34>)
 800943a:	462b      	mov	r3, r5
 800943c:	f000 fbca 	bl	8009bd4 <fiprintf>
 8009440:	f000 fbda 	bl	8009bf8 <abort>
 8009444:	4b04      	ldr	r3, [pc, #16]	; (8009458 <__assert_func+0x38>)
 8009446:	461c      	mov	r4, r3
 8009448:	e7f3      	b.n	8009432 <__assert_func+0x12>
 800944a:	bf00      	nop
 800944c:	20000064 	.word	0x20000064
 8009450:	0800ab5a 	.word	0x0800ab5a
 8009454:	0800ab67 	.word	0x0800ab67
 8009458:	0800ab95 	.word	0x0800ab95

0800945c <_calloc_r>:
 800945c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800945e:	fba1 2402 	umull	r2, r4, r1, r2
 8009462:	b94c      	cbnz	r4, 8009478 <_calloc_r+0x1c>
 8009464:	4611      	mov	r1, r2
 8009466:	9201      	str	r2, [sp, #4]
 8009468:	f7fd ffe8 	bl	800743c <_malloc_r>
 800946c:	9a01      	ldr	r2, [sp, #4]
 800946e:	4605      	mov	r5, r0
 8009470:	b930      	cbnz	r0, 8009480 <_calloc_r+0x24>
 8009472:	4628      	mov	r0, r5
 8009474:	b003      	add	sp, #12
 8009476:	bd30      	pop	{r4, r5, pc}
 8009478:	220c      	movs	r2, #12
 800947a:	6002      	str	r2, [r0, #0]
 800947c:	2500      	movs	r5, #0
 800947e:	e7f8      	b.n	8009472 <_calloc_r+0x16>
 8009480:	4621      	mov	r1, r4
 8009482:	f7fd f867 	bl	8006554 <memset>
 8009486:	e7f4      	b.n	8009472 <_calloc_r+0x16>

08009488 <rshift>:
 8009488:	6903      	ldr	r3, [r0, #16]
 800948a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800948e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009492:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009496:	f100 0414 	add.w	r4, r0, #20
 800949a:	dd45      	ble.n	8009528 <rshift+0xa0>
 800949c:	f011 011f 	ands.w	r1, r1, #31
 80094a0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80094a4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80094a8:	d10c      	bne.n	80094c4 <rshift+0x3c>
 80094aa:	f100 0710 	add.w	r7, r0, #16
 80094ae:	4629      	mov	r1, r5
 80094b0:	42b1      	cmp	r1, r6
 80094b2:	d334      	bcc.n	800951e <rshift+0x96>
 80094b4:	1a9b      	subs	r3, r3, r2
 80094b6:	009b      	lsls	r3, r3, #2
 80094b8:	1eea      	subs	r2, r5, #3
 80094ba:	4296      	cmp	r6, r2
 80094bc:	bf38      	it	cc
 80094be:	2300      	movcc	r3, #0
 80094c0:	4423      	add	r3, r4
 80094c2:	e015      	b.n	80094f0 <rshift+0x68>
 80094c4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80094c8:	f1c1 0820 	rsb	r8, r1, #32
 80094cc:	40cf      	lsrs	r7, r1
 80094ce:	f105 0e04 	add.w	lr, r5, #4
 80094d2:	46a1      	mov	r9, r4
 80094d4:	4576      	cmp	r6, lr
 80094d6:	46f4      	mov	ip, lr
 80094d8:	d815      	bhi.n	8009506 <rshift+0x7e>
 80094da:	1a9a      	subs	r2, r3, r2
 80094dc:	0092      	lsls	r2, r2, #2
 80094de:	3a04      	subs	r2, #4
 80094e0:	3501      	adds	r5, #1
 80094e2:	42ae      	cmp	r6, r5
 80094e4:	bf38      	it	cc
 80094e6:	2200      	movcc	r2, #0
 80094e8:	18a3      	adds	r3, r4, r2
 80094ea:	50a7      	str	r7, [r4, r2]
 80094ec:	b107      	cbz	r7, 80094f0 <rshift+0x68>
 80094ee:	3304      	adds	r3, #4
 80094f0:	1b1a      	subs	r2, r3, r4
 80094f2:	42a3      	cmp	r3, r4
 80094f4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80094f8:	bf08      	it	eq
 80094fa:	2300      	moveq	r3, #0
 80094fc:	6102      	str	r2, [r0, #16]
 80094fe:	bf08      	it	eq
 8009500:	6143      	streq	r3, [r0, #20]
 8009502:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009506:	f8dc c000 	ldr.w	ip, [ip]
 800950a:	fa0c fc08 	lsl.w	ip, ip, r8
 800950e:	ea4c 0707 	orr.w	r7, ip, r7
 8009512:	f849 7b04 	str.w	r7, [r9], #4
 8009516:	f85e 7b04 	ldr.w	r7, [lr], #4
 800951a:	40cf      	lsrs	r7, r1
 800951c:	e7da      	b.n	80094d4 <rshift+0x4c>
 800951e:	f851 cb04 	ldr.w	ip, [r1], #4
 8009522:	f847 cf04 	str.w	ip, [r7, #4]!
 8009526:	e7c3      	b.n	80094b0 <rshift+0x28>
 8009528:	4623      	mov	r3, r4
 800952a:	e7e1      	b.n	80094f0 <rshift+0x68>

0800952c <__hexdig_fun>:
 800952c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009530:	2b09      	cmp	r3, #9
 8009532:	d802      	bhi.n	800953a <__hexdig_fun+0xe>
 8009534:	3820      	subs	r0, #32
 8009536:	b2c0      	uxtb	r0, r0
 8009538:	4770      	bx	lr
 800953a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800953e:	2b05      	cmp	r3, #5
 8009540:	d801      	bhi.n	8009546 <__hexdig_fun+0x1a>
 8009542:	3847      	subs	r0, #71	; 0x47
 8009544:	e7f7      	b.n	8009536 <__hexdig_fun+0xa>
 8009546:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800954a:	2b05      	cmp	r3, #5
 800954c:	d801      	bhi.n	8009552 <__hexdig_fun+0x26>
 800954e:	3827      	subs	r0, #39	; 0x27
 8009550:	e7f1      	b.n	8009536 <__hexdig_fun+0xa>
 8009552:	2000      	movs	r0, #0
 8009554:	4770      	bx	lr
	...

08009558 <__gethex>:
 8009558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800955c:	4617      	mov	r7, r2
 800955e:	680a      	ldr	r2, [r1, #0]
 8009560:	b085      	sub	sp, #20
 8009562:	f102 0b02 	add.w	fp, r2, #2
 8009566:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800956a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800956e:	4681      	mov	r9, r0
 8009570:	468a      	mov	sl, r1
 8009572:	9302      	str	r3, [sp, #8]
 8009574:	32fe      	adds	r2, #254	; 0xfe
 8009576:	eb02 030b 	add.w	r3, r2, fp
 800957a:	46d8      	mov	r8, fp
 800957c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8009580:	9301      	str	r3, [sp, #4]
 8009582:	2830      	cmp	r0, #48	; 0x30
 8009584:	d0f7      	beq.n	8009576 <__gethex+0x1e>
 8009586:	f7ff ffd1 	bl	800952c <__hexdig_fun>
 800958a:	4604      	mov	r4, r0
 800958c:	2800      	cmp	r0, #0
 800958e:	d138      	bne.n	8009602 <__gethex+0xaa>
 8009590:	49a7      	ldr	r1, [pc, #668]	; (8009830 <__gethex+0x2d8>)
 8009592:	2201      	movs	r2, #1
 8009594:	4640      	mov	r0, r8
 8009596:	f7ff fee7 	bl	8009368 <strncmp>
 800959a:	4606      	mov	r6, r0
 800959c:	2800      	cmp	r0, #0
 800959e:	d169      	bne.n	8009674 <__gethex+0x11c>
 80095a0:	f898 0001 	ldrb.w	r0, [r8, #1]
 80095a4:	465d      	mov	r5, fp
 80095a6:	f7ff ffc1 	bl	800952c <__hexdig_fun>
 80095aa:	2800      	cmp	r0, #0
 80095ac:	d064      	beq.n	8009678 <__gethex+0x120>
 80095ae:	465a      	mov	r2, fp
 80095b0:	7810      	ldrb	r0, [r2, #0]
 80095b2:	2830      	cmp	r0, #48	; 0x30
 80095b4:	4690      	mov	r8, r2
 80095b6:	f102 0201 	add.w	r2, r2, #1
 80095ba:	d0f9      	beq.n	80095b0 <__gethex+0x58>
 80095bc:	f7ff ffb6 	bl	800952c <__hexdig_fun>
 80095c0:	2301      	movs	r3, #1
 80095c2:	fab0 f480 	clz	r4, r0
 80095c6:	0964      	lsrs	r4, r4, #5
 80095c8:	465e      	mov	r6, fp
 80095ca:	9301      	str	r3, [sp, #4]
 80095cc:	4642      	mov	r2, r8
 80095ce:	4615      	mov	r5, r2
 80095d0:	3201      	adds	r2, #1
 80095d2:	7828      	ldrb	r0, [r5, #0]
 80095d4:	f7ff ffaa 	bl	800952c <__hexdig_fun>
 80095d8:	2800      	cmp	r0, #0
 80095da:	d1f8      	bne.n	80095ce <__gethex+0x76>
 80095dc:	4994      	ldr	r1, [pc, #592]	; (8009830 <__gethex+0x2d8>)
 80095de:	2201      	movs	r2, #1
 80095e0:	4628      	mov	r0, r5
 80095e2:	f7ff fec1 	bl	8009368 <strncmp>
 80095e6:	b978      	cbnz	r0, 8009608 <__gethex+0xb0>
 80095e8:	b946      	cbnz	r6, 80095fc <__gethex+0xa4>
 80095ea:	1c6e      	adds	r6, r5, #1
 80095ec:	4632      	mov	r2, r6
 80095ee:	4615      	mov	r5, r2
 80095f0:	3201      	adds	r2, #1
 80095f2:	7828      	ldrb	r0, [r5, #0]
 80095f4:	f7ff ff9a 	bl	800952c <__hexdig_fun>
 80095f8:	2800      	cmp	r0, #0
 80095fa:	d1f8      	bne.n	80095ee <__gethex+0x96>
 80095fc:	1b73      	subs	r3, r6, r5
 80095fe:	009e      	lsls	r6, r3, #2
 8009600:	e004      	b.n	800960c <__gethex+0xb4>
 8009602:	2400      	movs	r4, #0
 8009604:	4626      	mov	r6, r4
 8009606:	e7e1      	b.n	80095cc <__gethex+0x74>
 8009608:	2e00      	cmp	r6, #0
 800960a:	d1f7      	bne.n	80095fc <__gethex+0xa4>
 800960c:	782b      	ldrb	r3, [r5, #0]
 800960e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009612:	2b50      	cmp	r3, #80	; 0x50
 8009614:	d13d      	bne.n	8009692 <__gethex+0x13a>
 8009616:	786b      	ldrb	r3, [r5, #1]
 8009618:	2b2b      	cmp	r3, #43	; 0x2b
 800961a:	d02f      	beq.n	800967c <__gethex+0x124>
 800961c:	2b2d      	cmp	r3, #45	; 0x2d
 800961e:	d031      	beq.n	8009684 <__gethex+0x12c>
 8009620:	1c69      	adds	r1, r5, #1
 8009622:	f04f 0b00 	mov.w	fp, #0
 8009626:	7808      	ldrb	r0, [r1, #0]
 8009628:	f7ff ff80 	bl	800952c <__hexdig_fun>
 800962c:	1e42      	subs	r2, r0, #1
 800962e:	b2d2      	uxtb	r2, r2
 8009630:	2a18      	cmp	r2, #24
 8009632:	d82e      	bhi.n	8009692 <__gethex+0x13a>
 8009634:	f1a0 0210 	sub.w	r2, r0, #16
 8009638:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800963c:	f7ff ff76 	bl	800952c <__hexdig_fun>
 8009640:	f100 3cff 	add.w	ip, r0, #4294967295
 8009644:	fa5f fc8c 	uxtb.w	ip, ip
 8009648:	f1bc 0f18 	cmp.w	ip, #24
 800964c:	d91d      	bls.n	800968a <__gethex+0x132>
 800964e:	f1bb 0f00 	cmp.w	fp, #0
 8009652:	d000      	beq.n	8009656 <__gethex+0xfe>
 8009654:	4252      	negs	r2, r2
 8009656:	4416      	add	r6, r2
 8009658:	f8ca 1000 	str.w	r1, [sl]
 800965c:	b1dc      	cbz	r4, 8009696 <__gethex+0x13e>
 800965e:	9b01      	ldr	r3, [sp, #4]
 8009660:	2b00      	cmp	r3, #0
 8009662:	bf14      	ite	ne
 8009664:	f04f 0800 	movne.w	r8, #0
 8009668:	f04f 0806 	moveq.w	r8, #6
 800966c:	4640      	mov	r0, r8
 800966e:	b005      	add	sp, #20
 8009670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009674:	4645      	mov	r5, r8
 8009676:	4626      	mov	r6, r4
 8009678:	2401      	movs	r4, #1
 800967a:	e7c7      	b.n	800960c <__gethex+0xb4>
 800967c:	f04f 0b00 	mov.w	fp, #0
 8009680:	1ca9      	adds	r1, r5, #2
 8009682:	e7d0      	b.n	8009626 <__gethex+0xce>
 8009684:	f04f 0b01 	mov.w	fp, #1
 8009688:	e7fa      	b.n	8009680 <__gethex+0x128>
 800968a:	230a      	movs	r3, #10
 800968c:	fb03 0002 	mla	r0, r3, r2, r0
 8009690:	e7d0      	b.n	8009634 <__gethex+0xdc>
 8009692:	4629      	mov	r1, r5
 8009694:	e7e0      	b.n	8009658 <__gethex+0x100>
 8009696:	eba5 0308 	sub.w	r3, r5, r8
 800969a:	3b01      	subs	r3, #1
 800969c:	4621      	mov	r1, r4
 800969e:	2b07      	cmp	r3, #7
 80096a0:	dc0a      	bgt.n	80096b8 <__gethex+0x160>
 80096a2:	4648      	mov	r0, r9
 80096a4:	f7fd ff56 	bl	8007554 <_Balloc>
 80096a8:	4604      	mov	r4, r0
 80096aa:	b940      	cbnz	r0, 80096be <__gethex+0x166>
 80096ac:	4b61      	ldr	r3, [pc, #388]	; (8009834 <__gethex+0x2dc>)
 80096ae:	4602      	mov	r2, r0
 80096b0:	21e4      	movs	r1, #228	; 0xe4
 80096b2:	4861      	ldr	r0, [pc, #388]	; (8009838 <__gethex+0x2e0>)
 80096b4:	f7ff feb4 	bl	8009420 <__assert_func>
 80096b8:	3101      	adds	r1, #1
 80096ba:	105b      	asrs	r3, r3, #1
 80096bc:	e7ef      	b.n	800969e <__gethex+0x146>
 80096be:	f100 0a14 	add.w	sl, r0, #20
 80096c2:	2300      	movs	r3, #0
 80096c4:	495a      	ldr	r1, [pc, #360]	; (8009830 <__gethex+0x2d8>)
 80096c6:	f8cd a004 	str.w	sl, [sp, #4]
 80096ca:	469b      	mov	fp, r3
 80096cc:	45a8      	cmp	r8, r5
 80096ce:	d342      	bcc.n	8009756 <__gethex+0x1fe>
 80096d0:	9801      	ldr	r0, [sp, #4]
 80096d2:	f840 bb04 	str.w	fp, [r0], #4
 80096d6:	eba0 000a 	sub.w	r0, r0, sl
 80096da:	1080      	asrs	r0, r0, #2
 80096dc:	6120      	str	r0, [r4, #16]
 80096de:	ea4f 1840 	mov.w	r8, r0, lsl #5
 80096e2:	4658      	mov	r0, fp
 80096e4:	f7fe f828 	bl	8007738 <__hi0bits>
 80096e8:	683d      	ldr	r5, [r7, #0]
 80096ea:	eba8 0000 	sub.w	r0, r8, r0
 80096ee:	42a8      	cmp	r0, r5
 80096f0:	dd59      	ble.n	80097a6 <__gethex+0x24e>
 80096f2:	eba0 0805 	sub.w	r8, r0, r5
 80096f6:	4641      	mov	r1, r8
 80096f8:	4620      	mov	r0, r4
 80096fa:	f7fe fbb7 	bl	8007e6c <__any_on>
 80096fe:	4683      	mov	fp, r0
 8009700:	b1b8      	cbz	r0, 8009732 <__gethex+0x1da>
 8009702:	f108 33ff 	add.w	r3, r8, #4294967295
 8009706:	1159      	asrs	r1, r3, #5
 8009708:	f003 021f 	and.w	r2, r3, #31
 800970c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009710:	f04f 0b01 	mov.w	fp, #1
 8009714:	fa0b f202 	lsl.w	r2, fp, r2
 8009718:	420a      	tst	r2, r1
 800971a:	d00a      	beq.n	8009732 <__gethex+0x1da>
 800971c:	455b      	cmp	r3, fp
 800971e:	dd06      	ble.n	800972e <__gethex+0x1d6>
 8009720:	f1a8 0102 	sub.w	r1, r8, #2
 8009724:	4620      	mov	r0, r4
 8009726:	f7fe fba1 	bl	8007e6c <__any_on>
 800972a:	2800      	cmp	r0, #0
 800972c:	d138      	bne.n	80097a0 <__gethex+0x248>
 800972e:	f04f 0b02 	mov.w	fp, #2
 8009732:	4641      	mov	r1, r8
 8009734:	4620      	mov	r0, r4
 8009736:	f7ff fea7 	bl	8009488 <rshift>
 800973a:	4446      	add	r6, r8
 800973c:	68bb      	ldr	r3, [r7, #8]
 800973e:	42b3      	cmp	r3, r6
 8009740:	da41      	bge.n	80097c6 <__gethex+0x26e>
 8009742:	4621      	mov	r1, r4
 8009744:	4648      	mov	r0, r9
 8009746:	f7fd ff45 	bl	80075d4 <_Bfree>
 800974a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800974c:	2300      	movs	r3, #0
 800974e:	6013      	str	r3, [r2, #0]
 8009750:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8009754:	e78a      	b.n	800966c <__gethex+0x114>
 8009756:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800975a:	2a2e      	cmp	r2, #46	; 0x2e
 800975c:	d014      	beq.n	8009788 <__gethex+0x230>
 800975e:	2b20      	cmp	r3, #32
 8009760:	d106      	bne.n	8009770 <__gethex+0x218>
 8009762:	9b01      	ldr	r3, [sp, #4]
 8009764:	f843 bb04 	str.w	fp, [r3], #4
 8009768:	f04f 0b00 	mov.w	fp, #0
 800976c:	9301      	str	r3, [sp, #4]
 800976e:	465b      	mov	r3, fp
 8009770:	7828      	ldrb	r0, [r5, #0]
 8009772:	9303      	str	r3, [sp, #12]
 8009774:	f7ff feda 	bl	800952c <__hexdig_fun>
 8009778:	9b03      	ldr	r3, [sp, #12]
 800977a:	f000 000f 	and.w	r0, r0, #15
 800977e:	4098      	lsls	r0, r3
 8009780:	ea4b 0b00 	orr.w	fp, fp, r0
 8009784:	3304      	adds	r3, #4
 8009786:	e7a1      	b.n	80096cc <__gethex+0x174>
 8009788:	45a8      	cmp	r8, r5
 800978a:	d8e8      	bhi.n	800975e <__gethex+0x206>
 800978c:	2201      	movs	r2, #1
 800978e:	4628      	mov	r0, r5
 8009790:	9303      	str	r3, [sp, #12]
 8009792:	f7ff fde9 	bl	8009368 <strncmp>
 8009796:	4926      	ldr	r1, [pc, #152]	; (8009830 <__gethex+0x2d8>)
 8009798:	9b03      	ldr	r3, [sp, #12]
 800979a:	2800      	cmp	r0, #0
 800979c:	d1df      	bne.n	800975e <__gethex+0x206>
 800979e:	e795      	b.n	80096cc <__gethex+0x174>
 80097a0:	f04f 0b03 	mov.w	fp, #3
 80097a4:	e7c5      	b.n	8009732 <__gethex+0x1da>
 80097a6:	da0b      	bge.n	80097c0 <__gethex+0x268>
 80097a8:	eba5 0800 	sub.w	r8, r5, r0
 80097ac:	4621      	mov	r1, r4
 80097ae:	4642      	mov	r2, r8
 80097b0:	4648      	mov	r0, r9
 80097b2:	f7fe f929 	bl	8007a08 <__lshift>
 80097b6:	eba6 0608 	sub.w	r6, r6, r8
 80097ba:	4604      	mov	r4, r0
 80097bc:	f100 0a14 	add.w	sl, r0, #20
 80097c0:	f04f 0b00 	mov.w	fp, #0
 80097c4:	e7ba      	b.n	800973c <__gethex+0x1e4>
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	42b3      	cmp	r3, r6
 80097ca:	dd73      	ble.n	80098b4 <__gethex+0x35c>
 80097cc:	1b9e      	subs	r6, r3, r6
 80097ce:	42b5      	cmp	r5, r6
 80097d0:	dc34      	bgt.n	800983c <__gethex+0x2e4>
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	2b02      	cmp	r3, #2
 80097d6:	d023      	beq.n	8009820 <__gethex+0x2c8>
 80097d8:	2b03      	cmp	r3, #3
 80097da:	d025      	beq.n	8009828 <__gethex+0x2d0>
 80097dc:	2b01      	cmp	r3, #1
 80097de:	d115      	bne.n	800980c <__gethex+0x2b4>
 80097e0:	42b5      	cmp	r5, r6
 80097e2:	d113      	bne.n	800980c <__gethex+0x2b4>
 80097e4:	2d01      	cmp	r5, #1
 80097e6:	d10b      	bne.n	8009800 <__gethex+0x2a8>
 80097e8:	9a02      	ldr	r2, [sp, #8]
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	6013      	str	r3, [r2, #0]
 80097ee:	2301      	movs	r3, #1
 80097f0:	6123      	str	r3, [r4, #16]
 80097f2:	f8ca 3000 	str.w	r3, [sl]
 80097f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80097f8:	f04f 0862 	mov.w	r8, #98	; 0x62
 80097fc:	601c      	str	r4, [r3, #0]
 80097fe:	e735      	b.n	800966c <__gethex+0x114>
 8009800:	1e69      	subs	r1, r5, #1
 8009802:	4620      	mov	r0, r4
 8009804:	f7fe fb32 	bl	8007e6c <__any_on>
 8009808:	2800      	cmp	r0, #0
 800980a:	d1ed      	bne.n	80097e8 <__gethex+0x290>
 800980c:	4621      	mov	r1, r4
 800980e:	4648      	mov	r0, r9
 8009810:	f7fd fee0 	bl	80075d4 <_Bfree>
 8009814:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009816:	2300      	movs	r3, #0
 8009818:	6013      	str	r3, [r2, #0]
 800981a:	f04f 0850 	mov.w	r8, #80	; 0x50
 800981e:	e725      	b.n	800966c <__gethex+0x114>
 8009820:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009822:	2b00      	cmp	r3, #0
 8009824:	d1f2      	bne.n	800980c <__gethex+0x2b4>
 8009826:	e7df      	b.n	80097e8 <__gethex+0x290>
 8009828:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800982a:	2b00      	cmp	r3, #0
 800982c:	d1dc      	bne.n	80097e8 <__gethex+0x290>
 800982e:	e7ed      	b.n	800980c <__gethex+0x2b4>
 8009830:	0800a9ec 	.word	0x0800a9ec
 8009834:	0800a885 	.word	0x0800a885
 8009838:	0800ab96 	.word	0x0800ab96
 800983c:	f106 38ff 	add.w	r8, r6, #4294967295
 8009840:	f1bb 0f00 	cmp.w	fp, #0
 8009844:	d133      	bne.n	80098ae <__gethex+0x356>
 8009846:	f1b8 0f00 	cmp.w	r8, #0
 800984a:	d004      	beq.n	8009856 <__gethex+0x2fe>
 800984c:	4641      	mov	r1, r8
 800984e:	4620      	mov	r0, r4
 8009850:	f7fe fb0c 	bl	8007e6c <__any_on>
 8009854:	4683      	mov	fp, r0
 8009856:	ea4f 1268 	mov.w	r2, r8, asr #5
 800985a:	2301      	movs	r3, #1
 800985c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009860:	f008 081f 	and.w	r8, r8, #31
 8009864:	fa03 f308 	lsl.w	r3, r3, r8
 8009868:	4213      	tst	r3, r2
 800986a:	4631      	mov	r1, r6
 800986c:	4620      	mov	r0, r4
 800986e:	bf18      	it	ne
 8009870:	f04b 0b02 	orrne.w	fp, fp, #2
 8009874:	1bad      	subs	r5, r5, r6
 8009876:	f7ff fe07 	bl	8009488 <rshift>
 800987a:	687e      	ldr	r6, [r7, #4]
 800987c:	f04f 0802 	mov.w	r8, #2
 8009880:	f1bb 0f00 	cmp.w	fp, #0
 8009884:	d04a      	beq.n	800991c <__gethex+0x3c4>
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	2b02      	cmp	r3, #2
 800988a:	d016      	beq.n	80098ba <__gethex+0x362>
 800988c:	2b03      	cmp	r3, #3
 800988e:	d018      	beq.n	80098c2 <__gethex+0x36a>
 8009890:	2b01      	cmp	r3, #1
 8009892:	d109      	bne.n	80098a8 <__gethex+0x350>
 8009894:	f01b 0f02 	tst.w	fp, #2
 8009898:	d006      	beq.n	80098a8 <__gethex+0x350>
 800989a:	f8da 3000 	ldr.w	r3, [sl]
 800989e:	ea4b 0b03 	orr.w	fp, fp, r3
 80098a2:	f01b 0f01 	tst.w	fp, #1
 80098a6:	d10f      	bne.n	80098c8 <__gethex+0x370>
 80098a8:	f048 0810 	orr.w	r8, r8, #16
 80098ac:	e036      	b.n	800991c <__gethex+0x3c4>
 80098ae:	f04f 0b01 	mov.w	fp, #1
 80098b2:	e7d0      	b.n	8009856 <__gethex+0x2fe>
 80098b4:	f04f 0801 	mov.w	r8, #1
 80098b8:	e7e2      	b.n	8009880 <__gethex+0x328>
 80098ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80098bc:	f1c3 0301 	rsb	r3, r3, #1
 80098c0:	930f      	str	r3, [sp, #60]	; 0x3c
 80098c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d0ef      	beq.n	80098a8 <__gethex+0x350>
 80098c8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80098cc:	f104 0214 	add.w	r2, r4, #20
 80098d0:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80098d4:	9301      	str	r3, [sp, #4]
 80098d6:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 80098da:	2300      	movs	r3, #0
 80098dc:	4694      	mov	ip, r2
 80098de:	f852 1b04 	ldr.w	r1, [r2], #4
 80098e2:	f1b1 3fff 	cmp.w	r1, #4294967295
 80098e6:	d01e      	beq.n	8009926 <__gethex+0x3ce>
 80098e8:	3101      	adds	r1, #1
 80098ea:	f8cc 1000 	str.w	r1, [ip]
 80098ee:	f1b8 0f02 	cmp.w	r8, #2
 80098f2:	f104 0214 	add.w	r2, r4, #20
 80098f6:	d13d      	bne.n	8009974 <__gethex+0x41c>
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	3b01      	subs	r3, #1
 80098fc:	42ab      	cmp	r3, r5
 80098fe:	d10b      	bne.n	8009918 <__gethex+0x3c0>
 8009900:	1169      	asrs	r1, r5, #5
 8009902:	2301      	movs	r3, #1
 8009904:	f005 051f 	and.w	r5, r5, #31
 8009908:	fa03 f505 	lsl.w	r5, r3, r5
 800990c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009910:	421d      	tst	r5, r3
 8009912:	bf18      	it	ne
 8009914:	f04f 0801 	movne.w	r8, #1
 8009918:	f048 0820 	orr.w	r8, r8, #32
 800991c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800991e:	601c      	str	r4, [r3, #0]
 8009920:	9b02      	ldr	r3, [sp, #8]
 8009922:	601e      	str	r6, [r3, #0]
 8009924:	e6a2      	b.n	800966c <__gethex+0x114>
 8009926:	4290      	cmp	r0, r2
 8009928:	f842 3c04 	str.w	r3, [r2, #-4]
 800992c:	d8d6      	bhi.n	80098dc <__gethex+0x384>
 800992e:	68a2      	ldr	r2, [r4, #8]
 8009930:	4593      	cmp	fp, r2
 8009932:	db17      	blt.n	8009964 <__gethex+0x40c>
 8009934:	6861      	ldr	r1, [r4, #4]
 8009936:	4648      	mov	r0, r9
 8009938:	3101      	adds	r1, #1
 800993a:	f7fd fe0b 	bl	8007554 <_Balloc>
 800993e:	4682      	mov	sl, r0
 8009940:	b918      	cbnz	r0, 800994a <__gethex+0x3f2>
 8009942:	4b1b      	ldr	r3, [pc, #108]	; (80099b0 <__gethex+0x458>)
 8009944:	4602      	mov	r2, r0
 8009946:	2184      	movs	r1, #132	; 0x84
 8009948:	e6b3      	b.n	80096b2 <__gethex+0x15a>
 800994a:	6922      	ldr	r2, [r4, #16]
 800994c:	3202      	adds	r2, #2
 800994e:	f104 010c 	add.w	r1, r4, #12
 8009952:	0092      	lsls	r2, r2, #2
 8009954:	300c      	adds	r0, #12
 8009956:	f7ff fd4b 	bl	80093f0 <memcpy>
 800995a:	4621      	mov	r1, r4
 800995c:	4648      	mov	r0, r9
 800995e:	f7fd fe39 	bl	80075d4 <_Bfree>
 8009962:	4654      	mov	r4, sl
 8009964:	6922      	ldr	r2, [r4, #16]
 8009966:	1c51      	adds	r1, r2, #1
 8009968:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800996c:	6121      	str	r1, [r4, #16]
 800996e:	2101      	movs	r1, #1
 8009970:	6151      	str	r1, [r2, #20]
 8009972:	e7bc      	b.n	80098ee <__gethex+0x396>
 8009974:	6921      	ldr	r1, [r4, #16]
 8009976:	4559      	cmp	r1, fp
 8009978:	dd0b      	ble.n	8009992 <__gethex+0x43a>
 800997a:	2101      	movs	r1, #1
 800997c:	4620      	mov	r0, r4
 800997e:	f7ff fd83 	bl	8009488 <rshift>
 8009982:	68bb      	ldr	r3, [r7, #8]
 8009984:	3601      	adds	r6, #1
 8009986:	42b3      	cmp	r3, r6
 8009988:	f6ff aedb 	blt.w	8009742 <__gethex+0x1ea>
 800998c:	f04f 0801 	mov.w	r8, #1
 8009990:	e7c2      	b.n	8009918 <__gethex+0x3c0>
 8009992:	f015 051f 	ands.w	r5, r5, #31
 8009996:	d0f9      	beq.n	800998c <__gethex+0x434>
 8009998:	9b01      	ldr	r3, [sp, #4]
 800999a:	441a      	add	r2, r3
 800999c:	f1c5 0520 	rsb	r5, r5, #32
 80099a0:	f852 0c04 	ldr.w	r0, [r2, #-4]
 80099a4:	f7fd fec8 	bl	8007738 <__hi0bits>
 80099a8:	42a8      	cmp	r0, r5
 80099aa:	dbe6      	blt.n	800997a <__gethex+0x422>
 80099ac:	e7ee      	b.n	800998c <__gethex+0x434>
 80099ae:	bf00      	nop
 80099b0:	0800a885 	.word	0x0800a885

080099b4 <L_shift>:
 80099b4:	f1c2 0208 	rsb	r2, r2, #8
 80099b8:	0092      	lsls	r2, r2, #2
 80099ba:	b570      	push	{r4, r5, r6, lr}
 80099bc:	f1c2 0620 	rsb	r6, r2, #32
 80099c0:	6843      	ldr	r3, [r0, #4]
 80099c2:	6804      	ldr	r4, [r0, #0]
 80099c4:	fa03 f506 	lsl.w	r5, r3, r6
 80099c8:	432c      	orrs	r4, r5
 80099ca:	40d3      	lsrs	r3, r2
 80099cc:	6004      	str	r4, [r0, #0]
 80099ce:	f840 3f04 	str.w	r3, [r0, #4]!
 80099d2:	4288      	cmp	r0, r1
 80099d4:	d3f4      	bcc.n	80099c0 <L_shift+0xc>
 80099d6:	bd70      	pop	{r4, r5, r6, pc}

080099d8 <__match>:
 80099d8:	b530      	push	{r4, r5, lr}
 80099da:	6803      	ldr	r3, [r0, #0]
 80099dc:	3301      	adds	r3, #1
 80099de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80099e2:	b914      	cbnz	r4, 80099ea <__match+0x12>
 80099e4:	6003      	str	r3, [r0, #0]
 80099e6:	2001      	movs	r0, #1
 80099e8:	bd30      	pop	{r4, r5, pc}
 80099ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80099ee:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80099f2:	2d19      	cmp	r5, #25
 80099f4:	bf98      	it	ls
 80099f6:	3220      	addls	r2, #32
 80099f8:	42a2      	cmp	r2, r4
 80099fa:	d0f0      	beq.n	80099de <__match+0x6>
 80099fc:	2000      	movs	r0, #0
 80099fe:	e7f3      	b.n	80099e8 <__match+0x10>

08009a00 <__hexnan>:
 8009a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a04:	680b      	ldr	r3, [r1, #0]
 8009a06:	6801      	ldr	r1, [r0, #0]
 8009a08:	115e      	asrs	r6, r3, #5
 8009a0a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009a0e:	f013 031f 	ands.w	r3, r3, #31
 8009a12:	b087      	sub	sp, #28
 8009a14:	bf18      	it	ne
 8009a16:	3604      	addne	r6, #4
 8009a18:	2500      	movs	r5, #0
 8009a1a:	1f37      	subs	r7, r6, #4
 8009a1c:	4682      	mov	sl, r0
 8009a1e:	4690      	mov	r8, r2
 8009a20:	9301      	str	r3, [sp, #4]
 8009a22:	f846 5c04 	str.w	r5, [r6, #-4]
 8009a26:	46b9      	mov	r9, r7
 8009a28:	463c      	mov	r4, r7
 8009a2a:	9502      	str	r5, [sp, #8]
 8009a2c:	46ab      	mov	fp, r5
 8009a2e:	784a      	ldrb	r2, [r1, #1]
 8009a30:	1c4b      	adds	r3, r1, #1
 8009a32:	9303      	str	r3, [sp, #12]
 8009a34:	b342      	cbz	r2, 8009a88 <__hexnan+0x88>
 8009a36:	4610      	mov	r0, r2
 8009a38:	9105      	str	r1, [sp, #20]
 8009a3a:	9204      	str	r2, [sp, #16]
 8009a3c:	f7ff fd76 	bl	800952c <__hexdig_fun>
 8009a40:	2800      	cmp	r0, #0
 8009a42:	d14f      	bne.n	8009ae4 <__hexnan+0xe4>
 8009a44:	9a04      	ldr	r2, [sp, #16]
 8009a46:	9905      	ldr	r1, [sp, #20]
 8009a48:	2a20      	cmp	r2, #32
 8009a4a:	d818      	bhi.n	8009a7e <__hexnan+0x7e>
 8009a4c:	9b02      	ldr	r3, [sp, #8]
 8009a4e:	459b      	cmp	fp, r3
 8009a50:	dd13      	ble.n	8009a7a <__hexnan+0x7a>
 8009a52:	454c      	cmp	r4, r9
 8009a54:	d206      	bcs.n	8009a64 <__hexnan+0x64>
 8009a56:	2d07      	cmp	r5, #7
 8009a58:	dc04      	bgt.n	8009a64 <__hexnan+0x64>
 8009a5a:	462a      	mov	r2, r5
 8009a5c:	4649      	mov	r1, r9
 8009a5e:	4620      	mov	r0, r4
 8009a60:	f7ff ffa8 	bl	80099b4 <L_shift>
 8009a64:	4544      	cmp	r4, r8
 8009a66:	d950      	bls.n	8009b0a <__hexnan+0x10a>
 8009a68:	2300      	movs	r3, #0
 8009a6a:	f1a4 0904 	sub.w	r9, r4, #4
 8009a6e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009a72:	f8cd b008 	str.w	fp, [sp, #8]
 8009a76:	464c      	mov	r4, r9
 8009a78:	461d      	mov	r5, r3
 8009a7a:	9903      	ldr	r1, [sp, #12]
 8009a7c:	e7d7      	b.n	8009a2e <__hexnan+0x2e>
 8009a7e:	2a29      	cmp	r2, #41	; 0x29
 8009a80:	d155      	bne.n	8009b2e <__hexnan+0x12e>
 8009a82:	3102      	adds	r1, #2
 8009a84:	f8ca 1000 	str.w	r1, [sl]
 8009a88:	f1bb 0f00 	cmp.w	fp, #0
 8009a8c:	d04f      	beq.n	8009b2e <__hexnan+0x12e>
 8009a8e:	454c      	cmp	r4, r9
 8009a90:	d206      	bcs.n	8009aa0 <__hexnan+0xa0>
 8009a92:	2d07      	cmp	r5, #7
 8009a94:	dc04      	bgt.n	8009aa0 <__hexnan+0xa0>
 8009a96:	462a      	mov	r2, r5
 8009a98:	4649      	mov	r1, r9
 8009a9a:	4620      	mov	r0, r4
 8009a9c:	f7ff ff8a 	bl	80099b4 <L_shift>
 8009aa0:	4544      	cmp	r4, r8
 8009aa2:	d934      	bls.n	8009b0e <__hexnan+0x10e>
 8009aa4:	f1a8 0204 	sub.w	r2, r8, #4
 8009aa8:	4623      	mov	r3, r4
 8009aaa:	f853 1b04 	ldr.w	r1, [r3], #4
 8009aae:	f842 1f04 	str.w	r1, [r2, #4]!
 8009ab2:	429f      	cmp	r7, r3
 8009ab4:	d2f9      	bcs.n	8009aaa <__hexnan+0xaa>
 8009ab6:	1b3b      	subs	r3, r7, r4
 8009ab8:	f023 0303 	bic.w	r3, r3, #3
 8009abc:	3304      	adds	r3, #4
 8009abe:	3e03      	subs	r6, #3
 8009ac0:	3401      	adds	r4, #1
 8009ac2:	42a6      	cmp	r6, r4
 8009ac4:	bf38      	it	cc
 8009ac6:	2304      	movcc	r3, #4
 8009ac8:	4443      	add	r3, r8
 8009aca:	2200      	movs	r2, #0
 8009acc:	f843 2b04 	str.w	r2, [r3], #4
 8009ad0:	429f      	cmp	r7, r3
 8009ad2:	d2fb      	bcs.n	8009acc <__hexnan+0xcc>
 8009ad4:	683b      	ldr	r3, [r7, #0]
 8009ad6:	b91b      	cbnz	r3, 8009ae0 <__hexnan+0xe0>
 8009ad8:	4547      	cmp	r7, r8
 8009ada:	d126      	bne.n	8009b2a <__hexnan+0x12a>
 8009adc:	2301      	movs	r3, #1
 8009ade:	603b      	str	r3, [r7, #0]
 8009ae0:	2005      	movs	r0, #5
 8009ae2:	e025      	b.n	8009b30 <__hexnan+0x130>
 8009ae4:	3501      	adds	r5, #1
 8009ae6:	2d08      	cmp	r5, #8
 8009ae8:	f10b 0b01 	add.w	fp, fp, #1
 8009aec:	dd06      	ble.n	8009afc <__hexnan+0xfc>
 8009aee:	4544      	cmp	r4, r8
 8009af0:	d9c3      	bls.n	8009a7a <__hexnan+0x7a>
 8009af2:	2300      	movs	r3, #0
 8009af4:	f844 3c04 	str.w	r3, [r4, #-4]
 8009af8:	2501      	movs	r5, #1
 8009afa:	3c04      	subs	r4, #4
 8009afc:	6822      	ldr	r2, [r4, #0]
 8009afe:	f000 000f 	and.w	r0, r0, #15
 8009b02:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009b06:	6020      	str	r0, [r4, #0]
 8009b08:	e7b7      	b.n	8009a7a <__hexnan+0x7a>
 8009b0a:	2508      	movs	r5, #8
 8009b0c:	e7b5      	b.n	8009a7a <__hexnan+0x7a>
 8009b0e:	9b01      	ldr	r3, [sp, #4]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d0df      	beq.n	8009ad4 <__hexnan+0xd4>
 8009b14:	f1c3 0320 	rsb	r3, r3, #32
 8009b18:	f04f 32ff 	mov.w	r2, #4294967295
 8009b1c:	40da      	lsrs	r2, r3
 8009b1e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009b22:	4013      	ands	r3, r2
 8009b24:	f846 3c04 	str.w	r3, [r6, #-4]
 8009b28:	e7d4      	b.n	8009ad4 <__hexnan+0xd4>
 8009b2a:	3f04      	subs	r7, #4
 8009b2c:	e7d2      	b.n	8009ad4 <__hexnan+0xd4>
 8009b2e:	2004      	movs	r0, #4
 8009b30:	b007      	add	sp, #28
 8009b32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009b36 <__ascii_mbtowc>:
 8009b36:	b082      	sub	sp, #8
 8009b38:	b901      	cbnz	r1, 8009b3c <__ascii_mbtowc+0x6>
 8009b3a:	a901      	add	r1, sp, #4
 8009b3c:	b142      	cbz	r2, 8009b50 <__ascii_mbtowc+0x1a>
 8009b3e:	b14b      	cbz	r3, 8009b54 <__ascii_mbtowc+0x1e>
 8009b40:	7813      	ldrb	r3, [r2, #0]
 8009b42:	600b      	str	r3, [r1, #0]
 8009b44:	7812      	ldrb	r2, [r2, #0]
 8009b46:	1e10      	subs	r0, r2, #0
 8009b48:	bf18      	it	ne
 8009b4a:	2001      	movne	r0, #1
 8009b4c:	b002      	add	sp, #8
 8009b4e:	4770      	bx	lr
 8009b50:	4610      	mov	r0, r2
 8009b52:	e7fb      	b.n	8009b4c <__ascii_mbtowc+0x16>
 8009b54:	f06f 0001 	mvn.w	r0, #1
 8009b58:	e7f8      	b.n	8009b4c <__ascii_mbtowc+0x16>

08009b5a <_realloc_r>:
 8009b5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b5e:	4680      	mov	r8, r0
 8009b60:	4614      	mov	r4, r2
 8009b62:	460e      	mov	r6, r1
 8009b64:	b921      	cbnz	r1, 8009b70 <_realloc_r+0x16>
 8009b66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b6a:	4611      	mov	r1, r2
 8009b6c:	f7fd bc66 	b.w	800743c <_malloc_r>
 8009b70:	b92a      	cbnz	r2, 8009b7e <_realloc_r+0x24>
 8009b72:	f7fd fbef 	bl	8007354 <_free_r>
 8009b76:	4625      	mov	r5, r4
 8009b78:	4628      	mov	r0, r5
 8009b7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b7e:	f000 f842 	bl	8009c06 <_malloc_usable_size_r>
 8009b82:	4284      	cmp	r4, r0
 8009b84:	4607      	mov	r7, r0
 8009b86:	d802      	bhi.n	8009b8e <_realloc_r+0x34>
 8009b88:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009b8c:	d812      	bhi.n	8009bb4 <_realloc_r+0x5a>
 8009b8e:	4621      	mov	r1, r4
 8009b90:	4640      	mov	r0, r8
 8009b92:	f7fd fc53 	bl	800743c <_malloc_r>
 8009b96:	4605      	mov	r5, r0
 8009b98:	2800      	cmp	r0, #0
 8009b9a:	d0ed      	beq.n	8009b78 <_realloc_r+0x1e>
 8009b9c:	42bc      	cmp	r4, r7
 8009b9e:	4622      	mov	r2, r4
 8009ba0:	4631      	mov	r1, r6
 8009ba2:	bf28      	it	cs
 8009ba4:	463a      	movcs	r2, r7
 8009ba6:	f7ff fc23 	bl	80093f0 <memcpy>
 8009baa:	4631      	mov	r1, r6
 8009bac:	4640      	mov	r0, r8
 8009bae:	f7fd fbd1 	bl	8007354 <_free_r>
 8009bb2:	e7e1      	b.n	8009b78 <_realloc_r+0x1e>
 8009bb4:	4635      	mov	r5, r6
 8009bb6:	e7df      	b.n	8009b78 <_realloc_r+0x1e>

08009bb8 <__ascii_wctomb>:
 8009bb8:	b149      	cbz	r1, 8009bce <__ascii_wctomb+0x16>
 8009bba:	2aff      	cmp	r2, #255	; 0xff
 8009bbc:	bf85      	ittet	hi
 8009bbe:	238a      	movhi	r3, #138	; 0x8a
 8009bc0:	6003      	strhi	r3, [r0, #0]
 8009bc2:	700a      	strbls	r2, [r1, #0]
 8009bc4:	f04f 30ff 	movhi.w	r0, #4294967295
 8009bc8:	bf98      	it	ls
 8009bca:	2001      	movls	r0, #1
 8009bcc:	4770      	bx	lr
 8009bce:	4608      	mov	r0, r1
 8009bd0:	4770      	bx	lr
	...

08009bd4 <fiprintf>:
 8009bd4:	b40e      	push	{r1, r2, r3}
 8009bd6:	b503      	push	{r0, r1, lr}
 8009bd8:	4601      	mov	r1, r0
 8009bda:	ab03      	add	r3, sp, #12
 8009bdc:	4805      	ldr	r0, [pc, #20]	; (8009bf4 <fiprintf+0x20>)
 8009bde:	f853 2b04 	ldr.w	r2, [r3], #4
 8009be2:	6800      	ldr	r0, [r0, #0]
 8009be4:	9301      	str	r3, [sp, #4]
 8009be6:	f7ff f97b 	bl	8008ee0 <_vfiprintf_r>
 8009bea:	b002      	add	sp, #8
 8009bec:	f85d eb04 	ldr.w	lr, [sp], #4
 8009bf0:	b003      	add	sp, #12
 8009bf2:	4770      	bx	lr
 8009bf4:	20000064 	.word	0x20000064

08009bf8 <abort>:
 8009bf8:	b508      	push	{r3, lr}
 8009bfa:	2006      	movs	r0, #6
 8009bfc:	f000 f834 	bl	8009c68 <raise>
 8009c00:	2001      	movs	r0, #1
 8009c02:	f7f8 ff33 	bl	8002a6c <_exit>

08009c06 <_malloc_usable_size_r>:
 8009c06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c0a:	1f18      	subs	r0, r3, #4
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	bfbc      	itt	lt
 8009c10:	580b      	ldrlt	r3, [r1, r0]
 8009c12:	18c0      	addlt	r0, r0, r3
 8009c14:	4770      	bx	lr

08009c16 <_raise_r>:
 8009c16:	291f      	cmp	r1, #31
 8009c18:	b538      	push	{r3, r4, r5, lr}
 8009c1a:	4604      	mov	r4, r0
 8009c1c:	460d      	mov	r5, r1
 8009c1e:	d904      	bls.n	8009c2a <_raise_r+0x14>
 8009c20:	2316      	movs	r3, #22
 8009c22:	6003      	str	r3, [r0, #0]
 8009c24:	f04f 30ff 	mov.w	r0, #4294967295
 8009c28:	bd38      	pop	{r3, r4, r5, pc}
 8009c2a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009c2c:	b112      	cbz	r2, 8009c34 <_raise_r+0x1e>
 8009c2e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009c32:	b94b      	cbnz	r3, 8009c48 <_raise_r+0x32>
 8009c34:	4620      	mov	r0, r4
 8009c36:	f000 f831 	bl	8009c9c <_getpid_r>
 8009c3a:	462a      	mov	r2, r5
 8009c3c:	4601      	mov	r1, r0
 8009c3e:	4620      	mov	r0, r4
 8009c40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c44:	f000 b818 	b.w	8009c78 <_kill_r>
 8009c48:	2b01      	cmp	r3, #1
 8009c4a:	d00a      	beq.n	8009c62 <_raise_r+0x4c>
 8009c4c:	1c59      	adds	r1, r3, #1
 8009c4e:	d103      	bne.n	8009c58 <_raise_r+0x42>
 8009c50:	2316      	movs	r3, #22
 8009c52:	6003      	str	r3, [r0, #0]
 8009c54:	2001      	movs	r0, #1
 8009c56:	e7e7      	b.n	8009c28 <_raise_r+0x12>
 8009c58:	2400      	movs	r4, #0
 8009c5a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009c5e:	4628      	mov	r0, r5
 8009c60:	4798      	blx	r3
 8009c62:	2000      	movs	r0, #0
 8009c64:	e7e0      	b.n	8009c28 <_raise_r+0x12>
	...

08009c68 <raise>:
 8009c68:	4b02      	ldr	r3, [pc, #8]	; (8009c74 <raise+0xc>)
 8009c6a:	4601      	mov	r1, r0
 8009c6c:	6818      	ldr	r0, [r3, #0]
 8009c6e:	f7ff bfd2 	b.w	8009c16 <_raise_r>
 8009c72:	bf00      	nop
 8009c74:	20000064 	.word	0x20000064

08009c78 <_kill_r>:
 8009c78:	b538      	push	{r3, r4, r5, lr}
 8009c7a:	4d07      	ldr	r5, [pc, #28]	; (8009c98 <_kill_r+0x20>)
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	4604      	mov	r4, r0
 8009c80:	4608      	mov	r0, r1
 8009c82:	4611      	mov	r1, r2
 8009c84:	602b      	str	r3, [r5, #0]
 8009c86:	f7f8 fee1 	bl	8002a4c <_kill>
 8009c8a:	1c43      	adds	r3, r0, #1
 8009c8c:	d102      	bne.n	8009c94 <_kill_r+0x1c>
 8009c8e:	682b      	ldr	r3, [r5, #0]
 8009c90:	b103      	cbz	r3, 8009c94 <_kill_r+0x1c>
 8009c92:	6023      	str	r3, [r4, #0]
 8009c94:	bd38      	pop	{r3, r4, r5, pc}
 8009c96:	bf00      	nop
 8009c98:	200004c4 	.word	0x200004c4

08009c9c <_getpid_r>:
 8009c9c:	f7f8 bece 	b.w	8002a3c <_getpid>

08009ca0 <powf>:
 8009ca0:	b508      	push	{r3, lr}
 8009ca2:	ed2d 8b04 	vpush	{d8-d9}
 8009ca6:	eeb0 8a60 	vmov.f32	s16, s1
 8009caa:	eeb0 9a40 	vmov.f32	s18, s0
 8009cae:	f000 f85b 	bl	8009d68 <__ieee754_powf>
 8009cb2:	eeb4 8a48 	vcmp.f32	s16, s16
 8009cb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cba:	eef0 8a40 	vmov.f32	s17, s0
 8009cbe:	d63e      	bvs.n	8009d3e <powf+0x9e>
 8009cc0:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8009cc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cc8:	d112      	bne.n	8009cf0 <powf+0x50>
 8009cca:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8009cce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cd2:	d039      	beq.n	8009d48 <powf+0xa8>
 8009cd4:	eeb0 0a48 	vmov.f32	s0, s16
 8009cd8:	f000 f839 	bl	8009d4e <finitef>
 8009cdc:	b378      	cbz	r0, 8009d3e <powf+0x9e>
 8009cde:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8009ce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ce6:	d52a      	bpl.n	8009d3e <powf+0x9e>
 8009ce8:	f7fc fc86 	bl	80065f8 <__errno>
 8009cec:	2322      	movs	r3, #34	; 0x22
 8009cee:	e014      	b.n	8009d1a <powf+0x7a>
 8009cf0:	f000 f82d 	bl	8009d4e <finitef>
 8009cf4:	b998      	cbnz	r0, 8009d1e <powf+0x7e>
 8009cf6:	eeb0 0a49 	vmov.f32	s0, s18
 8009cfa:	f000 f828 	bl	8009d4e <finitef>
 8009cfe:	b170      	cbz	r0, 8009d1e <powf+0x7e>
 8009d00:	eeb0 0a48 	vmov.f32	s0, s16
 8009d04:	f000 f823 	bl	8009d4e <finitef>
 8009d08:	b148      	cbz	r0, 8009d1e <powf+0x7e>
 8009d0a:	eef4 8a68 	vcmp.f32	s17, s17
 8009d0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d12:	d7e9      	bvc.n	8009ce8 <powf+0x48>
 8009d14:	f7fc fc70 	bl	80065f8 <__errno>
 8009d18:	2321      	movs	r3, #33	; 0x21
 8009d1a:	6003      	str	r3, [r0, #0]
 8009d1c:	e00f      	b.n	8009d3e <powf+0x9e>
 8009d1e:	eef5 8a40 	vcmp.f32	s17, #0.0
 8009d22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d26:	d10a      	bne.n	8009d3e <powf+0x9e>
 8009d28:	eeb0 0a49 	vmov.f32	s0, s18
 8009d2c:	f000 f80f 	bl	8009d4e <finitef>
 8009d30:	b128      	cbz	r0, 8009d3e <powf+0x9e>
 8009d32:	eeb0 0a48 	vmov.f32	s0, s16
 8009d36:	f000 f80a 	bl	8009d4e <finitef>
 8009d3a:	2800      	cmp	r0, #0
 8009d3c:	d1d4      	bne.n	8009ce8 <powf+0x48>
 8009d3e:	eeb0 0a68 	vmov.f32	s0, s17
 8009d42:	ecbd 8b04 	vpop	{d8-d9}
 8009d46:	bd08      	pop	{r3, pc}
 8009d48:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8009d4c:	e7f7      	b.n	8009d3e <powf+0x9e>

08009d4e <finitef>:
 8009d4e:	b082      	sub	sp, #8
 8009d50:	ed8d 0a01 	vstr	s0, [sp, #4]
 8009d54:	9801      	ldr	r0, [sp, #4]
 8009d56:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8009d5a:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8009d5e:	bfac      	ite	ge
 8009d60:	2000      	movge	r0, #0
 8009d62:	2001      	movlt	r0, #1
 8009d64:	b002      	add	sp, #8
 8009d66:	4770      	bx	lr

08009d68 <__ieee754_powf>:
 8009d68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d6c:	ee10 4a90 	vmov	r4, s1
 8009d70:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 8009d74:	ed2d 8b02 	vpush	{d8}
 8009d78:	ee10 7a10 	vmov	r7, s0
 8009d7c:	eeb0 8a40 	vmov.f32	s16, s0
 8009d80:	eef0 8a60 	vmov.f32	s17, s1
 8009d84:	d10c      	bne.n	8009da0 <__ieee754_powf+0x38>
 8009d86:	f487 0780 	eor.w	r7, r7, #4194304	; 0x400000
 8009d8a:	007f      	lsls	r7, r7, #1
 8009d8c:	f517 0f00 	cmn.w	r7, #8388608	; 0x800000
 8009d90:	f240 8292 	bls.w	800a2b8 <__ieee754_powf+0x550>
 8009d94:	ee38 0a28 	vadd.f32	s0, s16, s17
 8009d98:	ecbd 8b02 	vpop	{d8}
 8009d9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009da0:	f027 4500 	bic.w	r5, r7, #2147483648	; 0x80000000
 8009da4:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8009da8:	dcf4      	bgt.n	8009d94 <__ieee754_powf+0x2c>
 8009daa:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8009dae:	dd08      	ble.n	8009dc2 <__ieee754_powf+0x5a>
 8009db0:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8009db4:	d1ee      	bne.n	8009d94 <__ieee754_powf+0x2c>
 8009db6:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 8009dba:	0064      	lsls	r4, r4, #1
 8009dbc:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8009dc0:	e7e6      	b.n	8009d90 <__ieee754_powf+0x28>
 8009dc2:	2f00      	cmp	r7, #0
 8009dc4:	da20      	bge.n	8009e08 <__ieee754_powf+0xa0>
 8009dc6:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 8009dca:	da2d      	bge.n	8009e28 <__ieee754_powf+0xc0>
 8009dcc:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8009dd0:	f2c0 827b 	blt.w	800a2ca <__ieee754_powf+0x562>
 8009dd4:	ea4f 53e8 	mov.w	r3, r8, asr #23
 8009dd8:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8009ddc:	fa48 f603 	asr.w	r6, r8, r3
 8009de0:	fa06 f303 	lsl.w	r3, r6, r3
 8009de4:	4543      	cmp	r3, r8
 8009de6:	f040 8270 	bne.w	800a2ca <__ieee754_powf+0x562>
 8009dea:	f006 0601 	and.w	r6, r6, #1
 8009dee:	f1c6 0602 	rsb	r6, r6, #2
 8009df2:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8009df6:	d11f      	bne.n	8009e38 <__ieee754_powf+0xd0>
 8009df8:	2c00      	cmp	r4, #0
 8009dfa:	f280 8263 	bge.w	800a2c4 <__ieee754_powf+0x55c>
 8009dfe:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8009e02:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8009e06:	e7c7      	b.n	8009d98 <__ieee754_powf+0x30>
 8009e08:	2600      	movs	r6, #0
 8009e0a:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8009e0e:	d1f0      	bne.n	8009df2 <__ieee754_powf+0x8a>
 8009e10:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 8009e14:	f000 8250 	beq.w	800a2b8 <__ieee754_powf+0x550>
 8009e18:	dd08      	ble.n	8009e2c <__ieee754_powf+0xc4>
 8009e1a:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 800a120 <__ieee754_powf+0x3b8>
 8009e1e:	2c00      	cmp	r4, #0
 8009e20:	bfa8      	it	ge
 8009e22:	eeb0 0a68 	vmovge.f32	s0, s17
 8009e26:	e7b7      	b.n	8009d98 <__ieee754_powf+0x30>
 8009e28:	2602      	movs	r6, #2
 8009e2a:	e7ee      	b.n	8009e0a <__ieee754_powf+0xa2>
 8009e2c:	2c00      	cmp	r4, #0
 8009e2e:	f280 8246 	bge.w	800a2be <__ieee754_powf+0x556>
 8009e32:	eeb1 0a68 	vneg.f32	s0, s17
 8009e36:	e7af      	b.n	8009d98 <__ieee754_powf+0x30>
 8009e38:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8009e3c:	d102      	bne.n	8009e44 <__ieee754_powf+0xdc>
 8009e3e:	ee28 0a08 	vmul.f32	s0, s16, s16
 8009e42:	e7a9      	b.n	8009d98 <__ieee754_powf+0x30>
 8009e44:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8009e48:	eeb0 0a48 	vmov.f32	s0, s16
 8009e4c:	d107      	bne.n	8009e5e <__ieee754_powf+0xf6>
 8009e4e:	2f00      	cmp	r7, #0
 8009e50:	db05      	blt.n	8009e5e <__ieee754_powf+0xf6>
 8009e52:	ecbd 8b02 	vpop	{d8}
 8009e56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e5a:	f000 badf 	b.w	800a41c <__ieee754_sqrtf>
 8009e5e:	f000 fa4d 	bl	800a2fc <fabsf>
 8009e62:	b125      	cbz	r5, 8009e6e <__ieee754_powf+0x106>
 8009e64:	f027 4340 	bic.w	r3, r7, #3221225472	; 0xc0000000
 8009e68:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8009e6c:	d115      	bne.n	8009e9a <__ieee754_powf+0x132>
 8009e6e:	2c00      	cmp	r4, #0
 8009e70:	bfbc      	itt	lt
 8009e72:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8009e76:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8009e7a:	2f00      	cmp	r7, #0
 8009e7c:	da8c      	bge.n	8009d98 <__ieee754_powf+0x30>
 8009e7e:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 8009e82:	4335      	orrs	r5, r6
 8009e84:	d104      	bne.n	8009e90 <__ieee754_powf+0x128>
 8009e86:	ee70 7a40 	vsub.f32	s15, s0, s0
 8009e8a:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8009e8e:	e783      	b.n	8009d98 <__ieee754_powf+0x30>
 8009e90:	2e01      	cmp	r6, #1
 8009e92:	d181      	bne.n	8009d98 <__ieee754_powf+0x30>
 8009e94:	eeb1 0a40 	vneg.f32	s0, s0
 8009e98:	e77e      	b.n	8009d98 <__ieee754_powf+0x30>
 8009e9a:	0ff8      	lsrs	r0, r7, #31
 8009e9c:	3801      	subs	r0, #1
 8009e9e:	ea56 0300 	orrs.w	r3, r6, r0
 8009ea2:	d104      	bne.n	8009eae <__ieee754_powf+0x146>
 8009ea4:	ee38 8a48 	vsub.f32	s16, s16, s16
 8009ea8:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8009eac:	e774      	b.n	8009d98 <__ieee754_powf+0x30>
 8009eae:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 8009eb2:	dd73      	ble.n	8009f9c <__ieee754_powf+0x234>
 8009eb4:	4b9b      	ldr	r3, [pc, #620]	; (800a124 <__ieee754_powf+0x3bc>)
 8009eb6:	429d      	cmp	r5, r3
 8009eb8:	dc08      	bgt.n	8009ecc <__ieee754_powf+0x164>
 8009eba:	2c00      	cmp	r4, #0
 8009ebc:	da0b      	bge.n	8009ed6 <__ieee754_powf+0x16e>
 8009ebe:	2000      	movs	r0, #0
 8009ec0:	ecbd 8b02 	vpop	{d8}
 8009ec4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009ec8:	f000 baa2 	b.w	800a410 <__math_oflowf>
 8009ecc:	4b96      	ldr	r3, [pc, #600]	; (800a128 <__ieee754_powf+0x3c0>)
 8009ece:	429d      	cmp	r5, r3
 8009ed0:	dd08      	ble.n	8009ee4 <__ieee754_powf+0x17c>
 8009ed2:	2c00      	cmp	r4, #0
 8009ed4:	dcf3      	bgt.n	8009ebe <__ieee754_powf+0x156>
 8009ed6:	2000      	movs	r0, #0
 8009ed8:	ecbd 8b02 	vpop	{d8}
 8009edc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009ee0:	f000 ba90 	b.w	800a404 <__math_uflowf>
 8009ee4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8009ee8:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009eec:	eddf 6a8f 	vldr	s13, [pc, #572]	; 800a12c <__ieee754_powf+0x3c4>
 8009ef0:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8009ef4:	eee0 6a67 	vfms.f32	s13, s0, s15
 8009ef8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8009efc:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8009f00:	ee20 7a00 	vmul.f32	s14, s0, s0
 8009f04:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009f08:	eddf 7a89 	vldr	s15, [pc, #548]	; 800a130 <__ieee754_powf+0x3c8>
 8009f0c:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8009f10:	ed9f 7a88 	vldr	s14, [pc, #544]	; 800a134 <__ieee754_powf+0x3cc>
 8009f14:	eee0 7a07 	vfma.f32	s15, s0, s14
 8009f18:	ed9f 7a87 	vldr	s14, [pc, #540]	; 800a138 <__ieee754_powf+0x3d0>
 8009f1c:	eef0 6a67 	vmov.f32	s13, s15
 8009f20:	eee0 6a07 	vfma.f32	s13, s0, s14
 8009f24:	ee16 3a90 	vmov	r3, s13
 8009f28:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8009f2c:	f023 030f 	bic.w	r3, r3, #15
 8009f30:	ee06 3a90 	vmov	s13, r3
 8009f34:	eee0 6a47 	vfms.f32	s13, s0, s14
 8009f38:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009f3c:	3e01      	subs	r6, #1
 8009f3e:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 8009f42:	4306      	orrs	r6, r0
 8009f44:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8009f48:	f024 040f 	bic.w	r4, r4, #15
 8009f4c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8009f50:	bf08      	it	eq
 8009f52:	eeb0 8a47 	vmoveq.f32	s16, s14
 8009f56:	ee07 4a10 	vmov	s14, r4
 8009f5a:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8009f5e:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8009f62:	ee07 3a90 	vmov	s15, r3
 8009f66:	eee7 0a27 	vfma.f32	s1, s14, s15
 8009f6a:	ee07 4a10 	vmov	s14, r4
 8009f6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009f72:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8009f76:	ee17 1a10 	vmov	r1, s14
 8009f7a:	2900      	cmp	r1, #0
 8009f7c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009f80:	f340 817c 	ble.w	800a27c <__ieee754_powf+0x514>
 8009f84:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8009f88:	f340 80f8 	ble.w	800a17c <__ieee754_powf+0x414>
 8009f8c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8009f90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f94:	bf4c      	ite	mi
 8009f96:	2001      	movmi	r0, #1
 8009f98:	2000      	movpl	r0, #0
 8009f9a:	e791      	b.n	8009ec0 <__ieee754_powf+0x158>
 8009f9c:	f017 4fff 	tst.w	r7, #2139095040	; 0x7f800000
 8009fa0:	bf01      	itttt	eq
 8009fa2:	eddf 7a66 	vldreq	s15, [pc, #408]	; 800a13c <__ieee754_powf+0x3d4>
 8009fa6:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8009faa:	f06f 0317 	mvneq.w	r3, #23
 8009fae:	ee17 5a90 	vmoveq	r5, s15
 8009fb2:	ea4f 52e5 	mov.w	r2, r5, asr #23
 8009fb6:	bf18      	it	ne
 8009fb8:	2300      	movne	r3, #0
 8009fba:	3a7f      	subs	r2, #127	; 0x7f
 8009fbc:	441a      	add	r2, r3
 8009fbe:	4b60      	ldr	r3, [pc, #384]	; (800a140 <__ieee754_powf+0x3d8>)
 8009fc0:	f3c5 0516 	ubfx	r5, r5, #0, #23
 8009fc4:	429d      	cmp	r5, r3
 8009fc6:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 8009fca:	dd06      	ble.n	8009fda <__ieee754_powf+0x272>
 8009fcc:	4b5d      	ldr	r3, [pc, #372]	; (800a144 <__ieee754_powf+0x3dc>)
 8009fce:	429d      	cmp	r5, r3
 8009fd0:	f340 80a4 	ble.w	800a11c <__ieee754_powf+0x3b4>
 8009fd4:	3201      	adds	r2, #1
 8009fd6:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8009fda:	2500      	movs	r5, #0
 8009fdc:	4b5a      	ldr	r3, [pc, #360]	; (800a148 <__ieee754_powf+0x3e0>)
 8009fde:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8009fe2:	ee07 1a10 	vmov	s14, r1
 8009fe6:	edd3 5a00 	vldr	s11, [r3]
 8009fea:	4b58      	ldr	r3, [pc, #352]	; (800a14c <__ieee754_powf+0x3e4>)
 8009fec:	ee75 7a87 	vadd.f32	s15, s11, s14
 8009ff0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ff4:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 8009ff8:	1049      	asrs	r1, r1, #1
 8009ffa:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8009ffe:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800a002:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 800a006:	ee37 6a65 	vsub.f32	s12, s14, s11
 800a00a:	ee07 1a90 	vmov	s15, r1
 800a00e:	ee26 5a24 	vmul.f32	s10, s12, s9
 800a012:	ee77 5ae5 	vsub.f32	s11, s15, s11
 800a016:	ee15 7a10 	vmov	r7, s10
 800a01a:	401f      	ands	r7, r3
 800a01c:	ee06 7a90 	vmov	s13, r7
 800a020:	eea6 6ae7 	vfms.f32	s12, s13, s15
 800a024:	ee37 7a65 	vsub.f32	s14, s14, s11
 800a028:	ee65 7a05 	vmul.f32	s15, s10, s10
 800a02c:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800a030:	eddf 5a47 	vldr	s11, [pc, #284]	; 800a150 <__ieee754_powf+0x3e8>
 800a034:	ed9f 7a47 	vldr	s14, [pc, #284]	; 800a154 <__ieee754_powf+0x3ec>
 800a038:	eee7 5a87 	vfma.f32	s11, s15, s14
 800a03c:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800a158 <__ieee754_powf+0x3f0>
 800a040:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800a044:	eddf 5a39 	vldr	s11, [pc, #228]	; 800a12c <__ieee754_powf+0x3c4>
 800a048:	eee7 5a27 	vfma.f32	s11, s14, s15
 800a04c:	ed9f 7a43 	vldr	s14, [pc, #268]	; 800a15c <__ieee754_powf+0x3f4>
 800a050:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800a054:	eddf 5a42 	vldr	s11, [pc, #264]	; 800a160 <__ieee754_powf+0x3f8>
 800a058:	ee26 6a24 	vmul.f32	s12, s12, s9
 800a05c:	eee7 5a27 	vfma.f32	s11, s14, s15
 800a060:	ee35 7a26 	vadd.f32	s14, s10, s13
 800a064:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800a068:	ee27 7a06 	vmul.f32	s14, s14, s12
 800a06c:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 800a070:	eea4 7aa5 	vfma.f32	s14, s9, s11
 800a074:	eef0 5a67 	vmov.f32	s11, s15
 800a078:	eee6 5aa6 	vfma.f32	s11, s13, s13
 800a07c:	ee75 5a87 	vadd.f32	s11, s11, s14
 800a080:	ee15 1a90 	vmov	r1, s11
 800a084:	4019      	ands	r1, r3
 800a086:	ee05 1a90 	vmov	s11, r1
 800a08a:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800a08e:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800a092:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a096:	ee67 7a85 	vmul.f32	s15, s15, s10
 800a09a:	eee6 7a25 	vfma.f32	s15, s12, s11
 800a09e:	eeb0 6a67 	vmov.f32	s12, s15
 800a0a2:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800a0a6:	ee16 1a10 	vmov	r1, s12
 800a0aa:	4019      	ands	r1, r3
 800a0ac:	ee07 1a10 	vmov	s14, r1
 800a0b0:	eea6 7ae5 	vfms.f32	s14, s13, s11
 800a0b4:	ee06 1a10 	vmov	s12, r1
 800a0b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a0bc:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800a164 <__ieee754_powf+0x3fc>
 800a0c0:	4929      	ldr	r1, [pc, #164]	; (800a168 <__ieee754_powf+0x400>)
 800a0c2:	eddf 5a2a 	vldr	s11, [pc, #168]	; 800a16c <__ieee754_powf+0x404>
 800a0c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a0ca:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800a170 <__ieee754_powf+0x408>
 800a0ce:	eee6 7a07 	vfma.f32	s15, s12, s14
 800a0d2:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 800a0d6:	ed91 7a00 	vldr	s14, [r1]
 800a0da:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a0de:	ee07 2a10 	vmov	s14, r2
 800a0e2:	eef0 6a67 	vmov.f32	s13, s15
 800a0e6:	4a23      	ldr	r2, [pc, #140]	; (800a174 <__ieee754_powf+0x40c>)
 800a0e8:	eee6 6a25 	vfma.f32	s13, s12, s11
 800a0ec:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 800a0f0:	ed92 5a00 	vldr	s10, [r2]
 800a0f4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a0f8:	ee76 6a85 	vadd.f32	s13, s13, s10
 800a0fc:	ee76 6a87 	vadd.f32	s13, s13, s14
 800a100:	ee16 2a90 	vmov	r2, s13
 800a104:	4013      	ands	r3, r2
 800a106:	ee06 3a90 	vmov	s13, r3
 800a10a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800a10e:	ee37 7a45 	vsub.f32	s14, s14, s10
 800a112:	eea6 7a65 	vfms.f32	s14, s12, s11
 800a116:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a11a:	e70f      	b.n	8009f3c <__ieee754_powf+0x1d4>
 800a11c:	2501      	movs	r5, #1
 800a11e:	e75d      	b.n	8009fdc <__ieee754_powf+0x274>
 800a120:	00000000 	.word	0x00000000
 800a124:	3f7ffff3 	.word	0x3f7ffff3
 800a128:	3f800007 	.word	0x3f800007
 800a12c:	3eaaaaab 	.word	0x3eaaaaab
 800a130:	3fb8aa3b 	.word	0x3fb8aa3b
 800a134:	36eca570 	.word	0x36eca570
 800a138:	3fb8aa00 	.word	0x3fb8aa00
 800a13c:	4b800000 	.word	0x4b800000
 800a140:	001cc471 	.word	0x001cc471
 800a144:	005db3d6 	.word	0x005db3d6
 800a148:	0800abf8 	.word	0x0800abf8
 800a14c:	fffff000 	.word	0xfffff000
 800a150:	3e6c3255 	.word	0x3e6c3255
 800a154:	3e53f142 	.word	0x3e53f142
 800a158:	3e8ba305 	.word	0x3e8ba305
 800a15c:	3edb6db7 	.word	0x3edb6db7
 800a160:	3f19999a 	.word	0x3f19999a
 800a164:	3f76384f 	.word	0x3f76384f
 800a168:	0800ac08 	.word	0x0800ac08
 800a16c:	3f763800 	.word	0x3f763800
 800a170:	369dc3a0 	.word	0x369dc3a0
 800a174:	0800ac00 	.word	0x0800ac00
 800a178:	3338aa3c 	.word	0x3338aa3c
 800a17c:	f040 8093 	bne.w	800a2a6 <__ieee754_powf+0x53e>
 800a180:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800a178 <__ieee754_powf+0x410>
 800a184:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a188:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800a18c:	eef4 6ac7 	vcmpe.f32	s13, s14
 800a190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a194:	f73f aefa 	bgt.w	8009f8c <__ieee754_powf+0x224>
 800a198:	15db      	asrs	r3, r3, #23
 800a19a:	3b7e      	subs	r3, #126	; 0x7e
 800a19c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800a1a0:	4118      	asrs	r0, r3
 800a1a2:	4408      	add	r0, r1
 800a1a4:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800a1a8:	4a49      	ldr	r2, [pc, #292]	; (800a2d0 <__ieee754_powf+0x568>)
 800a1aa:	3b7f      	subs	r3, #127	; 0x7f
 800a1ac:	411a      	asrs	r2, r3
 800a1ae:	4002      	ands	r2, r0
 800a1b0:	ee07 2a10 	vmov	s14, r2
 800a1b4:	f3c0 0016 	ubfx	r0, r0, #0, #23
 800a1b8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800a1bc:	f1c3 0317 	rsb	r3, r3, #23
 800a1c0:	4118      	asrs	r0, r3
 800a1c2:	2900      	cmp	r1, #0
 800a1c4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a1c8:	bfb8      	it	lt
 800a1ca:	4240      	neglt	r0, r0
 800a1cc:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800a1d0:	eddf 6a40 	vldr	s13, [pc, #256]	; 800a2d4 <__ieee754_powf+0x56c>
 800a1d4:	ed9f 6a40 	vldr	s12, [pc, #256]	; 800a2d8 <__ieee754_powf+0x570>
 800a1d8:	ee17 3a10 	vmov	r3, s14
 800a1dc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800a1e0:	f023 030f 	bic.w	r3, r3, #15
 800a1e4:	ee07 3a10 	vmov	s14, r3
 800a1e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a1ec:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800a1f0:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800a1f4:	eddf 7a39 	vldr	s15, [pc, #228]	; 800a2dc <__ieee754_powf+0x574>
 800a1f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1fc:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800a200:	eef0 6a67 	vmov.f32	s13, s15
 800a204:	eee7 6a06 	vfma.f32	s13, s14, s12
 800a208:	eef0 5a66 	vmov.f32	s11, s13
 800a20c:	eee7 5a46 	vfms.f32	s11, s14, s12
 800a210:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800a214:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800a218:	ed9f 6a31 	vldr	s12, [pc, #196]	; 800a2e0 <__ieee754_powf+0x578>
 800a21c:	eddf 5a31 	vldr	s11, [pc, #196]	; 800a2e4 <__ieee754_powf+0x57c>
 800a220:	eea7 6a25 	vfma.f32	s12, s14, s11
 800a224:	eddf 5a30 	vldr	s11, [pc, #192]	; 800a2e8 <__ieee754_powf+0x580>
 800a228:	eee6 5a07 	vfma.f32	s11, s12, s14
 800a22c:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800a2ec <__ieee754_powf+0x584>
 800a230:	eea5 6a87 	vfma.f32	s12, s11, s14
 800a234:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800a2f0 <__ieee754_powf+0x588>
 800a238:	eee6 5a07 	vfma.f32	s11, s12, s14
 800a23c:	eeb0 6a66 	vmov.f32	s12, s13
 800a240:	eea5 6ac7 	vfms.f32	s12, s11, s14
 800a244:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a248:	ee66 5a86 	vmul.f32	s11, s13, s12
 800a24c:	ee36 6a47 	vsub.f32	s12, s12, s14
 800a250:	eee6 7aa7 	vfma.f32	s15, s13, s15
 800a254:	ee85 7a86 	vdiv.f32	s14, s11, s12
 800a258:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a25c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a260:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a264:	ee10 3a10 	vmov	r3, s0
 800a268:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800a26c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a270:	da1f      	bge.n	800a2b2 <__ieee754_powf+0x54a>
 800a272:	f000 f84b 	bl	800a30c <scalbnf>
 800a276:	ee20 0a08 	vmul.f32	s0, s0, s16
 800a27a:	e58d      	b.n	8009d98 <__ieee754_powf+0x30>
 800a27c:	4a1d      	ldr	r2, [pc, #116]	; (800a2f4 <__ieee754_powf+0x58c>)
 800a27e:	4293      	cmp	r3, r2
 800a280:	dd07      	ble.n	800a292 <__ieee754_powf+0x52a>
 800a282:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800a286:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a28a:	bf4c      	ite	mi
 800a28c:	2001      	movmi	r0, #1
 800a28e:	2000      	movpl	r0, #0
 800a290:	e622      	b.n	8009ed8 <__ieee754_powf+0x170>
 800a292:	d108      	bne.n	800a2a6 <__ieee754_powf+0x53e>
 800a294:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a298:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800a29c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2a0:	f6ff af7a 	blt.w	800a198 <__ieee754_powf+0x430>
 800a2a4:	e7ed      	b.n	800a282 <__ieee754_powf+0x51a>
 800a2a6:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800a2aa:	f73f af75 	bgt.w	800a198 <__ieee754_powf+0x430>
 800a2ae:	2000      	movs	r0, #0
 800a2b0:	e78c      	b.n	800a1cc <__ieee754_powf+0x464>
 800a2b2:	ee00 3a10 	vmov	s0, r3
 800a2b6:	e7de      	b.n	800a276 <__ieee754_powf+0x50e>
 800a2b8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800a2bc:	e56c      	b.n	8009d98 <__ieee754_powf+0x30>
 800a2be:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800a2f8 <__ieee754_powf+0x590>
 800a2c2:	e569      	b.n	8009d98 <__ieee754_powf+0x30>
 800a2c4:	eeb0 0a48 	vmov.f32	s0, s16
 800a2c8:	e566      	b.n	8009d98 <__ieee754_powf+0x30>
 800a2ca:	2600      	movs	r6, #0
 800a2cc:	e591      	b.n	8009df2 <__ieee754_powf+0x8a>
 800a2ce:	bf00      	nop
 800a2d0:	ff800000 	.word	0xff800000
 800a2d4:	3f317218 	.word	0x3f317218
 800a2d8:	3f317200 	.word	0x3f317200
 800a2dc:	35bfbe8c 	.word	0x35bfbe8c
 800a2e0:	b5ddea0e 	.word	0xb5ddea0e
 800a2e4:	3331bb4c 	.word	0x3331bb4c
 800a2e8:	388ab355 	.word	0x388ab355
 800a2ec:	bb360b61 	.word	0xbb360b61
 800a2f0:	3e2aaaab 	.word	0x3e2aaaab
 800a2f4:	43160000 	.word	0x43160000
 800a2f8:	00000000 	.word	0x00000000

0800a2fc <fabsf>:
 800a2fc:	ee10 3a10 	vmov	r3, s0
 800a300:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a304:	ee00 3a10 	vmov	s0, r3
 800a308:	4770      	bx	lr
	...

0800a30c <scalbnf>:
 800a30c:	ee10 3a10 	vmov	r3, s0
 800a310:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800a314:	d02b      	beq.n	800a36e <scalbnf+0x62>
 800a316:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800a31a:	d302      	bcc.n	800a322 <scalbnf+0x16>
 800a31c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a320:	4770      	bx	lr
 800a322:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800a326:	d123      	bne.n	800a370 <scalbnf+0x64>
 800a328:	4b24      	ldr	r3, [pc, #144]	; (800a3bc <scalbnf+0xb0>)
 800a32a:	eddf 7a25 	vldr	s15, [pc, #148]	; 800a3c0 <scalbnf+0xb4>
 800a32e:	4298      	cmp	r0, r3
 800a330:	ee20 0a27 	vmul.f32	s0, s0, s15
 800a334:	db17      	blt.n	800a366 <scalbnf+0x5a>
 800a336:	ee10 3a10 	vmov	r3, s0
 800a33a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800a33e:	3a19      	subs	r2, #25
 800a340:	f24c 3150 	movw	r1, #50000	; 0xc350
 800a344:	4288      	cmp	r0, r1
 800a346:	dd15      	ble.n	800a374 <scalbnf+0x68>
 800a348:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800a3c4 <scalbnf+0xb8>
 800a34c:	eddf 6a1e 	vldr	s13, [pc, #120]	; 800a3c8 <scalbnf+0xbc>
 800a350:	ee10 3a10 	vmov	r3, s0
 800a354:	eeb0 7a67 	vmov.f32	s14, s15
 800a358:	2b00      	cmp	r3, #0
 800a35a:	bfb8      	it	lt
 800a35c:	eef0 7a66 	vmovlt.f32	s15, s13
 800a360:	ee27 0a87 	vmul.f32	s0, s15, s14
 800a364:	4770      	bx	lr
 800a366:	eddf 7a19 	vldr	s15, [pc, #100]	; 800a3cc <scalbnf+0xc0>
 800a36a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800a36e:	4770      	bx	lr
 800a370:	0dd2      	lsrs	r2, r2, #23
 800a372:	e7e5      	b.n	800a340 <scalbnf+0x34>
 800a374:	4410      	add	r0, r2
 800a376:	28fe      	cmp	r0, #254	; 0xfe
 800a378:	dce6      	bgt.n	800a348 <scalbnf+0x3c>
 800a37a:	2800      	cmp	r0, #0
 800a37c:	dd06      	ble.n	800a38c <scalbnf+0x80>
 800a37e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a382:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800a386:	ee00 3a10 	vmov	s0, r3
 800a38a:	4770      	bx	lr
 800a38c:	f110 0f16 	cmn.w	r0, #22
 800a390:	da09      	bge.n	800a3a6 <scalbnf+0x9a>
 800a392:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800a3cc <scalbnf+0xc0>
 800a396:	eddf 6a0e 	vldr	s13, [pc, #56]	; 800a3d0 <scalbnf+0xc4>
 800a39a:	ee10 3a10 	vmov	r3, s0
 800a39e:	eeb0 7a67 	vmov.f32	s14, s15
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	e7d9      	b.n	800a35a <scalbnf+0x4e>
 800a3a6:	3019      	adds	r0, #25
 800a3a8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a3ac:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800a3b0:	ed9f 0a08 	vldr	s0, [pc, #32]	; 800a3d4 <scalbnf+0xc8>
 800a3b4:	ee07 3a90 	vmov	s15, r3
 800a3b8:	e7d7      	b.n	800a36a <scalbnf+0x5e>
 800a3ba:	bf00      	nop
 800a3bc:	ffff3cb0 	.word	0xffff3cb0
 800a3c0:	4c000000 	.word	0x4c000000
 800a3c4:	7149f2ca 	.word	0x7149f2ca
 800a3c8:	f149f2ca 	.word	0xf149f2ca
 800a3cc:	0da24260 	.word	0x0da24260
 800a3d0:	8da24260 	.word	0x8da24260
 800a3d4:	33000000 	.word	0x33000000

0800a3d8 <with_errnof>:
 800a3d8:	b513      	push	{r0, r1, r4, lr}
 800a3da:	4604      	mov	r4, r0
 800a3dc:	ed8d 0a01 	vstr	s0, [sp, #4]
 800a3e0:	f7fc f90a 	bl	80065f8 <__errno>
 800a3e4:	ed9d 0a01 	vldr	s0, [sp, #4]
 800a3e8:	6004      	str	r4, [r0, #0]
 800a3ea:	b002      	add	sp, #8
 800a3ec:	bd10      	pop	{r4, pc}

0800a3ee <xflowf>:
 800a3ee:	b130      	cbz	r0, 800a3fe <xflowf+0x10>
 800a3f0:	eef1 7a40 	vneg.f32	s15, s0
 800a3f4:	ee27 0a80 	vmul.f32	s0, s15, s0
 800a3f8:	2022      	movs	r0, #34	; 0x22
 800a3fa:	f7ff bfed 	b.w	800a3d8 <with_errnof>
 800a3fe:	eef0 7a40 	vmov.f32	s15, s0
 800a402:	e7f7      	b.n	800a3f4 <xflowf+0x6>

0800a404 <__math_uflowf>:
 800a404:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a40c <__math_uflowf+0x8>
 800a408:	f7ff bff1 	b.w	800a3ee <xflowf>
 800a40c:	10000000 	.word	0x10000000

0800a410 <__math_oflowf>:
 800a410:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a418 <__math_oflowf+0x8>
 800a414:	f7ff bfeb 	b.w	800a3ee <xflowf>
 800a418:	70000000 	.word	0x70000000

0800a41c <__ieee754_sqrtf>:
 800a41c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800a420:	4770      	bx	lr
	...

0800a424 <_init>:
 800a424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a426:	bf00      	nop
 800a428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a42a:	bc08      	pop	{r3}
 800a42c:	469e      	mov	lr, r3
 800a42e:	4770      	bx	lr

0800a430 <_fini>:
 800a430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a432:	bf00      	nop
 800a434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a436:	bc08      	pop	{r3}
 800a438:	469e      	mov	lr, r3
 800a43a:	4770      	bx	lr
